from dataclasses import dataclass, field
from decimal import Decimal
from enum import Enum
from typing import Any

from xsdata.models.datatype import XmlDate, XmlDateTime, XmlDuration, XmlPeriod


class ActionType(Enum):
    """ActionType provides a list of actions, describing the intention of the data
    transmission from the sender's side.

    Each action provided at the data or metadata set level applies to
    the entire data set for which it is given. Note that the actions
    indicated in the Message Header are optional, and used to summarize
    specific actions indicated with this data type for all registry
    interactions. The "Informational" value is used when the message
    contains information in response to a query, rather than being used
    to invoke a maintenance activity.

    :cvar APPEND: Append - this is an incremental update for an existing
        data/metadata set or the provision of new data or documentation
        (attribute values) formerly absent. If any of the supplied data
        or metadata is already present, it will not replace that data or
        metadata. This corresponds to the "Update" value found in
        version 1.0 of the SDMX Technical Standards.
    :cvar REPLACE: Replace - data/metadata is to be replaced, and may
        also include additional data/metadata to be appended. The
        replacement occurs at the level of the observation - that is, it
        is not possible to replace an entire series.
    :cvar DELETE: Delete - data/metadata is to be deleted. Deletion
        occurs at the lowest level object. For instance, if a delete
        data message contains a series with no observations, then the
        entire series will be deleted. If the series contains
        observations, then only those observations specified will be
        deleted. The same basic concept applies for attributes. If a
        series or observation in a delete message contains attributes,
        then only those attributes will be deleted.
    :cvar INFORMATION: Informational - data/metadata is being exchanged
        for informational purposes only, and not meant to update a
        system.
    """

    APPEND = "Append"
    REPLACE = "Replace"
    DELETE = "Delete"
    INFORMATION = "Information"


class BasicComponentDataType(Enum):
    """
    BasicComponentDataType provides an enumerated list of the types of characters
    allowed in the textType attribute for all non-target object components.

    :cvar STRING: A string datatype corresponding to W3C XML Schema's
        xs:string datatype.
    :cvar ALPHA: A string datatype which only allows for the simple
        aplhabetic charcter set of A-Z, a-z.
    :cvar ALPHA_NUMERIC: A string datatype which only allows for the
        simple alphabetic character set of A-Z, a-z plus the simple
        numeric character set of 0-9.
    :cvar NUMERIC: A string datatype which only allows for the simple
        numeric character set of 0-9. This format is not treated as an
        integer, and therefore can having leading zeros.
    :cvar BIG_INTEGER: An integer datatype corresponding to W3C XML
        Schema's xs:integer datatype.
    :cvar INTEGER: An integer datatype corresponding to W3C XML Schema's
        xs:int datatype.
    :cvar LONG: A numeric datatype corresponding to W3C XML Schema's
        xs:long datatype.
    :cvar SHORT: A numeric datatype corresponding to W3C XML Schema's
        xs:short datatype.
    :cvar DECIMAL: A numeric datatype corresponding to W3C XML Schema's
        xs:decimal datatype.
    :cvar FLOAT: A numeric datatype corresponding to W3C XML Schema's
        xs:float datatype.
    :cvar DOUBLE: A numeric datatype corresponding to W3C XML Schema's
        xs:double datatype.
    :cvar BOOLEAN: A datatype corresponding to W3C XML Schema's
        xs:boolean datatype.
    :cvar URI: A datatype corresponding to W3C XML Schema's xs:anyURI
        datatype.
    :cvar COUNT: A simple incrementing Integer type. The isSequence
        facet must be set to true, and the interval facet must be set to
        "1".
    :cvar INCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the inclusive
        boundaries of a numeric range of type xs:decimal.
    :cvar EXCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the exclusive
        boundaries of a numeric range, of type xs:decimal.
    :cvar INCREMENTAL: This value indicates that the value increments
        according to the value provided in the interval facet, and has a
        true value for the isSequence facet.
    :cvar OBSERVATIONAL_TIME_PERIOD: Observational time periods are the
        superset of all time periods in SDMX. It is the union of the
        standard time periods (i.e. Gregorian time periods, the
        reporting time periods, and date time) and a time range.
    :cvar STANDARD_TIME_PERIOD: Standard time periods is a superset of
        distinct time period in SDMX. It is the union of the basic time
        periods (i.e. the Gregorian time periods and date time) and the
        reporting time periods.
    :cvar BASIC_TIME_PERIOD: BasicTimePeriod time periods is a superset
        of the Gregorian time periods and a date time.
    :cvar GREGORIAN_TIME_PERIOD: Gregorian time periods correspond to
        calendar periods and are represented in ISO-8601 formats. This
        is the union of the year, year month, and date formats.
    :cvar GREGORIAN_YEAR: A Gregorian time period corresponding to W3C
        XML Schema's xs:gYear datatype, which is based on ISO-8601.
    :cvar GREGORIAN_YEAR_MONTH: A time datatype corresponding to W3C XML
        Schema's xs:gYearMonth datatype, which is based on ISO-8601.
    :cvar GREGORIAN_DAY: A time datatype corresponding to W3C XML
        Schema's xs:date datatype, which is based on ISO-8601.
    :cvar REPORTING_TIME_PERIOD: Reporting time periods represent
        periods of a standard length within a reporting year, where to
        start of the year (defined as a month and day) must be defined
        elsewhere or it is assumed to be January 1. This is the union of
        the reporting year, semester, trimester, quarter, month, week,
        and day.
    :cvar REPORTING_YEAR: A reporting year represents a period of 1 year
        (P1Y) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingYearType.
    :cvar REPORTING_SEMESTER: A reporting semester represents a period
        of 6 months (P6M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingSemesterType.
    :cvar REPORTING_TRIMESTER: A reporting trimester represents a period
        of 4 months (P4M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingTrimesterType.
    :cvar REPORTING_QUARTER: A reporting quarter represents a period of
        3 months (P3M) from the start date of the reporting year. This
        is expressed as using the SDMX specific ReportingQuarterType.
    :cvar REPORTING_MONTH: A reporting month represents a period of 1
        month (P1M) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingMonthType.
    :cvar REPORTING_WEEK: A reporting week represents a period of 7 days
        (P7D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingWeekType.
    :cvar REPORTING_DAY: A reporting day represents a period of 1 day
        (P1D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingDayType.
    :cvar DATE_TIME: A time datatype corresponding to W3C XML Schema's
        xs:dateTime datatype.
    :cvar TIME_RANGE: TimeRange defines a time period by providing a
        distinct start (date or date time) and a duration.
    :cvar MONTH: A time datatype corresponding to W3C XML Schema's
        xs:gMonth datatype.
    :cvar MONTH_DAY: A time datatype corresponding to W3C XML Schema's
        xs:gMonthDay datatype.
    :cvar DAY: A time datatype corresponding to W3C XML Schema's xs:gDay
        datatype.
    :cvar TIME: A time datatype corresponding to W3C XML Schema's
        xs:time datatype.
    :cvar DURATION: A time datatype corresponding to W3C XML Schema's
        xs:duration datatype.
    :cvar XHTML: This value indicates that the content of the component
        can contain XHTML markup.
    """

    STRING = "String"
    ALPHA = "Alpha"
    ALPHA_NUMERIC = "AlphaNumeric"
    NUMERIC = "Numeric"
    BIG_INTEGER = "BigInteger"
    INTEGER = "Integer"
    LONG = "Long"
    SHORT = "Short"
    DECIMAL = "Decimal"
    FLOAT = "Float"
    DOUBLE = "Double"
    BOOLEAN = "Boolean"
    URI = "URI"
    COUNT = "Count"
    INCLUSIVE_VALUE_RANGE = "InclusiveValueRange"
    EXCLUSIVE_VALUE_RANGE = "ExclusiveValueRange"
    INCREMENTAL = "Incremental"
    OBSERVATIONAL_TIME_PERIOD = "ObservationalTimePeriod"
    STANDARD_TIME_PERIOD = "StandardTimePeriod"
    BASIC_TIME_PERIOD = "BasicTimePeriod"
    GREGORIAN_TIME_PERIOD = "GregorianTimePeriod"
    GREGORIAN_YEAR = "GregorianYear"
    GREGORIAN_YEAR_MONTH = "GregorianYearMonth"
    GREGORIAN_DAY = "GregorianDay"
    REPORTING_TIME_PERIOD = "ReportingTimePeriod"
    REPORTING_YEAR = "ReportingYear"
    REPORTING_SEMESTER = "ReportingSemester"
    REPORTING_TRIMESTER = "ReportingTrimester"
    REPORTING_QUARTER = "ReportingQuarter"
    REPORTING_MONTH = "ReportingMonth"
    REPORTING_WEEK = "ReportingWeek"
    REPORTING_DAY = "ReportingDay"
    DATE_TIME = "DateTime"
    TIME_RANGE = "TimeRange"
    MONTH = "Month"
    MONTH_DAY = "MonthDay"
    DAY = "Day"
    TIME = "Time"
    DURATION = "Duration"
    XHTML = "XHTML"


class CodeTypeCodelistType(Enum):
    """
    CodeTypeCodelistType provides an enumeration of all code objects.
    """

    CODE = "Code"
    HIERARCHICAL_CODE = "HierarchicalCode"


class CodelistTypeCodelistType(Enum):
    """
    CodelistTypeCodelistType provides an enumeration of all codelist objects.
    """

    CODELIST = "Codelist"
    HIERARCHICAL_CODELIST = "HierarchicalCodelist"


class ComponentListTypeCodelistType(Enum):
    """
    ComponentListTypeCodelistType provides an enumeration of all component list
    objects.
    """

    ATTRIBUTE_DESCRIPTOR = "AttributeDescriptor"
    DIMENSION_DESCRIPTOR = "DimensionDescriptor"
    GROUP_DIMENSION_DESCRIPTOR = "GroupDimensionDescriptor"
    MEASURE_DESCRIPTOR = "MeasureDescriptor"
    METADATA_TARGET = "MetadataTarget"
    REPORT_STRUCTURE = "ReportStructure"


class ComponentTypeCodelistType(Enum):
    """
    ComponentTypeCodelistType provides an enumeration of all component objects.
    """

    ATTRIBUTE = "Attribute"
    CONSTRAINT_TARGET = "ConstraintTarget"
    DATA_SET_TARGET = "DataSetTarget"
    DIMENSION = "Dimension"
    IDENTIFIABLE_OBJECT_TARGET = "IdentifiableObjectTarget"
    DIMENSION_DESCRIPTOR_VALUES_TARGET = "DimensionDescriptorValuesTarget"
    MEASURE_DIMENSION = "MeasureDimension"
    METADATA_ATTRIBUTE = "MetadataAttribute"
    PRIMARY_MEASURE = "PrimaryMeasure"
    REPORTING_YEAR_START_DAY = "ReportingYearStartDay"
    REPORT_PERIOD_TARGET = "ReportPeriodTarget"
    TIME_DIMENSION = "TimeDimension"


class ConcreteMaintainableTypeCodelistType(Enum):
    """
    ConcreteMaintainableTypeCodelistType provides an enumeration of all concrete
    maintainable objects.
    """

    AGENCY_SCHEME = "AgencyScheme"
    ATTACHMENT_CONSTRAINT = "AttachmentConstraint"
    CATEGORISATION = "Categorisation"
    CATEGORY_SCHEME = "CategoryScheme"
    CODELIST = "Codelist"
    CONCEPT_SCHEME = "ConceptScheme"
    CONTENT_CONSTRAINT = "ContentConstraint"
    DATAFLOW = "Dataflow"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    DATA_STRUCTURE = "DataStructure"
    HIERARCHICAL_CODELIST = "HierarchicalCodelist"
    METADATAFLOW = "Metadataflow"
    METADATA_STRUCTURE = "MetadataStructure"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"
    PROCESS = "Process"
    PROVISION_AGREEMENT = "ProvisionAgreement"
    REPORTING_TAXONOMY = "ReportingTaxonomy"
    STRUCTURE_SET = "StructureSet"


class ConstraintTypeCodelistType1(Enum):
    """
    ConstraintTypeCodelistType provides an enumeration of all constraint objects.
    """

    ATTACHMENT_CONSTRAINT = "AttachmentConstraint"
    CONTENT_CONSTRAINT = "ContentConstraint"


class ContentConstraintTypeCodeType(Enum):
    """ContentConstraintTypeCodeType defines a list of types for a content
    constraint.

    A content constraint can state which data is present or which
    content is allowed for the constraint attachment.

    :cvar ALLOWED: The constraint contains the allowed values for
        attachable object.
    :cvar ACTUAL: The constraints contains the actual data present for
        the attachable object.
    """

    ALLOWED = "Allowed"
    ACTUAL = "Actual"


class DataStructureComponentTypeCodelistType(Enum):
    """
    DataStructureComponentTypeCodelistType provides an enumeration of all data
    structure component objects, except for the primary measure.
    """

    ATTRIBUTE = "Attribute"
    DIMENSION = "Dimension"
    MEASURE_DIMENSION = "MeasureDimension"
    PRIMARY_MEASURE = "PrimaryMeasure"
    REPORTING_YEAR_START_DAY = "ReportingYearStartDay"
    TIME_DIMENSION = "TimeDimension"


class DataType(Enum):
    """
    DataTypeType provides an enumerated list of the types of data formats allowed
    as the for the representation of an object.

    :cvar STRING: A string datatype corresponding to W3C XML Schema's
        xs:string datatype.
    :cvar ALPHA: A string datatype which only allows for the simple
        aplhabetic charcter set of A-Z, a-z.
    :cvar ALPHA_NUMERIC: A string datatype which only allows for the
        simple alphabetic character set of A-Z, a-z plus the simple
        numeric character set of 0-9.
    :cvar NUMERIC: A string datatype which only allows for the simple
        numeric character set of 0-9. This format is not treated as an
        integer, and therefore can having leading zeros.
    :cvar BIG_INTEGER: An integer datatype corresponding to W3C XML
        Schema's xs:integer datatype.
    :cvar INTEGER: An integer datatype corresponding to W3C XML Schema's
        xs:int datatype.
    :cvar LONG: A numeric datatype corresponding to W3C XML Schema's
        xs:long datatype.
    :cvar SHORT: A numeric datatype corresponding to W3C XML Schema's
        xs:short datatype.
    :cvar DECIMAL: A numeric datatype corresponding to W3C XML Schema's
        xs:decimal datatype.
    :cvar FLOAT: A numeric datatype corresponding to W3C XML Schema's
        xs:float datatype.
    :cvar DOUBLE: A numeric datatype corresponding to W3C XML Schema's
        xs:double datatype.
    :cvar BOOLEAN: A datatype corresponding to W3C XML Schema's
        xs:boolean datatype.
    :cvar URI: A datatype corresponding to W3C XML Schema's xs:anyURI
        datatype.
    :cvar COUNT: A simple incrementing Integer type. The isSequence
        facet must be set to true, and the interval facet must be set to
        "1".
    :cvar INCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the inclusive
        boundaries of a numeric range of type xs:decimal.
    :cvar EXCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the exclusive
        boundaries of a numeric range, of type xs:decimal.
    :cvar INCREMENTAL: This value indicates that the value increments
        according to the value provided in the interval facet, and has a
        true value for the isSequence facet.
    :cvar OBSERVATIONAL_TIME_PERIOD: Observational time periods are the
        superset of all time periods in SDMX. It is the union of the
        standard time periods (i.e. Gregorian time periods, the
        reporting time periods, and date time) and a time range.
    :cvar STANDARD_TIME_PERIOD: Standard time periods is a superset of
        distinct time period in SDMX. It is the union of the basic time
        periods (i.e. the Gregorian time periods and date time) and the
        reporting time periods.
    :cvar BASIC_TIME_PERIOD: BasicTimePeriod time periods is a superset
        of the Gregorian time periods and a date time.
    :cvar GREGORIAN_TIME_PERIOD: Gregorian time periods correspond to
        calendar periods and are represented in ISO-8601 formats. This
        is the union of the year, year month, and date formats.
    :cvar GREGORIAN_YEAR: A Gregorian time period corresponding to W3C
        XML Schema's xs:gYear datatype, which is based on ISO-8601.
    :cvar GREGORIAN_YEAR_MONTH: A time datatype corresponding to W3C XML
        Schema's xs:gYearMonth datatype, which is based on ISO-8601.
    :cvar GREGORIAN_DAY: A time datatype corresponding to W3C XML
        Schema's xs:date datatype, which is based on ISO-8601.
    :cvar REPORTING_TIME_PERIOD: Reporting time periods represent
        periods of a standard length within a reporting year, where to
        start of the year (defined as a month and day) must be defined
        elsewhere or it is assumed to be January 1. This is the union of
        the reporting year, semester, trimester, quarter, month, week,
        and day.
    :cvar REPORTING_YEAR: A reporting year represents a period of 1 year
        (P1Y) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingYearType.
    :cvar REPORTING_SEMESTER: A reporting semester represents a period
        of 6 months (P6M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingSemesterType.
    :cvar REPORTING_TRIMESTER: A reporting trimester represents a period
        of 4 months (P4M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingTrimesterType.
    :cvar REPORTING_QUARTER: A reporting quarter represents a period of
        3 months (P3M) from the start date of the reporting year. This
        is expressed as using the SDMX specific ReportingQuarterType.
    :cvar REPORTING_MONTH: A reporting month represents a period of 1
        month (P1M) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingMonthType.
    :cvar REPORTING_WEEK: A reporting week represents a period of 7 days
        (P7D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingWeekType.
    :cvar REPORTING_DAY: A reporting day represents a period of 1 day
        (P1D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingDayType.
    :cvar DATE_TIME: A time datatype corresponding to W3C XML Schema's
        xs:dateTime datatype.
    :cvar TIME_RANGE: TimeRange defines a time period by providing a
        distinct start (date or date time) and a duration.
    :cvar MONTH: A time datatype corresponding to W3C XML Schema's
        xs:gMonth datatype.
    :cvar MONTH_DAY: A time datatype corresponding to W3C XML Schema's
        xs:gMonthDay datatype.
    :cvar DAY: A time datatype corresponding to W3C XML Schema's xs:gDay
        datatype.
    :cvar TIME: A time datatype corresponding to W3C XML Schema's
        xs:time datatype.
    :cvar DURATION: A time datatype corresponding to W3C XML Schema's
        xs:duration datatype.
    :cvar XHTML: This value indicates that the content of the component
        can contain XHTML markup.
    :cvar KEY_VALUES: This value indicates that the content of the
        component will be data key (a set of dimension references and
        values for the dimensions).
    :cvar IDENTIFIABLE_REFERENCE: This value indicates that the content
        of the component will be complete reference (either URN or full
        set of reference fields) to an Identifiable object in the SDMX
        Information Model.
    :cvar DATA_SET_REFERENCE: This value indicates that the content of
        the component will be reference to a data provider, which is
        actually a formal reference to a data provider and a data set
        identifier value.
    :cvar ATTACHMENT_CONSTRAINT_REFERENCE: This value indicates that the
        content of the component will be reference to an attachment
        constraint, which is actually a combination of a collection of
        full or partial key values and a reference to a data set or data
        structure, usage, or provision agreement.
    """

    STRING = "String"
    ALPHA = "Alpha"
    ALPHA_NUMERIC = "AlphaNumeric"
    NUMERIC = "Numeric"
    BIG_INTEGER = "BigInteger"
    INTEGER = "Integer"
    LONG = "Long"
    SHORT = "Short"
    DECIMAL = "Decimal"
    FLOAT = "Float"
    DOUBLE = "Double"
    BOOLEAN = "Boolean"
    URI = "URI"
    COUNT = "Count"
    INCLUSIVE_VALUE_RANGE = "InclusiveValueRange"
    EXCLUSIVE_VALUE_RANGE = "ExclusiveValueRange"
    INCREMENTAL = "Incremental"
    OBSERVATIONAL_TIME_PERIOD = "ObservationalTimePeriod"
    STANDARD_TIME_PERIOD = "StandardTimePeriod"
    BASIC_TIME_PERIOD = "BasicTimePeriod"
    GREGORIAN_TIME_PERIOD = "GregorianTimePeriod"
    GREGORIAN_YEAR = "GregorianYear"
    GREGORIAN_YEAR_MONTH = "GregorianYearMonth"
    GREGORIAN_DAY = "GregorianDay"
    REPORTING_TIME_PERIOD = "ReportingTimePeriod"
    REPORTING_YEAR = "ReportingYear"
    REPORTING_SEMESTER = "ReportingSemester"
    REPORTING_TRIMESTER = "ReportingTrimester"
    REPORTING_QUARTER = "ReportingQuarter"
    REPORTING_MONTH = "ReportingMonth"
    REPORTING_WEEK = "ReportingWeek"
    REPORTING_DAY = "ReportingDay"
    DATE_TIME = "DateTime"
    TIME_RANGE = "TimeRange"
    MONTH = "Month"
    MONTH_DAY = "MonthDay"
    DAY = "Day"
    TIME = "Time"
    DURATION = "Duration"
    XHTML = "XHTML"
    KEY_VALUES = "KeyValues"
    IDENTIFIABLE_REFERENCE = "IdentifiableReference"
    DATA_SET_REFERENCE = "DataSetReference"
    ATTACHMENT_CONSTRAINT_REFERENCE = "AttachmentConstraintReference"


class DimensionEumerationSchemeTypeCodelistType(Enum):
    """
    DimensionEumerationSchemeTypeCodelistType provides an enumeration of all item
    schemes which are allowable as the representation of a data structure
    definition component.
    """

    CODELIST = "Codelist"
    CONCEPT_SCHEME = "ConceptScheme"


class DimensionTypeCodelistType(Enum):
    """
    DimensionTypeCodelistType provides an enumeration of all dimension objects.
    """

    DIMENSION = "Dimension"
    MEASURE_DIMENSION = "MeasureDimension"
    TIME_DIMENSION = "TimeDimension"


class DimensionTypeType(Enum):
    """
    DimensionTypeType enumerates the sub-classes of a dimension.

    :cvar DIMENSION: An ordinary dimension.
    :cvar MEASURE_DIMENSION: A measure dimension.
    :cvar TIME_DIMENSION: The time dimension.
    """

    DIMENSION = "Dimension"
    MEASURE_DIMENSION = "MeasureDimension"
    TIME_DIMENSION = "TimeDimension"


@dataclass
class EmptyType:
    """
    EmptyType is an empty complex type for elements where the presence of the tag
    indicates all that is necessary.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


class ItemSchemePackageTypeCodelistType(Enum):
    """
    ItemSchemePackageTypeCodelistType provides an enumeration of all SDMX packages
    which contain item schemes.
    """

    BASE = "base"
    CODELIST = "codelist"
    CATEGORYSCHEME = "categoryscheme"
    CONCEPTSCHEME = "conceptscheme"


class ItemSchemeTypeCodelistType(Enum):
    """
    ItemSchemeTypeCodelistType provides an enumeration of all item scheme objects.
    """

    AGENCY_SCHEME = "AgencyScheme"
    CATEGORY_SCHEME = "CategoryScheme"
    CODELIST = "Codelist"
    CONCEPT_SCHEME = "ConceptScheme"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"
    REPORTING_TAXONOMY = "ReportingTaxonomy"


class ItemTypeCodelistType(Enum):
    """
    ItemTypeCodelistType provides an enumeration of all item objects.
    """

    AGENCY = "Agency"
    CATEGORY = "Category"
    CODE = "Code"
    CONCEPT = "Concept"
    DATA_CONSUMER = "DataConsumer"
    DATA_PROVIDER = "DataProvider"
    ORGANISATION_UNIT = "OrganisationUnit"
    REPORTING_CATEGORY = "ReportingCategory"


class LateBoundVersionType(Enum):
    """LateBoundVersionType is a single value code list, used to include the '*' character - indicating that the latest version of an object is required.

    :cvar VALUE: Indicates that the latest version of an object is
        requested.
    """

    VALUE = "*"


class MaintainableTypeCodelistType(Enum):
    """
    MaintainableTypeCodelistType provides an enumeration of all maintainable
    objects.
    """

    ANY = "Any"
    AGENCY_SCHEME = "AgencyScheme"
    ATTACHMENT_CONSTRAINT = "AttachmentConstraint"
    CATEGORISATION = "Categorisation"
    CATEGORY_SCHEME = "CategoryScheme"
    CODELIST = "Codelist"
    CONCEPT_SCHEME = "ConceptScheme"
    CONSTRAINT = "Constraint"
    CONTENT_CONSTRAINT = "ContentConstraint"
    DATAFLOW = "Dataflow"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    DATA_STRUCTURE = "DataStructure"
    HIERARCHICAL_CODELIST = "HierarchicalCodelist"
    METADATAFLOW = "Metadataflow"
    METADATA_STRUCTURE = "MetadataStructure"
    ORGANISATION_SCHEME = "OrganisationScheme"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"
    PROCESS = "Process"
    PROVISION_AGREEMENT = "ProvisionAgreement"
    REPORTING_TAXONOMY = "ReportingTaxonomy"
    STRUCTURE_SET = "StructureSet"


class MetadataStructureComponentTypeCodelistType(Enum):
    """
    MetadataStructureComponentTypeCodelistType provides an enumeration of all
    metadata structure component objects.
    """

    CONSTRAINT_TARGET = "ConstraintTarget"
    DATA_SET_TARGET = "DataSetTarget"
    IDENTIFIABLE_OBJECT_TARGET = "IdentifiableObjectTarget"
    DIMENSION_DESCRIPTOR_VALUES_TARGET = "DimensionDescriptorValuesTarget"
    METADATA_ATTRIBUTE = "MetadataAttribute"
    REPORT_PERIOD_TARGET = "ReportPeriodTarget"


class ObjectTypeCodelistType(Enum):
    """ObjectTypeCodelistType provides an enumeration of all objects outside of the
    base infomration model class.

    This includes some abstract object types such as Organsiation and
    Constraint.
    """

    ANY = "Any"
    AGENCY = "Agency"
    AGENCY_SCHEME = "AgencyScheme"
    ATTACHMENT_CONSTRAINT = "AttachmentConstraint"
    ATTRIBUTE = "Attribute"
    ATTRIBUTE_DESCRIPTOR = "AttributeDescriptor"
    CATEGORISATION = "Categorisation"
    CATEGORY = "Category"
    CATEGORY_SCHEME_MAP = "CategorySchemeMap"
    CATEGORY_SCHEME = "CategoryScheme"
    CODE = "Code"
    CODE_MAP = "CodeMap"
    CODELIST = "Codelist"
    CODELIST_MAP = "CodelistMap"
    COMPONENT_MAP = "ComponentMap"
    CONCEPT = "Concept"
    CONCEPT_MAP = "ConceptMap"
    CONCEPT_SCHEME = "ConceptScheme"
    CONCEPT_SCHEME_MAP = "ConceptSchemeMap"
    CONSTRAINT = "Constraint"
    CONSTRAINT_TARGET = "ConstraintTarget"
    CONTENT_CONSTRAINT = "ContentConstraint"
    DATAFLOW = "Dataflow"
    DATA_CONSUMER = "DataConsumer"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER = "DataProvider"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    DATA_SET_TARGET = "DataSetTarget"
    DATA_STRUCTURE = "DataStructure"
    DIMENSION = "Dimension"
    DIMENSION_DESCRIPTOR = "DimensionDescriptor"
    DIMENSION_DESCRIPTOR_VALUES_TARGET = "DimensionDescriptorValuesTarget"
    GROUP_DIMENSION_DESCRIPTOR = "GroupDimensionDescriptor"
    HIERARCHICAL_CODE = "HierarchicalCode"
    HIERARCHICAL_CODELIST = "HierarchicalCodelist"
    HIERARCHY = "Hierarchy"
    HYBRID_CODELIST_MAP = "HybridCodelistMap"
    HYBRID_CODE_MAP = "HybridCodeMap"
    IDENTIFIABLE_OBJECT_TARGET = "IdentifiableObjectTarget"
    LEVEL = "Level"
    MEASURE_DESCRIPTOR = "MeasureDescriptor"
    MEASURE_DIMENSION = "MeasureDimension"
    METADATAFLOW = "Metadataflow"
    METADATA_ATTRIBUTE = "MetadataAttribute"
    METADATA_SET = "MetadataSet"
    METADATA_STRUCTURE = "MetadataStructure"
    METADATA_TARGET = "MetadataTarget"
    ORGANISATION = "Organisation"
    ORGANISATION_MAP = "OrganisationMap"
    ORGANISATION_SCHEME = "OrganisationScheme"
    ORGANISATION_SCHEME_MAP = "OrganisationSchemeMap"
    ORGANISATION_UNIT = "OrganisationUnit"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"
    PRIMARY_MEASURE = "PrimaryMeasure"
    PROCESS = "Process"
    PROCESS_STEP = "ProcessStep"
    PROVISION_AGREEMENT = "ProvisionAgreement"
    REPORTING_CATEGORY = "ReportingCategory"
    REPORTING_CATEGORY_MAP = "ReportingCategoryMap"
    REPORTING_TAXONOMY = "ReportingTaxonomy"
    REPORTING_TAXONOMY_MAP = "ReportingTaxonomyMap"
    REPORTING_YEAR_START_DAY = "ReportingYearStartDay"
    REPORT_PERIOD_TARGET = "ReportPeriodTarget"
    REPORT_STRUCTURE = "ReportStructure"
    STRUCTURE_MAP = "StructureMap"
    STRUCTURE_SET = "StructureSet"
    TIME_DIMENSION = "TimeDimension"
    TRANSITION = "Transition"


class ObsDimensionsCodeType(Enum):
    """
    ObsDimensionsCodeType is an enumeration containing the values "TimeDimension"
    and "AllDimensions".

    :cvar ALL_DIMENSIONS: AllDimensions notes that the cross sectional
        format shall be flat; that is all dimensions should be contained
        at the observation level.
    :cvar TIME_PERIOD: TIME_PERIOD refers to the fixed identifier for
        the time dimension.
    """

    ALL_DIMENSIONS = "AllDimensions"
    TIME_PERIOD = "TIME_PERIOD"


class OrderedOperatorType(Enum):
    """
    OrderedOperatorType combines the SimpleOperatorType and the RangeOperatorType
    to provide a full range or operators for any ordered value.

    :cvar NOT_EQUAL: (!=) - value must not be equal to the value
        supplied.
    :cvar EQUAL: (=) - value must be exactly equal to the value
        supplied.
    :cvar GREATER_THAN_OR_EQUAL: (&gt;=) - value must be greater than or
        equal to the value supplied.
    :cvar LESS_THAN_OR_EQUAL: (&lt;=) - value must be less than or equal
        to the value supplied.
    :cvar GREATER_THAN: (&gt;) - value must be greater than the value
        supplied.
    :cvar LESS_THAN: (&lt;) - value must be less than the value
        supplied.
    """

    NOT_EQUAL = "notEqual"
    EQUAL = "equal"
    GREATER_THAN_OR_EQUAL = "greaterThanOrEqual"
    LESS_THAN_OR_EQUAL = "lessThanOrEqual"
    GREATER_THAN = "greaterThan"
    LESS_THAN = "lessThan"


class OrganisationSchemeTypeCodelistType(Enum):
    """
    OrganisationSchemeTypeCodelistType provides an enumeration of all organisation
    scheme objects.
    """

    AGENCY_SCHEME = "AgencyScheme"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"


class OrganisationTypeCodelistType(Enum):
    """
    OrganisationTypeCodelistType provides an enumeration of all organisation
    objects.
    """

    AGENCY = "Agency"
    DATA_CONSUMER = "DataConsumer"
    DATA_PROVIDER = "DataProvider"
    ORGANISATION_UNIT = "OrganisationUnit"


class PackageTypeCodelistType(Enum):
    """
    PackageTypeCodelistType provides an enumeration of all SDMX package names.
    """

    BASE = "base"
    DATASTRUCTURE = "datastructure"
    METADATASTRUCTURE = "metadatastructure"
    PROCESS = "process"
    REGISTRY = "registry"
    MAPPING = "mapping"
    CODELIST = "codelist"
    CATEGORYSCHEME = "categoryscheme"
    CONCEPTSCHEME = "conceptscheme"


@dataclass
class QueryableDataSourceType1:
    """
    QueryableDataSourceType describes a data source which is accepts an standard
    SDMX Query message and responds appropriately.

    :ivar data_url: DataURL contains the URL of the data source.
    :ivar wsdlurl: WSDLURL provides the location of a WSDL instance on
        the internet which describes the queryable data source.
    :ivar wadlurl: WADLURL provides the location of a WADL instance on
        the internet which describes the REST protocol of the queryable
        data source.
    :ivar is_restdatasource: The isRESTDatasource attribute indicates,
        if true, that the queryable data source is accessible via the
        REST protocol.
    :ivar is_web_service_datasource: The isWebServiceDatasource
        attribute indicates, if true, that the queryable data source is
        accessible via Web Services protocols.
    """

    class Meta:
        name = "QueryableDataSourceType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    data_url: None | str = field(
        default=None,
        metadata={
            "name": "DataURL",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "required": True,
        },
    )
    wsdlurl: None | str = field(
        default=None,
        metadata={
            "name": "WSDLURL",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    wadlurl: None | str = field(
        default=None,
        metadata={
            "name": "WADLURL",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    is_restdatasource: None | bool = field(
        default=None,
        metadata={
            "name": "isRESTDatasource",
            "type": "Attribute",
            "required": True,
        },
    )
    is_web_service_datasource: None | bool = field(
        default=None,
        metadata={
            "name": "isWebServiceDatasource",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ReferencePeriodType:
    """
    Specifies the inclusive start and end times.

    :ivar start_time: The startTime attributes contains the inclusive
        start date for the reference period.
    :ivar end_time: The endTime attributes contains the inclusive end
        date for the reference period.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    start_time: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "startTime",
            "type": "Attribute",
            "required": True,
        },
    )
    end_time: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class RegionType:
    """RegionType is an abstract type which defines a generic constraint region.

    This type can be refined to define regions for data or metadata sets. A region is defined by a collection of key values - each of which a collection of values for a component which disambiguates data or metadata (i.e. dimensions or the target objects of a metadata target). For each region, as collection of attribute values can be provided. Taken together, the key values and attributes serve to identify or describe a subset of a data or metadata set. Finally, the region can flagged as being included or excluded, although this flag only makes sense when the region is used in a particular context.

    :ivar key_value: KeyValue contains a reference to a component which
        disambiguates the data or metadata (i.e. a dimension or target
        object) and provides a collection of values for the component.
        The collection of values can be flagged as being inclusive or
        exclusive to the region being defined. Any key component that is
        not included is assumed to be wild carded, which is to say that
        the cube includes all possible values for the un-referenced key
        components. Further, this assumption applies to the values of
        the components as well. The values for any given component can
        only be sub-setted in the region by explicit inclusion or
        exclusion. For example, a dimension X which has the possible
        values of 1, 2, 3 is assumed to have all of these values if a
        key value is not defined. If a key value is defined with an
        inclusion attribute of true and the values of 1 and 2, the only
        the values of 1 and 2 for dimension X are included in the
        definition of the region. If the key value is defined with an
        inclusion attribute of false and the value of 1, then the values
        of 2 and 3 for dimension X are included in the definition of the
        region. Note that any given key component must only be
        referenced once in the region.
    :ivar attribute: Attributes contains a reference to an attribute
        component (data or metadata) and provides a collection of values
        for the referenced attribute. This serves to state that for the
        key which defines the region, the attributes that are specified
        here have or do not have (depending to the include attribute of
        the value set) the values provided. It is possible to provide
        and attribute reference without specifying values, for the
        purpose of stating the attribute is absent (include = false) or
        present with an unbounded set of values. As opposed to key
        components, which are assumed to be wild carded if absent, no
        assumptions are made about the absence of an attribute. Only
        attributes which are explicitly stated to be present or absent
        from the region will be know. All unstated attributes for the
        set cannot be assumed to absent or present.
    :ivar include: The include attribute indicates that the region is to
        be included or excluded within the context in which it is
        defined. For example, if the regions is defined as part of a
        content constraint, the exclude flag would mean the data
        identified by the region is not present.
    :ivar local_attributes:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    key_value: list["ComponentValueSetType"] = field(
        default_factory=list,
        metadata={
            "name": "KeyValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    attribute: list["ComponentValueSetType"] = field(
        default_factory=list,
        metadata={
            "name": "Attribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    include: bool = field(
        default=True,
        metadata={
            "type": "Attribute",
        },
    )
    local_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##local",
        },
    )


class SimpleDataType(Enum):
    """SimpleDataType restricts BasicComponentDataType to specify the allowable
    data types for a data structure definition component.

    The XHTML representation is removed as a possible type.

    :cvar STRING: A string datatype corresponding to W3C XML Schema's
        xs:string datatype.
    :cvar ALPHA: A string datatype which only allows for the simple
        aplhabetic charcter set of A-Z, a-z.
    :cvar ALPHA_NUMERIC: A string datatype which only allows for the
        simple alphabetic character set of A-Z, a-z plus the simple
        numeric character set of 0-9.
    :cvar NUMERIC: A string datatype which only allows for the simple
        numeric character set of 0-9. This format is not treated as an
        integer, and therefore can having leading zeros.
    :cvar BIG_INTEGER: An integer datatype corresponding to W3C XML
        Schema's xs:integer datatype.
    :cvar INTEGER: An integer datatype corresponding to W3C XML Schema's
        xs:int datatype.
    :cvar LONG: A numeric datatype corresponding to W3C XML Schema's
        xs:long datatype.
    :cvar SHORT: A numeric datatype corresponding to W3C XML Schema's
        xs:short datatype.
    :cvar DECIMAL: A numeric datatype corresponding to W3C XML Schema's
        xs:decimal datatype.
    :cvar FLOAT: A numeric datatype corresponding to W3C XML Schema's
        xs:float datatype.
    :cvar DOUBLE: A numeric datatype corresponding to W3C XML Schema's
        xs:double datatype.
    :cvar BOOLEAN: A datatype corresponding to W3C XML Schema's
        xs:boolean datatype.
    :cvar URI: A datatype corresponding to W3C XML Schema's xs:anyURI
        datatype.
    :cvar COUNT: A simple incrementing Integer type. The isSequence
        facet must be set to true, and the interval facet must be set to
        "1".
    :cvar INCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the inclusive
        boundaries of a numeric range of type xs:decimal.
    :cvar EXCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the exclusive
        boundaries of a numeric range, of type xs:decimal.
    :cvar INCREMENTAL: This value indicates that the value increments
        according to the value provided in the interval facet, and has a
        true value for the isSequence facet.
    :cvar OBSERVATIONAL_TIME_PERIOD: Observational time periods are the
        superset of all time periods in SDMX. It is the union of the
        standard time periods (i.e. Gregorian time periods, the
        reporting time periods, and date time) and a time range.
    :cvar STANDARD_TIME_PERIOD: Standard time periods is a superset of
        distinct time period in SDMX. It is the union of the basic time
        periods (i.e. the Gregorian time periods and date time) and the
        reporting time periods.
    :cvar BASIC_TIME_PERIOD: BasicTimePeriod time periods is a superset
        of the Gregorian time periods and a date time.
    :cvar GREGORIAN_TIME_PERIOD: Gregorian time periods correspond to
        calendar periods and are represented in ISO-8601 formats. This
        is the union of the year, year month, and date formats.
    :cvar GREGORIAN_YEAR: A Gregorian time period corresponding to W3C
        XML Schema's xs:gYear datatype, which is based on ISO-8601.
    :cvar GREGORIAN_YEAR_MONTH: A time datatype corresponding to W3C XML
        Schema's xs:gYearMonth datatype, which is based on ISO-8601.
    :cvar GREGORIAN_DAY: A time datatype corresponding to W3C XML
        Schema's xs:date datatype, which is based on ISO-8601.
    :cvar REPORTING_TIME_PERIOD: Reporting time periods represent
        periods of a standard length within a reporting year, where to
        start of the year (defined as a month and day) must be defined
        elsewhere or it is assumed to be January 1. This is the union of
        the reporting year, semester, trimester, quarter, month, week,
        and day.
    :cvar REPORTING_YEAR: A reporting year represents a period of 1 year
        (P1Y) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingYearType.
    :cvar REPORTING_SEMESTER: A reporting semester represents a period
        of 6 months (P6M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingSemesterType.
    :cvar REPORTING_TRIMESTER: A reporting trimester represents a period
        of 4 months (P4M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingTrimesterType.
    :cvar REPORTING_QUARTER: A reporting quarter represents a period of
        3 months (P3M) from the start date of the reporting year. This
        is expressed as using the SDMX specific ReportingQuarterType.
    :cvar REPORTING_MONTH: A reporting month represents a period of 1
        month (P1M) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingMonthType.
    :cvar REPORTING_WEEK: A reporting week represents a period of 7 days
        (P7D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingWeekType.
    :cvar REPORTING_DAY: A reporting day represents a period of 1 day
        (P1D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingDayType.
    :cvar DATE_TIME: A time datatype corresponding to W3C XML Schema's
        xs:dateTime datatype.
    :cvar TIME_RANGE: TimeRange defines a time period by providing a
        distinct start (date or date time) and a duration.
    :cvar MONTH: A time datatype corresponding to W3C XML Schema's
        xs:gMonth datatype.
    :cvar MONTH_DAY: A time datatype corresponding to W3C XML Schema's
        xs:gMonthDay datatype.
    :cvar DAY: A time datatype corresponding to W3C XML Schema's xs:gDay
        datatype.
    :cvar TIME: A time datatype corresponding to W3C XML Schema's
        xs:time datatype.
    :cvar DURATION: A time datatype corresponding to W3C XML Schema's
        xs:duration datatype.
    """

    STRING = "String"
    ALPHA = "Alpha"
    ALPHA_NUMERIC = "AlphaNumeric"
    NUMERIC = "Numeric"
    BIG_INTEGER = "BigInteger"
    INTEGER = "Integer"
    LONG = "Long"
    SHORT = "Short"
    DECIMAL = "Decimal"
    FLOAT = "Float"
    DOUBLE = "Double"
    BOOLEAN = "Boolean"
    URI = "URI"
    COUNT = "Count"
    INCLUSIVE_VALUE_RANGE = "InclusiveValueRange"
    EXCLUSIVE_VALUE_RANGE = "ExclusiveValueRange"
    INCREMENTAL = "Incremental"
    OBSERVATIONAL_TIME_PERIOD = "ObservationalTimePeriod"
    STANDARD_TIME_PERIOD = "StandardTimePeriod"
    BASIC_TIME_PERIOD = "BasicTimePeriod"
    GREGORIAN_TIME_PERIOD = "GregorianTimePeriod"
    GREGORIAN_YEAR = "GregorianYear"
    GREGORIAN_YEAR_MONTH = "GregorianYearMonth"
    GREGORIAN_DAY = "GregorianDay"
    REPORTING_TIME_PERIOD = "ReportingTimePeriod"
    REPORTING_YEAR = "ReportingYear"
    REPORTING_SEMESTER = "ReportingSemester"
    REPORTING_TRIMESTER = "ReportingTrimester"
    REPORTING_QUARTER = "ReportingQuarter"
    REPORTING_MONTH = "ReportingMonth"
    REPORTING_WEEK = "ReportingWeek"
    REPORTING_DAY = "ReportingDay"
    DATE_TIME = "DateTime"
    TIME_RANGE = "TimeRange"
    MONTH = "Month"
    MONTH_DAY = "MonthDay"
    DAY = "Day"
    TIME = "Time"
    DURATION = "Duration"


class SimpleOperatorType(Enum):
    """
    SimpleOperatorType provides an enumeration of simple operators to be applied to
    any value.

    :cvar NOT_EQUAL: (!=) - value must not be equal to the value
        supplied.
    :cvar EQUAL: (=) - value must be exactly equal to the value
        supplied.
    """

    NOT_EQUAL = "notEqual"
    EQUAL = "equal"


@dataclass
class SimpleValueType1:
    """
    SimpleValueType contains a simple value for a component, and if that value is
    from a code list, the ability to indicate that child codes in a simple
    hierarchy are part of the value set of the component for the region.

    :ivar value:
    :ivar cascade_values: The cascadeValues attribute, if true,
        indicates that if the value is taken from a code all child codes
        in a simple hierarchy are understood be included in the region.
    """

    class Meta:
        name = "SimpleValueType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    cascade_values: bool = field(
        default=False,
        metadata={
            "name": "cascadeValues",
            "type": "Attribute",
        },
    )


class StructureOrUsageTypeCodelistType(Enum):
    """
    StructureOrUsageTypeCodelistType provides an enumeration all structure and
    structure usage objects.
    """

    DATAFLOW = "Dataflow"
    DATA_STRUCTURE = "DataStructure"
    METADATAFLOW = "Metadataflow"
    METADATA_STRUCTURE = "MetadataStructure"


class StructurePackageTypeCodelistType(Enum):
    """
    StructurePackageTypeCodelistType provides an enumeration of all SDMX packages
    which contain structure and structure usages.
    """

    DATASTRUCTURE = "datastructure"
    METADATASTRUCTURE = "metadatastructure"


class StructureTypeCodelistType(Enum):
    """
    StructureTypeCodelistType provides an enumeration all structure objects.
    """

    DATA_STRUCTURE = "DataStructure"
    METADATA_STRUCTURE = "MetadataStructure"


class StructureUsageTypeCodelistType(Enum):
    """
    StructureUsageTypeCodelistType provides an enumeration all structure usage
    objects.
    """

    DATAFLOW = "Dataflow"
    METADATAFLOW = "Metadataflow"


class TargetObjectTypeCodelistType(Enum):
    """
    TargetObjectTypeCodelistType provides an enumeration of all target object
    objects.
    """

    CONSTRAINT_TARGET = "ConstraintTarget"
    DATA_SET_TARGET = "DataSetTarget"
    IDENTIFIABLE_OBJECT_TARGET = "IdentifiableObjectTarget"
    DIMENSION_DESCRIPTOR_VALUES_TARGET = "DimensionDescriptorValuesTarget"
    REPORT_PERIOD_TARGET = "ReportPeriodTarget"


class TextOperatorType(Enum):
    """
    :cvar NOT_EQUAL: (!=) - value must not be equal to the value
        supplied.
    :cvar EQUAL: (=) - value must be exactly equal to the value
        supplied.
    :cvar CONTAINS: The text being searched must contain the supplied
        text.
    :cvar STARTS_WITH: The text being searched must start with the
        supplied text.
    :cvar ENDS_WITH: The text being searched must end with the supplied
        text.
    :cvar DOES_NOT_CONTAIN: The text being searched cannot contain the
        supplied text.
    :cvar DOES_NOT_START_WITH: The text being searched cannot start with
        the supplied text.
    :cvar DOES_NOT_END_WITH: The text being searched cannot end with the
        supplied text.
    """

    NOT_EQUAL = "notEqual"
    EQUAL = "equal"
    CONTAINS = "contains"
    STARTS_WITH = "startsWith"
    ENDS_WITH = "endsWith"
    DOES_NOT_CONTAIN = "doesNotContain"
    DOES_NOT_START_WITH = "doesNotStartWith"
    DOES_NOT_END_WITH = "doesNotEndWith"


@dataclass
class TextType:
    """
    TextType provides for a set of language-specific alternates to be provided for
    any human-readable constructs in the instance.

    :ivar value:
    :ivar lang: The xml:lang attribute specifies a language code for the
        text. If not supplied, the default language is assumed to be
        English.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    lang: str = field(
        default="en",
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )


class TimeDataType(Enum):
    """
    TimeDataType restricts SimpleDataType to specify the allowable data types for
    representing a time value.

    :cvar OBSERVATIONAL_TIME_PERIOD: Observational time periods are the
        superset of all time periods in SDMX. It is the union of the
        standard time periods (i.e. Gregorian time periods, the
        reporting time periods, and date time) and a time range.
    :cvar STANDARD_TIME_PERIOD: Standard time periods is a superset of
        distinct time period in SDMX. It is the union of the basic time
        periods (i.e. the Gregorian time periods and date time) and the
        reporting time periods.
    :cvar BASIC_TIME_PERIOD: BasicTimePeriod time periods is a superset
        of the Gregorian time periods and a date time.
    :cvar GREGORIAN_TIME_PERIOD: Gregorian time periods correspond to
        calendar periods and are represented in ISO-8601 formats. This
        is the union of the year, year month, and date formats.
    :cvar GREGORIAN_YEAR: A Gregorian time period corresponding to W3C
        XML Schema's xs:gYear datatype, which is based on ISO-8601.
    :cvar GREGORIAN_YEAR_MONTH: A time datatype corresponding to W3C XML
        Schema's xs:gYearMonth datatype, which is based on ISO-8601.
    :cvar GREGORIAN_DAY: A time datatype corresponding to W3C XML
        Schema's xs:date datatype, which is based on ISO-8601.
    :cvar REPORTING_TIME_PERIOD: Reporting time periods represent
        periods of a standard length within a reporting year, where to
        start of the year (defined as a month and day) must be defined
        elsewhere or it is assumed to be January 1. This is the union of
        the reporting year, semester, trimester, quarter, month, week,
        and day.
    :cvar REPORTING_YEAR: A reporting year represents a period of 1 year
        (P1Y) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingYearType.
    :cvar REPORTING_SEMESTER: A reporting semester represents a period
        of 6 months (P6M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingSemesterType.
    :cvar REPORTING_TRIMESTER: A reporting trimester represents a period
        of 4 months (P4M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingTrimesterType.
    :cvar REPORTING_QUARTER: A reporting quarter represents a period of
        3 months (P3M) from the start date of the reporting year. This
        is expressed as using the SDMX specific ReportingQuarterType.
    :cvar REPORTING_MONTH: A reporting month represents a period of 1
        month (P1M) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingMonthType.
    :cvar REPORTING_WEEK: A reporting week represents a period of 7 days
        (P7D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingWeekType.
    :cvar REPORTING_DAY: A reporting day represents a period of 1 day
        (P1D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingDayType.
    :cvar DATE_TIME: A time datatype corresponding to W3C XML Schema's
        xs:dateTime datatype.
    :cvar TIME_RANGE: TimeRange defines a time period by providing a
        distinct start (date or date time) and a duration.
    """

    OBSERVATIONAL_TIME_PERIOD = "ObservationalTimePeriod"
    STANDARD_TIME_PERIOD = "StandardTimePeriod"
    BASIC_TIME_PERIOD = "BasicTimePeriod"
    GREGORIAN_TIME_PERIOD = "GregorianTimePeriod"
    GREGORIAN_YEAR = "GregorianYear"
    GREGORIAN_YEAR_MONTH = "GregorianYearMonth"
    GREGORIAN_DAY = "GregorianDay"
    REPORTING_TIME_PERIOD = "ReportingTimePeriod"
    REPORTING_YEAR = "ReportingYear"
    REPORTING_SEMESTER = "ReportingSemester"
    REPORTING_TRIMESTER = "ReportingTrimester"
    REPORTING_QUARTER = "ReportingQuarter"
    REPORTING_MONTH = "ReportingMonth"
    REPORTING_WEEK = "ReportingWeek"
    REPORTING_DAY = "ReportingDay"
    DATE_TIME = "DateTime"
    TIME_RANGE = "TimeRange"


class TimeOperatorType(Enum):
    """
    TimeOperatorType derives from the OrderedOperatorType to remove the notEqual
    operator.

    :cvar EQUAL: (=) - value must be exactly equal to the value
        supplied.
    :cvar GREATER_THAN_OR_EQUAL: (&gt;=) - value must be greater than or
        equal to the value supplied.
    :cvar LESS_THAN_OR_EQUAL: (&lt;=) - value must be less than or equal
        to the value supplied.
    :cvar GREATER_THAN: (&gt;) - value must be greater than the value
        supplied.
    :cvar LESS_THAN: (&lt;) - value must be less than the value
        supplied.
    """

    EQUAL = "equal"
    GREATER_THAN_OR_EQUAL = "greaterThanOrEqual"
    LESS_THAN_OR_EQUAL = "lessThanOrEqual"
    GREATER_THAN = "greaterThan"
    LESS_THAN = "lessThan"


@dataclass
class TimePeriodRangeType:
    """
    TimePeriodRangeType defines a time period, and indicates whether it is
    inclusive in a range.

    :ivar value:
    :ivar is_inclusive: The isInclusive attribute, when true, indicates
        that the time period specified is included in the range.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    value: str = field(
        default="",
        metadata={
            "pattern": r".{5}A1.*",
        },
    )
    is_inclusive: bool = field(
        default=True,
        metadata={
            "name": "isInclusive",
            "type": "Attribute",
        },
    )


class UnboundedCodeType(Enum):
    """
    UnboundedCodeType provides single textual value of "unbounded", for use in
    OccurentType.

    :cvar UNBOUNDED: Object has no upper limit on occurrences.
    """

    UNBOUNDED = "unbounded"


class WildCardValueType(Enum):
    """WildCardValueType is a single value code list, used to include the '%' character - indicating that an entire field is wild carded.

    :cvar VALUE: Indicates a wild card value.
    """

    VALUE = "%"


@dataclass
class Xhtmltype:
    """XHTMLType allows for mixed content of text and XHTML tags.

    When using this type, one will have to provide a reference to the
    XHTML schema, since the processing of the tags within this type is
    strict, meaning that they are validated against the XHTML schema
    provided.
    """

    class Meta:
        name = "XHTMLType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    lang: str = field(
        default="en",
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class BaseValueType:
    """BaseValueType is a general structure which contains a reference to a data
    structure definition component and a value for that component.

    In this structure the reference to the component is optional to
    allow for usages where the actual reference might be provided in
    another context.

    :ivar id: The id attribute contains the identifier for the component
        for which a value is being provided.
    :ivar value: The value attribute contains the provided component
        value.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    value: None | object = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


class DataScopeType(Enum):
    """DataScopeType is an enumeration of the possible validity scopes for a data
    set.

    These scopes indicate the level at which the data is stated to be
    valid.

    :cvar DATA_STRUCTURE: The data set conforms simply to the data
        structure definition as it is defined, without regard to any
        constraints.
    :cvar CONSTRAINED_DATA_STRUCTURE: The data set conforms to the known
        allowable content constraints applied to the data structure
        definition.
    :cvar DATAFLOW: The data set conforms to the known allowable content
        constraints applied to the dataflow.
    :cvar PROVISION_AGREEMENT: The data set conforms to the known
        allowable content constraints applied to the provision
        agreement.
    """

    DATA_STRUCTURE = "DataStructure"
    CONSTRAINED_DATA_STRUCTURE = "ConstrainedDataStructure"
    DATAFLOW = "Dataflow"
    PROVISION_AGREEMENT = "ProvisionAgreement"


class SeverityCodeType(Enum):
    """
    :cvar ERROR: Error indicates the status message coresponds to an
        error.
    :cvar WARNING: Warning indicates that the status message corresponds
        to a warning.
    :cvar INFORMATION: Information indicates that the status message
        corresponds to an informational message.
    """

    ERROR = "Error"
    WARNING = "Warning"
    INFORMATION = "Information"


@dataclass
class AttributeSetType:
    """
    AttributeSetType defines the structure for a collection of reported metadata
    attributes.

    :ivar reported_attribute: ReportedAttribute provides the details of
        a reported attribute, including a value and/or child reported
        attributes.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic"
        )

    reported_attribute: list["ReportedAttributeType1"] = field(
        default_factory=list,
        metadata={
            "name": "ReportedAttribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
            "min_occurs": 1,
        },
    )


class AnyQueryType(Enum):
    """
    AnyQueryType is a single enumeration of the value "Any" which is meant to be
    used in union with other simple types when a query allows for any of the
    possible values.
    """

    ANY = "Any"


class ConstraintTypeCodelistType2(Enum):
    """
    ConstraintTypeCodelistType defines a list of types for a constraint for the
    purpose of querying.
    """

    CONSTRAINT = "Constraint"
    ATTACHMENT_CONSTRAINT = "AttachmentConstraint"
    CONTENT_CONSTRAINT = "ContentConstraint"


class DataReturnDetailType(Enum):
    """
    DataReturnDetailType contains a set of enumerations that indicate how much
    detail should be returned for a data set.

    :cvar FULL: The entire data set (including all data, documentation,
        and annotations) will be returned.
    :cvar DATA_ONLY: Only the observed values and their keys will be
        returned. Annotations and documentation (i.e. Attributes) and
        therefore Groups, will be excluded.
    :cvar SERIES_KEY_ONLY: Only the series elements and the values for
        the dimensions will be returned. Annotations, documentation, and
        observations will be excluded.
    :cvar NO_DATA: Returns all documentation at the DataSet, Group, and
        Series level without any Observations (therefore, Observation
        level documentation is not returned). Annotations are not
        returned.
    """

    FULL = "Full"
    DATA_ONLY = "DataOnly"
    SERIES_KEY_ONLY = "SeriesKeyOnly"
    NO_DATA = "NoData"


class InputOutputTypeCodeType(Enum):
    """
    InputOutputTypeCodeType enumerates the role an object plays in a process step.

    :cvar INPUT: Input - referenced object is an input to the process
        step.
    :cvar OUTPUT: Output - referenced object is an output to the process
        step.
    :cvar ANY: Any - referenced object is either an input or an output
        to the process step.
    """

    INPUT = "Input"
    OUTPUT = "Output"
    ANY = "Any"


class MaintainableReturnDetailType(Enum):
    """MaintainableReturnDetailType contains a sub set of the enumerations defined
    in the ReturnDetailType.

    Enumerations relating specifically to item schemes are not included

    :cvar STUB: Only the identification information and name should be
        returned.
    :cvar COMPLETE_STUB: Identification information, name, description,
        and annotations should be returned.
    :cvar FULL: The entire detail of the object should be returned.
    """

    STUB = "Stub"
    COMPLETE_STUB = "CompleteStub"
    FULL = "Full"


class MappedObjectTypeCodelistType(Enum):
    """
    MappedObjectTypeCodelistType is a restriction of the
    MaintainableTypeCodelistType which contains only the object types which can be
    mapped in a structure set.
    """

    AGENCY_SCHEME = "AgencyScheme"
    CATEGORY_SCHEME = "CategoryScheme"
    CODELIST = "Codelist"
    CONCEPT_SCHEME = "ConceptScheme"
    DATAFLOW = "Dataflow"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    DATA_STRUCTURE = "DataStructure"
    HIERARCHICAL_CODELIST = "HierarchicalCodelist"
    METADATAFLOW = "Metadataflow"
    METADATA_STRUCTURE = "MetadataStructure"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"
    REPORTING_TAXONOMY = "ReportingTaxonomy"


class ObservationActionCodeType(Enum):
    """
    ObservationActionCodeType enumerates the type of observations to be returned.

    :cvar ACTIVE: Active observations, regardless of when they were
        added or updated will be returned.
    :cvar ADDED: Only newly added observations will be returned.
    :cvar UPDATED: Only updated observations will be returned.
    :cvar DELETED: Only deleted observations will be returned.
    """

    ACTIVE = "Active"
    ADDED = "Added"
    UPDATED = "Updated"
    DELETED = "Deleted"


class OrganisationSchemeTypeCodeType(Enum):
    """
    OrganisationSchemeTypeCodeType enumerates the possible types of organisation
    schemes that can be queried for.
    """

    ORGANISATION_SCHEME = "OrganisationScheme"
    AGENCY_SCHEME = "AgencyScheme"
    DATA_CONSUMER_SCHEME = "DataConsumerScheme"
    DATA_PROVIDER_SCHEME = "DataProviderScheme"
    ORGANISATION_UNIT_SCHEME = "OrganisationUnitScheme"


@dataclass
class ReturnDetailsBaseType:
    """
    ReturnDetailsBaseType is an abstract type that forms the basis for any query
    return details.

    :ivar default_limit: The defaultLimit attribute is the suggested
        maximum response size in kilobytes.
    :ivar detail: &gt;The detail attribute is used to indicate how much
        of the matched object should be returned.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    default_limit: None | int = field(
        default=None,
        metadata={
            "name": "defaultLimit",
            "type": "Attribute",
        },
    )
    detail: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class SourceTargetType(Enum):
    """
    SourceTargetType is an enumeration to indicate whether an object is the source,
    target, or either of the two options.
    """

    ANY = "Any"
    SOURCE = "Source"
    TARGET = "Target"


class StructureReturnDetailType(Enum):
    """
    StructureReturnDetailType contains a set of enumerations that indicate how much
    detail should be returned for an object.

    :cvar STUB: Only the identification information and name should be
        returned.
    :cvar COMPLETE_STUB: Identification information, name, description,
        and annotations should be returned.
    :cvar FULL: The entire detail of the object should be returned.
    :cvar MATCHED_ITEMS: For an item scheme, only the items matching the
        item where parameters will be returned. In the case that items
        are hierarchical, the entire hierarchy leading to the matched
        item will have to be returned.
    :cvar CASCADED_MATCHED_ITEMS: For an item scheme, only the items
        matching the item where parameters, and their hierarchical child
        items will be returned. In the case that items are hierarchical,
        the entire hierarchy leading to the matched item will have to be
        returned.
    """

    STUB = "Stub"
    COMPLETE_STUB = "CompleteStub"
    FULL = "Full"
    MATCHED_ITEMS = "MatchedItems"
    CASCADED_MATCHED_ITEMS = "CascadedMatchedItems"


@dataclass
class NotificationUrltype:
    """NotificationURLType describes the structure of an http or email address.

    The content holds the addresses while an attribute indicates whether
    or not is expects the contents in a SOAP message.

    :ivar value:
    :ivar is_soap: The isSOAP attribute, if true, indicates the provided
        URL expects the notification to be sent in a SOAP message.
    """

    class Meta:
        name = "NotificationURLType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    is_soap: bool = field(
        default=False,
        metadata={
            "name": "isSOAP",
            "type": "Attribute",
        },
    )


class QueryTypeType(Enum):
    """
    QueryType provides an enumeration of values which specify the objects in the
    result-set for a registry query.

    :cvar DATA_SETS: Only references data sets should be returned.
    :cvar METADATA_SETS: Only references to metadata sets should be
        returned.
    :cvar ALL_SETS: References to both data sets and metadata sets
        should be returned.
    """

    DATA_SETS = "DataSets"
    METADATA_SETS = "MetadataSets"
    ALL_SETS = "AllSets"


@dataclass
class SimpleDataSourceType:
    """SimpleDataSourceType describes a simple data source.

    The URL of the data is contained in the content.

    :ivar value:
    :ivar type_value: TYPE is a fixed attribute that is used to ensure
        only one simple data source may be provided, when it is
        referenced in a uniqueness constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: str = field(
        init=False,
        default="SIMPLE",
        metadata={
            "name": "TYPE",
            "type": "Attribute",
        },
    )


class StatusType(Enum):
    """
    StatusType provides an enumeration of values that detail the status of queries
    or requests.

    :cvar SUCCESS: Query or request successful.
    :cvar WARNING: Query or request successful, but with warnings.
    :cvar FAILURE: Query or request not successful.
    """

    SUCCESS = "Success"
    WARNING = "Warning"
    FAILURE = "Failure"


@dataclass
class ValidityPeriodType:
    """
    ValidityPeriodType specifies inclusive start and end-dates for the subscription
    period.

    :ivar start_date: StartDate is an inclusive start date for the
        subscription.
    :ivar end_date: EndDate is an inclusive end date for the
        subscription.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    start_date: None | XmlDate = field(
        default=None,
        metadata={
            "name": "StartDate",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    end_date: None | XmlDate = field(
        default=None,
        metadata={
            "name": "EndDate",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


class CodeDataType(Enum):
    """CodeDataType is a restriction of the basic data types that are applicable to
    codes.

    Although some of the higher level time period formats are
    perimitted, it should be noted that any value which contains time
    (which includes a time zone offset) is not allowable as a code
    identifier.

    :cvar STRING: A string datatype corresponding to W3C XML Schema's
        xs:string datatype.
    :cvar ALPHA: A string datatype which only allows for the simple
        aplhabetic charcter set of A-Z, a-z.
    :cvar ALPHA_NUMERIC: A string datatype which only allows for the
        simple alphabetic character set of A-Z, a-z plus the simple
        numeric character set of 0-9.
    :cvar NUMERIC: A string datatype which only allows for the simple
        numeric character set of 0-9. This format is not treated as an
        integer, and therefore can having leading zeros.
    :cvar BIG_INTEGER: An integer datatype corresponding to W3C XML
        Schema's xs:integer datatype.
    :cvar INTEGER: An integer datatype corresponding to W3C XML Schema's
        xs:int datatype.
    :cvar LONG: A numeric datatype corresponding to W3C XML Schema's
        xs:long datatype.
    :cvar SHORT: A numeric datatype corresponding to W3C XML Schema's
        xs:short datatype.
    :cvar BOOLEAN: A datatype corresponding to W3C XML Schema's
        xs:boolean datatype.
    :cvar URI: A datatype corresponding to W3C XML Schema's xs:anyURI
        datatype.
    :cvar COUNT: A simple incrementing Integer type. The isSequence
        facet must be set to true, and the interval facet must be set to
        "1".
    :cvar INCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the inclusive
        boundaries of a numeric range of type xs:decimal.
    :cvar EXCLUSIVE_VALUE_RANGE: This value indicates that the
        startValue and endValue attributes provide the exclusive
        boundaries of a numeric range, of type xs:decimal.
    :cvar INCREMENTAL: This value indicates that the value increments
        according to the value provided in the interval facet, and has a
        true value for the isSequence facet.
    :cvar OBSERVATIONAL_TIME_PERIOD: Observational time periods are the
        superset of all time periods in SDMX. It is the union of the
        standard time periods (i.e. Gregorian time periods, the
        reporting time periods, and date time) and a time range.
    :cvar STANDARD_TIME_PERIOD: Standard time periods is a superset of
        distinct time period in SDMX. It is the union of the basic time
        periods (i.e. the Gregorian time periods and date time) and the
        reporting time periods.
    :cvar BASIC_TIME_PERIOD: BasicTimePeriod time periods is a superset
        of the Gregorian time periods and a date time.
    :cvar GREGORIAN_TIME_PERIOD: Gregorian time periods correspond to
        calendar periods and are represented in ISO-8601 formats. This
        is the union of the year, year month, and date formats.
    :cvar GREGORIAN_YEAR: A Gregorian time period corresponding to W3C
        XML Schema's xs:gYear datatype, which is based on ISO-8601.
    :cvar GREGORIAN_YEAR_MONTH: A time datatype corresponding to W3C XML
        Schema's xs:gYearMonth datatype, which is based on ISO-8601.
    :cvar GREGORIAN_DAY: A time datatype corresponding to W3C XML
        Schema's xs:date datatype, which is based on ISO-8601.
    :cvar REPORTING_TIME_PERIOD: Reporting time periods represent
        periods of a standard length within a reporting year, where to
        start of the year (defined as a month and day) must be defined
        elsewhere or it is assumed to be January 1. This is the union of
        the reporting year, semester, trimester, quarter, month, week,
        and day.
    :cvar REPORTING_YEAR: A reporting year represents a period of 1 year
        (P1Y) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingYearType.
    :cvar REPORTING_SEMESTER: A reporting semester represents a period
        of 6 months (P6M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingSemesterType.
    :cvar REPORTING_TRIMESTER: A reporting trimester represents a period
        of 4 months (P4M) from the start date of the reporting year.
        This is expressed as using the SDMX specific
        ReportingTrimesterType.
    :cvar REPORTING_QUARTER: A reporting quarter represents a period of
        3 months (P3M) from the start date of the reporting year. This
        is expressed as using the SDMX specific ReportingQuarterType.
    :cvar REPORTING_MONTH: A reporting month represents a period of 1
        month (P1M) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingMonthType.
    :cvar REPORTING_WEEK: A reporting week represents a period of 7 days
        (P7D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingWeekType.
    :cvar REPORTING_DAY: A reporting day represents a period of 1 day
        (P1D) from the start date of the reporting year. This is
        expressed as using the SDMX specific ReportingDayType.
    :cvar MONTH: A time datatype corresponding to W3C XML Schema's
        xs:gMonth datatype.
    :cvar MONTH_DAY: A time datatype corresponding to W3C XML Schema's
        xs:gMonthDay datatype.
    :cvar DAY: A time datatype corresponding to W3C XML Schema's xs:gDay
        datatype.
    :cvar DURATION: A time datatype corresponding to W3C XML Schema's
        xs:duration datatype.
    """

    STRING = "String"
    ALPHA = "Alpha"
    ALPHA_NUMERIC = "AlphaNumeric"
    NUMERIC = "Numeric"
    BIG_INTEGER = "BigInteger"
    INTEGER = "Integer"
    LONG = "Long"
    SHORT = "Short"
    BOOLEAN = "Boolean"
    URI = "URI"
    COUNT = "Count"
    INCLUSIVE_VALUE_RANGE = "InclusiveValueRange"
    EXCLUSIVE_VALUE_RANGE = "ExclusiveValueRange"
    INCREMENTAL = "Incremental"
    OBSERVATIONAL_TIME_PERIOD = "ObservationalTimePeriod"
    STANDARD_TIME_PERIOD = "StandardTimePeriod"
    BASIC_TIME_PERIOD = "BasicTimePeriod"
    GREGORIAN_TIME_PERIOD = "GregorianTimePeriod"
    GREGORIAN_YEAR = "GregorianYear"
    GREGORIAN_YEAR_MONTH = "GregorianYearMonth"
    GREGORIAN_DAY = "GregorianDay"
    REPORTING_TIME_PERIOD = "ReportingTimePeriod"
    REPORTING_YEAR = "ReportingYear"
    REPORTING_SEMESTER = "ReportingSemester"
    REPORTING_TRIMESTER = "ReportingTrimester"
    REPORTING_QUARTER = "ReportingQuarter"
    REPORTING_MONTH = "ReportingMonth"
    REPORTING_WEEK = "ReportingWeek"
    REPORTING_DAY = "ReportingDay"
    MONTH = "Month"
    MONTH_DAY = "MonthDay"
    DAY = "Day"
    DURATION = "Duration"


@dataclass
class IsoconceptReferenceType:
    """
    ISOConceptReferenceType provides a reference to and ISO 11179 concept.
    """

    class Meta:
        name = "ISOConceptReferenceType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_agency: None | str = field(
        default=None,
        metadata={
            "name": "ConceptAgency",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    concept_scheme_id: None | str = field(
        default=None,
        metadata={
            "name": "ConceptSchemeID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    concept_id: None | str = field(
        default=None,
        metadata={
            "name": "ConceptID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class ReleaseCalendarType:
    """ReleaseCalendarType describes information about the timing of releases of
    the constrained data.

    All of these values use the standard "P7D" - style format.

    :ivar periodicity: Periodicity is the period between releases of the
        data set.
    :ivar offset: Offset is the interval between January first and the
        first release of data within the year.
    :ivar tolerance: Tolerance is the period after which the release of
        data may be deemed late.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    periodicity: None | str = field(
        default=None,
        metadata={
            "name": "Periodicity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    offset: None | str = field(
        default=None,
        metadata={
            "name": "Offset",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    tolerance: None | str = field(
        default=None,
        metadata={
            "name": "Tolerance",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


class SimpleCodeDataType(Enum):
    """SimpleCodeDataType restricts SimpleDataType to specify the allowable data
    types for a simple code.

    The possible values are simply Alpha, AlphaNumeric, or Numeric.

    :cvar ALPHA: A string datatype which only allows for the simple
        aplhabetic charcter set of A-Z, a-z.
    :cvar ALPHA_NUMERIC: A string datatype which only allows for the
        simple alphabetic character set of A-Z, a-z plus the simple
        numeric character set of 0-9.
    :cvar NUMERIC: A string datatype which only allows for the simple
        numeric character set of 0-9. This format is not treated as an
        integer, and therefore can having leading zeros.
    """

    ALPHA = "Alpha"
    ALPHA_NUMERIC = "AlphaNumeric"
    NUMERIC = "Numeric"


class TargetObjectDataType(Enum):
    """
    TargetObjectDataType restricts DataType to specify the allowable data types for
    representing a target object value.

    :cvar KEY_VALUES: This value indicates that the content of the
        component will be data key (a set of dimension references and
        values for the dimensions).
    :cvar IDENTIFIABLE_REFERENCE: This value indicates that the content
        of the component will be complete reference (either URN or full
        set of reference fields) to an Identifiable object in the SDMX
        Information Model.
    :cvar DATA_SET_REFERENCE: This value indicates that the content of
        the component will be reference to a data provider, which is
        actually a formal reference to a data provider and a data set
        identifier value.
    :cvar ATTACHMENT_CONSTRAINT_REFERENCE: This value indicates that the
        content of the component will be reference to an attachment
        constraint, which is actually a combination of a collection of
        full or partial key values and a reference to a data set or data
        structure, usage, or provision agreement.
    """

    KEY_VALUES = "KeyValues"
    IDENTIFIABLE_REFERENCE = "IdentifiableReference"
    DATA_SET_REFERENCE = "DataSetReference"
    ATTACHMENT_CONSTRAINT_REFERENCE = "AttachmentConstraintReference"


class ToValueTypeType(Enum):
    """
    ToValueTypeType provides an enumeration of available text-equivalents for
    translation of coded values into textual formats.

    :cvar VALUE: Code or other tokenized value, as provided in the
        representation scheme.
    :cvar NAME: The human-readable name of the Value, as provided in the
        representation scheme.
    :cvar DESCRIPTION: The human-readable description of the Value, as
        provided in the representation scheme.
    """

    VALUE = "Value"
    NAME = "Name"
    DESCRIPTION = "Description"


class UsageStatusType(Enum):
    """
    UsageStatusType provides a list of enumerated types for indicating whether
    reporting a given attribute is mandatory or conditional.

    :cvar MANDATORY: Reporting the associated attribute is mandatory - a
        value must be supplied.
    :cvar CONDITIONAL: Reporting the associated attribute is not
        mandatory - a value may  be supplied, but is not required.
    """

    MANDATORY = "Mandatory"
    CONDITIONAL = "Conditional"


@dataclass
class ValueMappingType:
    """
    ValueMappingType specifies the relationship between two values as a source and
    target.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    target: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class AgencyScheme(EmptyType):
    """
    AgencyScheme is an empty element that denotes an agency scheme object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Agency1(EmptyType):
    """
    Agency is an empty element that denotes an agency object.
    """

    class Meta:
        name = "Agency"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AnnotationType:
    """AnnotationType provides for non-documentation notes and annotations to be
    embedded in data and structure messages.

    It provides optional fields for providing a title, a type
    description, a URI, and the text of the annotation.

    :ivar annotation_title: AnnotationTitle provides a title for the
        annotation.
    :ivar annotation_type: AnnotationType is used to distinguish between
        annotations designed to support various uses. The types are not
        enumerated, as these can be specified by the user or creator of
        the annotations. The definitions and use of annotation types
        should be documented by their creator.
    :ivar annotation_url: AnnotationURL is a URI - typically a URL -
        which points to an external resource which may contain or
        supplement the annotation. If a specific behavior is desired, an
        annotation type should be defined which specifies the use of
        this field more exactly.
    :ivar annotation_text: AnnotationText holds a language-specific
        string containing the text of the annotation.
    :ivar id: The id attribute provides a non-standard identification of
        an annotation. It can be used to disambiguate annotations.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    annotation_title: None | str = field(
        default=None,
        metadata={
            "name": "AnnotationTitle",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    annotation_type: None | str = field(
        default=None,
        metadata={
            "name": "AnnotationType",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    annotation_url: None | str = field(
        default=None,
        metadata={
            "name": "AnnotationURL",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    annotation_text: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "AnnotationText",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AnyType(EmptyType):
    """
    Any is an empty element that denotes an object of any type.
    """

    class Meta:
        name = "Any"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AttachmentConstraint(EmptyType):
    """
    AttachmentConstraint is an empty element that denotes an attachment constraint
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AttributeDescriptor(EmptyType):
    """
    AttributeDescriptor is an empty element that denotes an attribute descriptor
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Attribute1(EmptyType):
    """
    Attribute is an empty element that denotes an attribute object.
    """

    class Meta:
        name = "Attribute"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Categorisation(EmptyType):
    """
    Categorisation is an empty element that denotes a categorisation object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategoryScheme(EmptyType):
    """
    CategoryScheme is an empty element that denotes a category scheme object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategorySchemeMap(EmptyType):
    """
    CategorySchemeMap is an empty element that denotes a category scheme map
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Category1(EmptyType):
    """
    Category is an empty element that denotes a category object.
    """

    class Meta:
        name = "Category"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CodeMap1(EmptyType):
    """
    CodeMap is an empty element that denotes a code map object.
    """

    class Meta:
        name = "CodeMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Code1(EmptyType):
    """
    Code is an empty element that denotes a code object.
    """

    class Meta:
        name = "Code"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Codelist(EmptyType):
    """
    Codelist is an empty element that denotes a code list object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CodelistMap(EmptyType):
    """
    CodelistMap is an empty element that denotes a code list map object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ComponentMap(EmptyType):
    """
    ComponentMap is an empty element that denotes a component map object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptMap1(EmptyType):
    """
    ConceptMap is an empty element that denotes a concept map object.
    """

    class Meta:
        name = "ConceptMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptScheme(EmptyType):
    """
    ConceptScheme is an empty element that denotes a concept scheme object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptSchemeMap(EmptyType):
    """
    ConceptSchemeMap is an empty element that denotes a concept scheme map object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Concept1(EmptyType):
    """
    Concept is an empty element that denotes a concept object.
    """

    class Meta:
        name = "Concept"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConstraintTarget(EmptyType):
    """
    ConstraintTarget is an empty element that denotes a constraint target object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ContentConstraint(EmptyType):
    """
    ContentConstraint is an empty element that denotes a content constraint object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CubeRegionType(RegionType):
    """CubeRegionType defines the structure of a data cube region.

    This is based on the abstract RegionType and simply refines the key
    and attribute values to conform with what is applicable for
    dimensions and attributes, respectively. See the documentation of
    the base type for more details on how a region is defined.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    local_attributes: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataConsumerScheme(EmptyType):
    """
    DataConsumerScheme is an empty element that denotes a data consumer scheme
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataConsumer1(EmptyType):
    """
    DataConsumer is an empty element that denotes a data consumer object.
    """

    class Meta:
        name = "DataConsumer"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataProviderScheme(EmptyType):
    """
    DataProviderScheme is an empty element that denotes a data provider scheme
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataProvider1(EmptyType):
    """
    DataProvider is an empty element that denotes a data provider object.
    """

    class Meta:
        name = "DataProvider"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataSetTarget1(EmptyType):
    """
    DataSetTarget is an empty element that denotes a data set target object.
    """

    class Meta:
        name = "DataSetTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataStructure(EmptyType):
    """
    DataStructure is an empty element that denotes a data structure definition
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Dataflow(EmptyType):
    """
    Dataflow is an empty element that denotes a data flow object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Description(TextType):
    """
    Description is a reusable element, used for providing a longer human-readable
    description of an object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DimensionDescriptor(EmptyType):
    """
    DimensionDescriptor is an empty element that denotes a dimension descriptor
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DimensionDescriptorValuesTarget(EmptyType):
    """
    DimensionDescriptorValuesTarget is an empty element that denotes a dimension
    descriptor values target object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Dimension1(EmptyType):
    """
    Dimension is an empty element that denotes a dimension object.
    """

    class Meta:
        name = "Dimension"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DistinctKeyType(RegionType):
    """DistinctKeyType is an abstract base type which is a special type of region
    that only defines a distinct region of data or metadata.

    For each component defined in the region, only a single values is
    provided. However, the same rules that apply to the general region
    about unstated components being wild carded apply here as well.
    Thus, this type can define a distinct full or partial key for data
    or metadata.

    :ivar attribute: Attributes contains a reference to an attribute
        component (data or metadata) and provides a collection of values
        for the referenced attribute. This serves to state that for the
        key which defines the region, the attributes that are specified
        here have or do not have (depending to the include attribute of
        the value set) the values provided. It is possible to provide
        and attribute reference without specifying values, for the
        purpose of stating the attribute is absent (include = false) or
        present with an unbounded set of values. As opposed to key
        components, which are assumed to be wild carded if absent, no
        assumptions are made about the absence of an attribute. Only
        attributes which are explicitly stated to be present or absent
        from the region will be know. All unstated attributes for the
        set cannot be assumed to absent or present.
    :ivar key_value:
    :ivar include: The include attribute has a fixed value of true for a
        distinct key, since such a key is always assumed to identify
        existing data or metadata.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_value: list["DinstinctKeyValueType"] = field(
        default_factory=list,
        metadata={
            "name": "KeyValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )
    include: bool = field(
        init=False,
        default=True,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GroupDimensionDescriptor(EmptyType):
    """
    GroupDimensionDescriptor is an empty element that denotes a group dimension
    descriptor object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HierarchicalCode(EmptyType):
    """
    HierarchicalCode is an empty element that denotes a hierarchical code object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HierarchicalCodelist(EmptyType):
    """
    HierarchicalCodelist is an empty element that denotes a hierarchical codelist
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Hierarchy(EmptyType):
    """
    Hierarchy is an empty element that denotes a hierarchy within a hiearcharchical
    codelist.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HybridCodeMap(EmptyType):
    """
    HybridCodeMap is an empty element that denotes a hybrid code map object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HybridCodelistMap(EmptyType):
    """
    HybridCodelistMap is an empty element that denotes a hybrid codelist map
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class IdentifiableObjectTarget1(EmptyType):
    """
    IdentifiableObjectTarget is an empty element that denotes an identifiable
    object target object.
    """

    class Meta:
        name = "IdentifiableObjectTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Level(EmptyType):
    """
    Level is an empty element that denotes a level object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MeasureDescriptor(EmptyType):
    """
    MeasureDescriptor is an empty element that denotes a measure descriptor object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MeasureDimension1(EmptyType):
    """
    MeasureDimension is an empty element that denotes a measure dimension object.
    """

    class Meta:
        name = "MeasureDimension"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataAttribute1(EmptyType):
    """
    MetadataAttribute is an empty element that denotes a metadata attribute object.
    """

    class Meta:
        name = "MetadataAttribute"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataSet(EmptyType):
    """
    MetadataSet is an empty element that denotes a metadata set object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataStructure(EmptyType):
    """
    MetadataStructure is an empty element that denotes a metadata structure
    definition object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataTargetRegionType(RegionType):
    """MetadataTargetRegionType defines the structure of a metadata target region.

    A metadata target region must define the report structure and the
    metadata target from that structure on which the region is based.
    This type is based on the abstract RegionType and simply refines the
    key and attribute values to conform with what is applicable for
    target objects and metadata attributes, respectively. See the
    documentation of the base type for more details on how a region is
    defined.

    :ivar local_attributes:
    :ivar report: The report attribute is required and holds the
        identifier of the report structure which the reference metadata
        being defined by this region is based on.
    :ivar metadata_target: The metadataTarget attribute is required and
        identifies the metadata target for the report structure which
        this region is based upon. Note that a report structure can have
        multiple metadata targets, so to properly determine the object
        or objects for which the region applies, the proper metadata
        target must be identified.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    local_attributes: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    metadata_target: None | str = field(
        default=None,
        metadata={
            "name": "metadataTarget",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class MetadataTarget1(EmptyType):
    """
    MetadataTarget is an empty element that denotes a metadata target object.
    """

    class Meta:
        name = "MetadataTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Metadataflow(EmptyType):
    """
    Metadataflow is an empty element that denotes a metadata flow object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Name(TextType):
    """
    Name is a reusable element, used for providing a human-readable name for an
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationMap1(EmptyType):
    """
    OrganisationMap is an empty element that denotes an organisation map object.
    """

    class Meta:
        name = "OrganisationMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationSchemeMap(EmptyType):
    """
    OrganisationSchemeMap is an empty element that denotes an organisation scheme
    map object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationUnitScheme(EmptyType):
    """
    OrganisationUnitScheme is an empty element that denotes an organisation unit
    scheme object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationUnit1(EmptyType):
    """
    OrganisationUnit is an empty element that denotes an organisation unit object.
    """

    class Meta:
        name = "OrganisationUnit"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class PrimaryMeasure1(EmptyType):
    """
    PrimaryMeasure is an empty element that denotes a primary measure object.
    """

    class Meta:
        name = "PrimaryMeasure"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Process(EmptyType):
    """
    Process is an empty element that denotes a process object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ProcessStep(EmptyType):
    """
    ProcessStep is an empty element that denotes a process step object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ProvisionAgreement(EmptyType):
    """
    ProvisionAgreement is an empty element that denotes a provision agreement
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class RefBaseType:
    """RefBaseType is an abstract base type the defines the basis for any set of
    complete reference fields.

    This should be refined by derived types so that only the necessary
    fields are available and required as necessary. This can be used for
    both full and local references (when some of the values are implied
    from another context). A local reference is indicated with the local
    attribute. The values in this type correspond directly to the
    components of the URN structure, and thus can be used to compose a
    URN when the local attribute value is false. As this is the case,
    any reference components which are not part of the URN structure
    should not be present in the derived types.

    :ivar agency_id: The agencyID attribute identifies the maintenance
        agency for the object being referenced (agency-id in the URN
        structure). This is optional to allow for local references
        (where the other reference fields are inferred from another
        context), but all complete references will require this.
    :ivar maintainable_parent_id: The maintainableParentID attribute
        identifies the maintainable object in which the referenced
        object is defined, if applicable (maintainable-parent-object-id
        in the URN structure). This is only used in references where the
        referenced object is not itself maintainable.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute identifies the version of the maintainable object in
        which the referenced object is defined (maintainable-parent-
        object-version in the URN structure). This is only used in
        references where the referenced object is not itself
        maintainable. This should only be used when the
        maintainableParentID is present. If this is available, a default
        of 1.0 will always apply.
    :ivar container_id: The containerID attribute identifies the object
        within a maintainable object in which the referenced object is
        defined (container-object-id in the URN structure). This is only
        used in references where the referenced object is not contained
        directly within a maintainable object (e.g. a Component within a
        ComponentList, within a maintainable Structure). If the
        container has a fixed identifier, this attribute will not be
        present.
    :ivar id: The id attribute identifies the object being referenced,
        and is therefore always required.
    :ivar version: The version attribute identifies the version of the
        object being reference, if applicable. If this is available, a
        default value of 1.0 will always apply.
    :ivar local: The local attribute indicates whether this set of
        reference fields is meant for local referencing, in which case
        some of the reference fields will be implied from another
        context. Concrete instances of this class will always fix this
        value to either true or false, depending on their intended
        usage. If the value is fixed to true, then the complete set of
        reference fields will be required and a URN can be fully
        composed from the values.
    :ivar class_value: The class attribute indicates the class name of
        the object being referenced. This attribute allows any reference
        to be processed generically from this definition. References
        derived from this should fix the value of this attribute to
        indicate the type of object that is being referenced, or in the
        case that a reference which allows specific types of fields, the
        representation should be sub-setted to the appropriate values.
    :ivar package: The package attribute indicates the package name for
        the object being referenced. This attribute allows any reference
        to be processed generically from this definition. References
        derived from this should fix the value of this attribute to
        indicate the type of object that is being referenced, or in the
        case that a reference which allows specific types of fields, the
        representation should be sub-setted to the appropriate values.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+(\.[A-Za-z0-9_@$\-]+)*",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+(\.[A-Za-z0-9_@$\-]+)*",
        },
    )
    version: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: None | bool = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: None | ObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: None | PackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReportPeriodTarget1(EmptyType):
    """
    ReportPeriodTarget is an empty element that denotes a report period target
    object.
    """

    class Meta:
        name = "ReportPeriodTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportStructure1(EmptyType):
    """
    ReportStructure is an empty element that denotes a report structure object.
    """

    class Meta:
        name = "ReportStructure"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportingCategoryMap1(EmptyType):
    """
    ReportingCategoryMap is an empty element that denotes a reporting category map
    object.
    """

    class Meta:
        name = "ReportingCategoryMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportingCategory1(EmptyType):
    """
    ReportingCategory is an empty element that denotes a reporting category object.
    """

    class Meta:
        name = "ReportingCategory"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportingTaxonomy(EmptyType):
    """
    ReportingTaxonomy is an empty element that denotes a reporting taxonomy object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportingTaxonomyMap(EmptyType):
    """
    ReportingTaxonomyMap is an empty element that denotes a reporting taxonomy map
    object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class SimpleKeyValueType(SimpleValueType1):
    """
    SimpleKeyValueType derives from the SimpleValueType, but does not allow for the
    cascading of value in the hierarchy, as keys are meant to describe a distinct
    full or partial key.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    cascade_values: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class StatusMessageType1:
    """StatusMessageType describes the structure of an error or warning message.

    A message contains the text of the message, as well as an optional
    language indicator and an optional code.

    :ivar text: Text contains the text of the message, in parallel
        language values.
    :ivar code: The code attribute holds an optional code identifying
        the underlying error that generated the message. This should be
        used if parallel language descriptions of the error are
        supplied, to distinguish which of the multiple error messages
        are for the same underlying error.
    """

    class Meta:
        name = "StatusMessageType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    text: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )
    code: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureMap(EmptyType):
    """
    StructureMap is an empty element that denotes a structure map object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureSet(EmptyType):
    """
    StructureSet is an empty element that denotes a structure set object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructuredText(Xhtmltype):
    """
    StructuredText is a reusable element, used for providing a language specific
    text value structured as XHTML.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class Text(TextType):
    """
    Text is a reusable element, used for providing a language specific text value
    for general purposes (i.e. not for a name or description).
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class TimeDimension1(EmptyType):
    """
    TimeDimension is an empty element that denotes a time dimension object.
    """

    class Meta:
        name = "TimeDimension"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class TimeRangeValueType:
    """TimeRangeValueType allows a time period value to be expressed as a range.

    It can be expressed as the period before a period, after a period,
    or between two periods. Each of these properties can specify their
    inclusion in regards to the range.

    :ivar before_period: BeforePeriod is the period before which the
        period is meant to cover. This date may be inclusive or
        exclusive in the range.
    :ivar after_period: AfterPeriod is the period after which the period
        is meant to cover. This date may be inclusive or exclusive in
        the range.
    :ivar start_period: StartPeriod is the start date or the range that
        the queried date must occur within. This date may be inclusive
        or exclusive in the range.
    :ivar end_period: EndPeriod is the end period of the range. This
        date may be inclusive or exclusive in the range.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    before_period: None | TimePeriodRangeType = field(
        default=None,
        metadata={
            "name": "BeforePeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    after_period: None | TimePeriodRangeType = field(
        default=None,
        metadata={
            "name": "AfterPeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    start_period: None | TimePeriodRangeType = field(
        default=None,
        metadata={
            "name": "StartPeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    end_period: None | TimePeriodRangeType = field(
        default=None,
        metadata={
            "name": "EndPeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class Transition(EmptyType):
    """
    Transition is an empty element that denotes a transition object.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ComponentValueType(BaseValueType):
    """ComponentValueType is a derivation of the BaseValueType which requires that
    the component reference be provided.

    This is used when the identification of the component cannot be
    inferred from another context.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    value: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ObsValueType(BaseValueType):
    """ObsValueType is a derivation of the BaseValueType which is used to provide
    an observation value.

    Since an observation value is always associated with the data
    structure definition primary measure, and the identifier for the
    primary measure is fixed, the component reference for this structure
    is fixed. Note that this means that it is not necessary to provide a
    value in an instance as the fixed value will be provided in the post
    validation information set.

    :ivar id: The id attribute contains a fixed reference to the primary
        measure component of the data structure definition.
    :ivar value:
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    id: str = field(
        init=False,
        default="OBS_VALUE",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    value: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class TimeValueType(BaseValueType):
    """TimeValueType is a derivation of the BaseValueType which is used to provide
    a value for the time dimension.

    Since the identifier for the time dimension is fixed, the component
    reference for this structure is fixed. Note that this means that it
    is not necessary to provide a value in an instance as the fixed
    value will be provided in the post validation information set.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    id: str = field(
        init=False,
        default="TIME_PERIOD",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    value: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r".{5}A1.*",
        },
    )


@dataclass
class DataReturnDetailsBaseType(ReturnDetailsBaseType):
    """
    DataReturnDetailsBaseType is an abstract base type which forms the basis of the
    DataReturnDetailsType.

    :ivar detail: The detail attribute is used to indicate whether the
        response to the query should return the full details of matched
        data sets, or just a subset of the information should be
        returned. A value of "Full" indicates that the complete data set
        (including data and documentation) will be returned. A value of
        "DataOnly" indicates that only the observation values and keys
        should be returned. A value of "SeriesKeyOnly" indicates that
        only the Series elements and their keys (i.e. Dimension values)
        should be returned. A value of "NoData" indicates that only
        documentation should be returned (i.e. the DataSet, Group, and
        Series level Attributes).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    detail: DataReturnDetailType = field(
        default=DataReturnDetailType.FULL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MetadataReturnDetailsType(ReturnDetailsBaseType):
    """MetadataReturnDetailsType is a structure for detailing how reference
    metadata should be returned.

    Only a default size limit can be specified.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class NumericValueType:
    """NumericValueType describes the structure of a numeric query.

    A value is provided as the content in decimal format.

    :ivar value:
    :ivar operator: The operator attribute indicates the operator to
        apply to the numeric value query, such as equal to or greater
        than.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    value: None | Decimal = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    operator: OrderedOperatorType = field(
        default=OrderedOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class QueryIdtype:
    """
    QueryIDType defines the structure of a query for an identifier.

    :ivar value:
    :ivar operator: The operator attribute indicates how the supplied
        value should be applied to the objects being searched in order
        to constitute a match. For example, a value of "EqualTo" means
        the value of the field being search should exactly match the
        value supplied. See the defining type for further details.
    """

    class Meta:
        name = "QueryIDType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    operator: TextOperatorType = field(
        default=TextOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class QueryNestedIdtype:
    """
    QueryNestedIDType defines the structure of a query for a nested identifier.

    :ivar value:
    :ivar operator: The operator attribute indicates how the supplied
        value should be applied to the objects being searched in order
        to constitute a match. For example, a value of "EqualTo" means
        the value of the field being search should exactly match the
        value supplied. See the defining type for further details.
    """

    class Meta:
        name = "QueryNestedIDType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+(\.[A-Za-z0-9_@$\-]+)*",
        },
    )
    operator: TextOperatorType = field(
        default=TextOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class QueryStringType:
    """
    QueryStringType defines the structure of a string query.

    :ivar value:
    :ivar operator: The operator attribute indicates how the supplied
        value should be applied to the objects being searched in order
        to constitute a match. For example, a value of "EqualTo" means
        the value of the field being search should exactly match the
        value supplied. See the defining type for further details.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    operator: TextOperatorType = field(
        default=TextOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class QueryTextType(TextType):
    """QueryTextType describes the structure of a textual query value.

    A language must be specified if parallel multi-lingual values are
    available, otherwise it is ignored.

    :ivar operator: The operator attribute indicates how the supplied
        value should be applied to the objects being searched in order
        to constitute a match. For example, a value of "EqualTo" means
        the value of the field being search should exactly match the
        value supplied. See the defining type for further details.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    operator: TextOperatorType = field(
        default=TextOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class SimpleValueType2:
    """SimpleValueType describes the structure of a simple value query.

    A value is provided as the content in string format.

    :ivar value:
    :ivar operator: The operator attribute indicates the operator to
        apply to the string value query. The options are equal and
        notEqual.
    """

    class Meta:
        name = "SimpleValueType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    operator: SimpleOperatorType = field(
        default=SimpleOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureReturnDetailsBaseType(ReturnDetailsBaseType):
    """
    StructureReturnDetailsBaseType is an abstract base type which forms the basis
    of StructureReturnDetailsType.

    :ivar detail: The detail attribute is used to indicate whether the
        response to the query should return the full details of matched
        objects, or just a subset of the information should be returned.
        A value of "Full" indicates that the full details of all matched
        objects should be returned. A value of "CompleteStub" indicates
        that the identification information, name, description, and
        annotations for the matched object should be returned. A value
        of "Stub" indicates that just the identification information and
        name should be returned for the matched objects. Note that this
        applies only to the object(s) matched by the query parameters.
        The References element has a separate field for indicating the
        level of detail returned for referenced objects.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    detail: StructureReturnDetailType = field(
        default=StructureReturnDetailType.FULL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimePeriodValueType:
    """TimePeriodValueType describes the structure of a time period query.

    A value is provided as the content in the SDMX time period format.

    :ivar value:
    :ivar operator: The operator attribute indicates the operator to
        apply to the value query, such as equal to or greater than.
    :ivar reporting_year_start_day: The reportingYearStartDay attribute
        allows a reporting year start day to be specified for the
        reporting period time value. If this time value provided is not
        a report period, this value can be ignored. If an explicit value
        is provided, this will effectively turn the time parameter into
        a distinct time range. For example if the time parameter value
        is "2010-Q1" and this attribute has a value of "--04-01", the
        parameter will be treated as "2010-04-01/2010-06-30". If a value
        of "Any" is provided, then data will be matched regardless of
        its reporting year start day. For example, a query of 2011-A1
        would return all data that belongs to a reporting year of 2011,
        regardless of the start day of the reporting year. For the
        puroses of matching data reporting against a Gregorian period
        against a time parameter value that is a reporting period, a
        value of "Any" will be treated as a start day of January 1.
        Therefore, if the time paramter value was 2011-A1, data reported
        against 2011 would be matched but data reporting against
        '2011-06/P1Y' would not be matched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    value: str = field(
        default="",
        metadata={
            "pattern": r".{5}A1.*",
        },
    )
    operator: TimeOperatorType = field(
        default=TimeOperatorType.EQUAL,
        metadata={
            "type": "Attribute",
        },
    )
    reporting_year_start_day: AnyQueryType | XmlPeriod = field(
        default=AnyQueryType.ANY,
        metadata={
            "name": "reportingYearStartDay",
            "type": "Attribute",
        },
    )


@dataclass
class IdentifiableObjectEventType:
    """IdentifiableObjectEventType describes the structure of a reference to an
    identifiable object's events.

    Either all instances of the object matching the inherited criteria,
    a specific instance, or specific instances of the object may be
    selected.

    :ivar all: All subscribes to the events all instances of the
        containing object meeting the other criteria specified.
    :ivar urn: URN subscribes to the events of the specific instance of
        the object type referenced by this URN. Note that when this
        field is used, the agency information inherited from the
        structural repository event container is ignored.
    :ivar id: ID subscribes to the events of the specific instance of
        the object type where the value provided here matches the id of
        the object. The default value is the wildcard character("%").
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    all: None | EmptyType = field(
        default=None,
        metadata={
            "name": "All",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    urn: None | str = field(
        default=None,
        metadata={
            "name": "URN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    id: str | WildCardValueType = field(
        default=WildCardValueType.VALUE,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class IdentifiableQueryType:
    """
    IdentifiableQueryType describes the structure of a query for an identifiable
    object.

    :ivar id: The id attribute is used to query for an object based on
        its identifier. This is either an explicit value, or completely
        wild cared with the "%" value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    id: str | WildCardValueType = field(
        default=WildCardValueType.VALUE,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class QueryableDataSourceType2(QueryableDataSourceType1):
    """
    QueryableDataSourceType describes a queryable data source, and add a fixed
    attribute for ensuring only one queryable source can be provided.

    :ivar type_value: TYPE is a fixed attribute that is used to ensure
        only one queryable data source may be provided, when it is
        referenced in a uniqueness constraint.
    """

    class Meta:
        name = "QueryableDataSourceType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    type_value: str = field(
        init=False,
        default="QUERY",
        metadata={
            "name": "TYPE",
            "type": "Attribute",
        },
    )


@dataclass
class VersionableObjectEventType:
    """VersionableObjectEventType describes the structure of a reference to a
    versionable object's events.

    Either all instances of the object matching the inherited criteria,
    a specific instance, or specific instances of the object may be
    selected.

    :ivar all: All subscribes to the events all instances of the
        containing object meeting the other criteria specified.
    :ivar urn: URN subscribes to the events of the specific instance of
        the object type referenced by this URN. Note that when this
        field is used, the agency information inherited from the
        structural repository event container is ignored.
    :ivar id: ID subscribes to the events of the specific instance of
        the object type where the value provided here matches the id of
        the object and the value provided in the version field matches
        the version of the object. The default value is the wildcard
        character("%").
    :ivar version: Version subscribes to the events of the specific
        instance of the object type where the value provided in the id
        field matches the id of the object and the value here matches
        the version of the object. The default value is the wildcard
        character("%"). Note that in addition to being wild-carded, this
        can also be bound to the latest version of the object with the
        late-bound character("*").
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    all: None | EmptyType = field(
        default=None,
        metadata={
            "name": "All",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    urn: None | str = field(
        default=None,
        metadata={
            "name": "URN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    id: str | WildCardValueType = field(
        default=WildCardValueType.VALUE,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    version: str | LateBoundVersionType | WildCardValueType = field(
        default=WildCardValueType.VALUE,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )


@dataclass
class TextFormatType:
    """
    TextFormatType defines the information for describing a full range of text
    formats and may place restrictions on the values of the other attributes,
    referred to as "facets".

    :ivar text_type: The textType attribute provides a description of
        the datatype. If it is not specified, any valid characters may
        be included in the text field (it corresponds to the xs:string
        datatype of W3C XML Schema) within the constraints of the
        facets.
    :ivar is_sequence: The isSequence attribute indicates whether the
        values are intended to be ordered, and it may work in
        combination with the interval, startValue, and endValue
        attributes or the timeInterval, startTime, and endTime,
        attributes. If this attribute holds a value of true, a start
        value or time and a numeric or time interval must supplied. If
        an end value is not given, then the sequence continues
        indefinitely.
    :ivar interval: The interval attribute specifies the permitted
        interval (increment) in a sequence. In order for this to be
        used, the isSequence attribute must have a value of true.
    :ivar start_value: The startValue attribute is used in conjunction
        with the isSequence and interval attributes (which must be set
        in order to use this attribute). This attribute is used for a
        numeric sequence, and indicates the starting  point of the
        sequence. This value is mandatory for a numeric sequence to be
        expressed.
    :ivar end_value: The endValue attribute is used in conjunction with
        the isSequence and interval attributes (which must be set in
        order to use this attribute). This attribute is used for a
        numeric sequence, and indicates that ending point (if any) of
        the sequence.
    :ivar time_interval: The timeInterval attribute indicates the
        permitted duration in a time sequence. In order for this to be
        used, the isSequence attribute must have a value of true.
    :ivar start_time: The startTime attribute is used in conjunction
        with the isSequence and timeInterval attributes (which must be
        set in order to use this attribute). This attribute is used for
        a time sequence, and indicates the start time of the sequence.
        This value is mandatory for a time sequence to be expressed.
    :ivar end_time: The endTime attribute is used in conjunction with
        the isSequence and timeInterval attributes (which must be set in
        order to use this attribute). This attribute is used for a time
        sequence, and indicates that ending point (if any) of the
        sequence.
    :ivar min_length: The minLength attribute specifies the minimum and
        length of the value in characters.
    :ivar max_length: The maxLength attribute specifies the maximum
        length of the value in characters.
    :ivar min_value: The minValue attribute is used for inclusive and
        exclusive ranges, indicating what the lower bound of the range
        is. If this is used with an inclusive range, a valid value will
        be greater than or equal to the value specified here. If the
        inclusive and exclusive data type is not specified (e.g. this
        facet is used with an integer data type), the value is assumed
        to be inclusive.
    :ivar max_value: The maxValue attribute is used for inclusive and
        exclusive ranges, indicating what the upper bound of the range
        is. If this is used with an inclusive range, a valid value will
        be less than or equal to the value specified here. If the
        inclusive and exclusive data type is not specified (e.g. this
        facet is used with an integer data type), the value is assumed
        to be inclusive.
    :ivar decimals: The decimals attribute indicates the number of
        characters allowed after the decimal separator.
    :ivar pattern: The pattern attribute holds any regular expression
        permitted in the similar facet in W3C XML Schema.
    :ivar is_multi_lingual: The isMultiLingual attribute indicates for a
        text format of type "string", whether the value should allow for
        multiple values in different languages.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: DataType = field(
        default=DataType.STRING,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    is_sequence: None | bool = field(
        default=None,
        metadata={
            "name": "isSequence",
            "type": "Attribute",
        },
    )
    interval: None | Decimal = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    start_value: None | Decimal = field(
        default=None,
        metadata={
            "name": "startValue",
            "type": "Attribute",
        },
    )
    end_value: None | Decimal = field(
        default=None,
        metadata={
            "name": "endValue",
            "type": "Attribute",
        },
    )
    time_interval: None | XmlDuration = field(
        default=None,
        metadata={
            "name": "timeInterval",
            "type": "Attribute",
        },
    )
    start_time: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "startTime",
            "type": "Attribute",
            "pattern": r".{5}A1.*",
        },
    )
    end_time: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "endTime",
            "type": "Attribute",
            "pattern": r".{5}A1.*",
        },
    )
    min_length: None | int = field(
        default=None,
        metadata={
            "name": "minLength",
            "type": "Attribute",
        },
    )
    max_length: None | int = field(
        default=None,
        metadata={
            "name": "maxLength",
            "type": "Attribute",
        },
    )
    min_value: None | Decimal = field(
        default=None,
        metadata={
            "name": "minValue",
            "type": "Attribute",
        },
    )
    max_value: None | Decimal = field(
        default=None,
        metadata={
            "name": "maxValue",
            "type": "Attribute",
        },
    )
    decimals: None | int = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    pattern: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    is_multi_lingual: bool = field(
        default=True,
        metadata={
            "name": "isMultiLingual",
            "type": "Attribute",
        },
    )


@dataclass
class ValueMapType:
    """
    ValueMapType contains a collection of value mappings, which give a source and
    target value.

    :ivar value_mapping: ValueMapping provides a source and target value
        for the purpose of mapping.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    value_mapping: list[ValueMappingType] = field(
        default_factory=list,
        metadata={
            "name": "ValueMapping",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class AnnotationsType:
    """
    AnnotationsType provides for a list of annotations to be attached to data and
    structure messages.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    annotation: list[AnnotationType] = field(
        default_factory=list,
        metadata={
            "name": "Annotation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )


@dataclass
class AnyLocalCodeRefType(RefBaseType):
    """
    AnyLocalCodeRefType provides a local reference to any code object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    maintainable_parent_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    maintainable_parent_version: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local: bool = field(
        init=False,
        default=True,
        metadata={
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ChildObjectRefBaseType(RefBaseType):
    """
    ChildObjectRefBaseType is an abstract base type for referencing any child
    object defined directly within a maintainable object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    version: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CodedStatusMessageType(StatusMessageType1):
    """
    CodedStatusMessageType describes the structure of an error or warning message
    which required a code.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    code: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ContainerChildObjectRefBaseType(RefBaseType):
    """
    ContainerChildObjectRefBaseType is an abstract base type for referencing any
    child object within container defined in a maintainable object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalIdentifiableRefBaseType(RefBaseType):
    """
    LocalIdentifiableRefBaseType is an abstract base type which provides a local
    reference to any identifiable object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    maintainable_parent_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    maintainable_parent_version: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    version: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local: bool = field(
        init=False,
        default=True,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MaintainableRefBaseType(RefBaseType):
    """
    MaintainableRefBaseType is an abstract base type for referencing a maintainable
    object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    maintainable_parent_version: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    version: str = field(
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ObjectRefType(RefBaseType):
    """ObjectRefType contains a set of reference fields for the purpose of
    referencing any object.

    This cannot be a local reference, therefore the agency identifier is
    required. It is also required that the class and package be supplied
    for the referenced object such that a complete URN reference can be
    built from the values provided. Note that this is not capable of
    fully validating that all necessary fields are supplied for a given
    object type.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: None | ObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | PackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ObjectTypeListType:
    """
    ObjectTypeListType provides a means for enumerating object types.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    any: None | AnyType = field(
        default=None,
        metadata={
            "name": "Any",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    agency: None | Agency1 = field(
        default=None,
        metadata={
            "name": "Agency",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    agency_scheme: None | AgencyScheme = field(
        default=None,
        metadata={
            "name": "AgencyScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    attachment_constraint: None | AttachmentConstraint = field(
        default=None,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    attribute: None | Attribute1 = field(
        default=None,
        metadata={
            "name": "Attribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    attribute_descriptor: None | AttributeDescriptor = field(
        default=None,
        metadata={
            "name": "AttributeDescriptor",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    categorisation: None | Categorisation = field(
        default=None,
        metadata={
            "name": "Categorisation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    category: None | Category1 = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    category_scheme_map: None | CategorySchemeMap = field(
        default=None,
        metadata={
            "name": "CategorySchemeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    category_scheme: None | CategoryScheme = field(
        default=None,
        metadata={
            "name": "CategoryScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    code: None | Code1 = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    code_map: None | CodeMap1 = field(
        default=None,
        metadata={
            "name": "CodeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    codelist: None | Codelist = field(
        default=None,
        metadata={
            "name": "Codelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    codelist_map: None | CodelistMap = field(
        default=None,
        metadata={
            "name": "CodelistMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    component_map: None | ComponentMap = field(
        default=None,
        metadata={
            "name": "ComponentMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    concept: None | Concept1 = field(
        default=None,
        metadata={
            "name": "Concept",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    concept_map: None | ConceptMap1 = field(
        default=None,
        metadata={
            "name": "ConceptMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    concept_scheme: None | ConceptScheme = field(
        default=None,
        metadata={
            "name": "ConceptScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    concept_scheme_map: None | ConceptSchemeMap = field(
        default=None,
        metadata={
            "name": "ConceptSchemeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    content_constraint: None | ContentConstraint = field(
        default=None,
        metadata={
            "name": "ContentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    dataflow: None | Dataflow = field(
        default=None,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_consumer: None | DataConsumer1 = field(
        default=None,
        metadata={
            "name": "DataConsumer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_consumer_scheme: None | DataConsumerScheme = field(
        default=None,
        metadata={
            "name": "DataConsumerScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_provider: None | DataProvider1 = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_provider_scheme: None | DataProviderScheme = field(
        default=None,
        metadata={
            "name": "DataProviderScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_set_target: None | DataSetTarget1 = field(
        default=None,
        metadata={
            "name": "DataSetTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_structure: None | DataStructure = field(
        default=None,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    dimension: None | Dimension1 = field(
        default=None,
        metadata={
            "name": "Dimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    dimension_descriptor: None | DimensionDescriptor = field(
        default=None,
        metadata={
            "name": "DimensionDescriptor",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    dimension_descriptor_values_target: None | DimensionDescriptorValuesTarget = field(
        default=None,
        metadata={
            "name": "DimensionDescriptorValuesTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    group_dimension_descriptor: None | GroupDimensionDescriptor = field(
        default=None,
        metadata={
            "name": "GroupDimensionDescriptor",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    hierarchical_code: None | HierarchicalCode = field(
        default=None,
        metadata={
            "name": "HierarchicalCode",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    hierarchical_codelist: None | HierarchicalCodelist = field(
        default=None,
        metadata={
            "name": "HierarchicalCodelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    hierarchy: None | Hierarchy = field(
        default=None,
        metadata={
            "name": "Hierarchy",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    hybrid_codelist_map: None | HybridCodelistMap = field(
        default=None,
        metadata={
            "name": "HybridCodelistMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    hybrid_code_map: None | HybridCodeMap = field(
        default=None,
        metadata={
            "name": "HybridCodeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    identifiable_object_target: None | IdentifiableObjectTarget1 = field(
        default=None,
        metadata={
            "name": "IdentifiableObjectTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    level: None | Level = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    measure_descriptor: None | MeasureDescriptor = field(
        default=None,
        metadata={
            "name": "MeasureDescriptor",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    measure_dimension: None | MeasureDimension1 = field(
        default=None,
        metadata={
            "name": "MeasureDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    metadataflow: None | Metadataflow = field(
        default=None,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    metadata_attribute: None | MetadataAttribute1 = field(
        default=None,
        metadata={
            "name": "MetadataAttribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    metadata_set: None | MetadataSet = field(
        default=None,
        metadata={
            "name": "MetadataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    metadata_structure: None | MetadataStructure = field(
        default=None,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    metadata_target: None | MetadataTarget1 = field(
        default=None,
        metadata={
            "name": "MetadataTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    organisation_map: None | OrganisationMap1 = field(
        default=None,
        metadata={
            "name": "OrganisationMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    organisation_scheme_map: None | OrganisationSchemeMap = field(
        default=None,
        metadata={
            "name": "OrganisationSchemeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    organisation_unit: None | OrganisationUnit1 = field(
        default=None,
        metadata={
            "name": "OrganisationUnit",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    organisation_unit_scheme: None | OrganisationUnitScheme = field(
        default=None,
        metadata={
            "name": "OrganisationUnitScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    primary_measure: None | PrimaryMeasure1 = field(
        default=None,
        metadata={
            "name": "PrimaryMeasure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    process: None | Process = field(
        default=None,
        metadata={
            "name": "Process",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    process_step: None | ProcessStep = field(
        default=None,
        metadata={
            "name": "ProcessStep",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    provision_agreement: None | ProvisionAgreement = field(
        default=None,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    reporting_category: None | ReportingCategory1 = field(
        default=None,
        metadata={
            "name": "ReportingCategory",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    reporting_category_map: None | ReportingCategoryMap1 = field(
        default=None,
        metadata={
            "name": "ReportingCategoryMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    reporting_taxonomy: None | ReportingTaxonomy = field(
        default=None,
        metadata={
            "name": "ReportingTaxonomy",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    reporting_taxonomy_map: None | ReportingTaxonomyMap = field(
        default=None,
        metadata={
            "name": "ReportingTaxonomyMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    report_period_target: None | ReportPeriodTarget1 = field(
        default=None,
        metadata={
            "name": "ReportPeriodTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    report_structure: None | ReportStructure1 = field(
        default=None,
        metadata={
            "name": "ReportStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structure_map: None | StructureMap = field(
        default=None,
        metadata={
            "name": "StructureMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structure_set: None | StructureSet = field(
        default=None,
        metadata={
            "name": "StructureSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    time_dimension: None | TimeDimension1 = field(
        default=None,
        metadata={
            "name": "TimeDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    transition: None | Transition = field(
        default=None,
        metadata={
            "name": "Transition",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class ReferenceType:
    """ReferenceType is an abstract base type.

    It is used as the basis for all references, to all for a top level generic object reference that can be substituted with an explicit reference to any object. Any reference can consist of a Ref (which contains all required reference fields separately) and/or a URN. These must result in the identification of the same object. Note that the Ref and URN elements are local and unqualified in order to allow for refinement of this structure outside of the namespace. This allows any reference to further refined by a different namespace. For example, a metadata structure definition specific metadata set might wish to restrict the URN to only allow for a value from an enumerated list. The general URN structure, for the purpose of mapping the reference fields is as follows: urn:sdmx:org.package-name.class-name=agency-id:(maintainable-parent-object-id[maintainable-parent-object-version].)?(container-object-id.)?object-id([object-version])?.

    :ivar ref: Ref is used to provide a complete set of reference
        fields. Derived reference types will restrict the RefType so
        that the content of the Ref element requires exactly what is
        needed for a complete reference.
    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    ref: None | RefBaseType = field(
        default=None,
        metadata={
            "name": "Ref",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    urn: list[str] = field(
        default_factory=list,
        metadata={
            "name": "URN",
            "type": "Element",
            "namespace": "",
            "min_occurs": 1,
            "max_occurs": 2,
            "sequence": 1,
        },
    )


@dataclass
class ValuesType:
    """ValuesType is a general structure which contains a collection of data
    structure definition component values.

    This type is used to provide both key and attribute collection
    values.

    :ivar value: Value contains a component value and a reference to the
        component for which a value is being provided.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    value: list[ComponentValueType] = field(
        default_factory=list,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
            "min_occurs": 1,
        },
    )


@dataclass
class ContactType2:
    """
    ContactType provides defines the contact information about a party.

    :ivar name: Name contains a human-readable name for the contact.
    :ivar department: Department is designation of the organisational
        structure by a linguistic expression, within which the contact
        person works.
    :ivar role: Role is the responsibility of the contact person with
        respect to the object for which this person is the contact.
    :ivar telephone: Telephone holds the telephone number for the
        contact person.
    :ivar fax: Fax holds the fax number for the contact person.
    :ivar x400: X400 holds the X.400 address for the contact person.
    :ivar uri: URI holds an information URL for the contact person.
    :ivar email: Email holds the email address for the contact person.
    """

    class Meta:
        name = "ContactType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    department: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Department",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    role: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    telephone: list[str] = field(
        default_factory=list,
        metadata={
            "name": "Telephone",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    fax: list[str] = field(
        default_factory=list,
        metadata={
            "name": "Fax",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    x400: list[str] = field(
        default_factory=list,
        metadata={
            "name": "X400",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    uri: list[str] = field(
        default_factory=list,
        metadata={
            "name": "URI",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    email: list[str] = field(
        default_factory=list,
        metadata={
            "name": "Email",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )


@dataclass
class AnnotationWhereType:
    """
    AnnotationWhereType defines the structure for querying the details of an
    annotation.

    :ivar type_value: Type is a parameter for matching the type field of
        an annotation.
    :ivar title: Title is a parameter for matching the title field of an
        annotation.
    :ivar text: Text is a parameter for matching the text field of an
        annotation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: None | QueryStringType = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    title: None | QueryStringType = field(
        default=None,
        metadata={
            "name": "Title",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    text: None | QueryTextType = field(
        default=None,
        metadata={
            "name": "Text",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class NumericValue(NumericValueType):
    """NumericValue is used to query for a the value of a concept or component
    based on a numeric search.

    This is typically used when the value needs to be searched
    explicitly as a number, such as when data is sought with an observed
    value greater than some threshold. If only a simple match is
    required (i.e. the numeric value equals 'x') then the Value element
    can be used.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TextValue(QueryTextType):
    """TextValue is used to query for the value of a concept or component based on
    textual parameters.

    The text value can be language specific (where  parallel multi-
    lingual values are available) and is qualified with an operator
    indicating how the supplied text should be matched against the
    sought components. If only a simple equality check is necessary,
    regardless of language, the Value element can be used.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TimeValue(TimePeriodValueType):
    """TimeValue is used to query for the value of a concept or component based on
    time parameters.

    This is typically used when the value needs to be treated explicitly
    as a time, for example when searching for data after a particular
    point in time. If only a simple equality check is necessary, the
    Value element can be used.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class Value(SimpleValueType2):
    """Value is used to query for the value of a component.

    This should be used for concepts or components based on a simple
    value (e.g. a code or a simple string). This should be used when a
    simple equal/not equal operator is all that is necessary for
    matching the sought value.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class DataSourceType:
    """DataSourceType specifies the properties of a data or metadata source.

    Either a simple data source, a queryable data source, or both must
    be specified.

    :ivar simple_data_source: SimpleDatasource describes a data source
        that is an SDMX-ML data or metadata message. It requires only
        the URL of the data.
    :ivar queryable_data_source: QueryableDatasource describes a data
        source that must be able to accept an SDMX-ML Query Message, and
        respond appropriately.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    simple_data_source: list[str] = field(
        default_factory=list,
        metadata={
            "name": "SimpleDataSource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "max_occurs": 2,
        },
    )
    queryable_data_source: list[QueryableDataSourceType2] = field(
        default_factory=list,
        metadata={
            "name": "QueryableDataSource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "max_occurs": 2,
        },
    )


@dataclass
class StatusMessageType2:
    """
    StatusMessageType carries the text of error messages and/or warnings in
    response to queries or requests.

    :ivar message_text: MessageText contains the text of the error
        and/or warning message. It can occur multiple times to
        communicate message for multiple warnings or errors.
    :ivar status: The status attribute carries the status of the query
        or request.
    """

    class Meta:
        name = "StatusMessageType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    message_text: list[StatusMessageType1] = field(
        default_factory=list,
        metadata={
            "name": "MessageText",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    status: None | StatusType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class StructuralRepositoryEventsType:
    """StructuralRepositoryEventsType details the structural events for the
    subscription.

    At least one maintenance agency must be specified, although it may
    be given a wildcard value (meaning the subscription is for the
    structural events of all agencies). This can also be a list of
    agencies to allow the subscription to subscribe the events of more
    than one agency. It should be noted that when doing so, all of the
    subsequent objects are assumed to apply to every agency in the list.
    The subscription is then refined by detailing the structural objects
    maintained by the agency for which the subscription should apply. It
    is possible to explicitly select all object events, all objects of
    given types, or to individually list out specific objects. Note that
    for any object, it is also possible to provide an explicit URN to
    reference a distinct object. In this case, the reference to
    maintenance agency described above is ignored. Although it is not
    required, if specific objects are being referenced by explicit URNs,
    it is good practice to list the agencies.

    :ivar agency_id: AgencyID specifies a maintenance agency for the
        object or objects indicated in the other fields. This can be
        either a specific ID, or a single wildcard character ("%"). A
        wild card character can be used to select all agencies, allowing
        a subscription to all events for particular object types. This
        can occur multiple times to list a of group of maintenance
        agencies, creating event subscriptions for all of the subsequent
        objects for each agency in the group. Note that if multiple
        agencies are supplied, then the wildcard character should not be
        used for any of them.
    :ivar all_events: AllEvents creates a subscription to structural
        events for all structural objects maintained by the agencies
        referenced.
    :ivar agency_scheme: AgencyScheme is used to subscribe to changes of
        agency schemes. The maintenance agencies of the object are those
        identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar data_consmer_scheme: DataConsmerScheme is used to subscribe to
        changes of data consumer schemes. The maintenance agencies of
        the object are those identified in the AgencyID collection,
        effectively making separate version of this query for each
        agency specified. The agency is ignored if the content of this
        is a URN, which references an explicit object. Otherwise, either
        all objects of this type or specific object according to the id
        and version fields can be selected.
    :ivar data_provider_scheme: DataProviderScheme is used to subscribe
        to changes of data provider schemes. The maintenance agencies of
        the object are those identified in the AgencyID collection,
        effectively making separate version of this query for each
        agency specified. The agency is ignored if the content of this
        is a URN, which references an explicit object. Otherwise, either
        all objects of this type or specific object according to the id
        and version fields can be selected.
    :ivar organisation_unit_scheme: OrganisationUnitScheme is used to
        subscribe to changes of organisation unit schemes. The
        maintenance agencies of the object are those identified in the
        AgencyID collection, effectively making separate version of this
        query for each agency specified. The agency is ignored if the
        content of this is a URN, which references an explicit object.
        Otherwise, either all objects of this type or specific object
        according to the id and version fields can be selected.
    :ivar dataflow: Dataflow is used to subscribe to changes of data
        flows. The maintenance agencies of the object are those
        identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar metadataflow: Metadataflow is used to subscribe to changes of
        metadata flows. The maintenance agencies of the object are those
        identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar category_scheme: CategoryScheme is used to subscribe to
        changes of category schemes. The maintenance agencies of the
        object are those identified in the AgencyID collection,
        effectively making separate version of this query for each
        agency specified. The agency is ignored if the content of this
        is a URN, which references an explicit object. Otherwise, either
        all objects of this type or specific object according to the id
        and version fields can be selected.
    :ivar categorisation: Categorisation is used to subscribe to changes
        of categorizations. The maintenance agencies of the object are
        those identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id field can be
        selected.
    :ivar codelist: Codelist is used to subscribe to changes of code
        lists. The maintenance agencies of the object are those
        identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar hierarchical_codelist: HierarchicalCodelist is used to
        subscribe to changes of hierarchical code lists. The maintenance
        agencies of the object are those identified in the AgencyID
        collection, effectively making separate version of this query
        for each agency specified. The agency is ignored if the content
        of this is a URN, which references an explicit object.
        Otherwise, either all objects of this type or specific object
        according to the id and version fields can be selected.
    :ivar concept_scheme: ConceptScheme is used to subscribe to changes
        of concept schemes. The maintenance agencies of the object are
        those identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar metadata_structure_definition: MetadataStructureDefinition is
        used to subscribe to changes of metadata structure definitions.
        The maintenance agencies of the object are those identified in
        the AgencyID collection, effectively making separate version of
        this query for each agency specified. The agency is ignored if
        the content of this is a URN, which references an explicit
        object. Otherwise, either all objects of this type or specific
        object according to the id and version fields can be selected.
    :ivar key_family: KeyFamily is used to subscribe to changes of key
        families. The maintenance agencies of the object are those
        identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar structure_set: StructureSet is used to subscribe to changes of
        structure sets. The maintenance agencies of the object are those
        identified in the AgencyID collection, effectively making
        separate version of this query for each agency specified. The
        agency is ignored if the content of this is a URN, which
        references an explicit object. Otherwise, either all objects of
        this type or specific object according to the id and version
        fields can be selected.
    :ivar reporting_taxonomy: ReportingTaxonomy is used to subscribe to
        changes of reporting taxonomies. The maintenance agencies of the
        object are those identified in the AgencyID collection,
        effectively making separate version of this query for each
        agency specified. The agency is ignored if the content of this
        is a URN, which references an explicit object. Otherwise, either
        all objects of this type or specific object according to the id
        and version fields can be selected.
    :ivar process: Process is used to subscribe to changes of processes.
        The maintenance agencies of the object are those identified in
        the AgencyID collection, effectively making separate version of
        this query for each agency specified. The agency is ignored if
        the content of this is a URN, which references an explicit
        object. Otherwise, either all objects of this type or specific
        object according to the id and version fields can be selected.
    :ivar attachment_constraint: AttachmentConstraint is used to
        subscribe to changes of attachment constraints. The maintenance
        agencies of the object are those identified in the AgencyID
        collection, effectively making separate version of this query
        for each agency specified. The agency is ignored if the content
        of this is a URN, which references an explicit object.
        Otherwise, either all objects of this type or specific object
        according to the id and version fields can be selected.
    :ivar content_constraint: ContentConstraint is used to subscribe to
        changes of content constraints. The maintenance agencies of the
        object are those identified in the AgencyID collection,
        effectively making separate version of this query for each
        agency specified. The agency is ignored if the content of this
        is a URN, which references an explicit object. Otherwise, either
        all objects of this type or specific object according to the id
        and version fields can be selected.
    :ivar provision_agreement: ProvisionAgreement is used to subscribe
        to changes of a provision agreement. The maintenance agencies of
        the object are those identified in the AgencyID collection,
        effectively making separate version of this query for each
        agency specified. The agency is ignored if the content of this
        is a URN, which references an explicit object. Otherwise, either
        all objects of this type or specific object according to the id
        and version fields can be selected.
    :ivar type_value: TYPE is a fixed attribute that is used to ensure
        only of each event selector may be provided, when it is
        referenced in a uniqueness constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    agency_id: list[str | WildCardValueType] = field(
        default_factory=list,
        metadata={
            "name": "AgencyID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "min_occurs": 1,
            "pattern": r"[A-Za-z0-9_@$\-]+(\.[A-Za-z0-9_@$\-]+)*",
        },
    )
    all_events: None | EmptyType = field(
        default=None,
        metadata={
            "name": "AllEvents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    agency_scheme: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "AgencyScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    data_consmer_scheme: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "DataConsmerScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    data_provider_scheme: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "DataProviderScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    organisation_unit_scheme: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationUnitScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    dataflow: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadataflow: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    category_scheme: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "CategoryScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    categorisation: list[IdentifiableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "Categorisation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    codelist: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "Codelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    hierarchical_codelist: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "HierarchicalCodelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    concept_scheme: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadata_structure_definition: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructureDefinition",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    key_family: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "KeyFamily",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    structure_set: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "StructureSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    reporting_taxonomy: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "ReportingTaxonomy",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    process: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "Process",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    attachment_constraint: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    content_constraint: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "ContentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    provision_agreement: list[VersionableObjectEventType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    type_value: str = field(
        init=False,
        default="STRUCTURE",
        metadata={
            "name": "TYPE",
            "type": "Attribute",
        },
    )


@dataclass
class VersionableQueryType(IdentifiableQueryType):
    """
    VersionableQueryType describes the structure of a query for a versionable
    object.

    :ivar version: The version attribute is used to query for an object
        based on its version. This can be and explicit value, wild-
        carded ("%"), or late-bound ("*"). A wild carded version will
        match any version of the object where as a late-bound version
        will only match the latest version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    version: str | LateBoundVersionType | WildCardValueType = field(
        default=LateBoundVersionType.VALUE,
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )


@dataclass
class BasicComponentTextFormatType(TextFormatType):
    """
    BasicComponentTextFormatType is a restricted version of the TextFormatType that
    restricts the text type to the representations allowed for all components
    except for target objects.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: BasicComponentDataType = field(
        default=BasicComponentDataType.STRING,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )


@dataclass
class ContactType1:
    """
    ContactType describes the structure of a contact's details.

    :ivar name:
    :ivar department: Department is designation of the organisational
        structure by a linguistic expression, within which the contact
        person works.
    :ivar role: Role is the responsibility of the contact person with
        respect to the object for which this person is the contact.
    :ivar telephone: Telephone holds the telephone number for the
        contact person.
    :ivar fax: Fax holds the fax number for the contact person.
    :ivar x400: X400 holds the X.400 address for the contact person.
    :ivar uri: URI holds an information URL for the contact person.
    :ivar email: Email holds the email address for the contact person.
    :ivar id: The id attribute is used to carry user id information for
        the contact.
    """

    class Meta:
        name = "ContactType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    department: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Department",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    role: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    telephone: list[str] = field(
        default_factory=list,
        metadata={
            "name": "Telephone",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    fax: list[str] = field(
        default_factory=list,
        metadata={
            "name": "Fax",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    x400: list[str] = field(
        default_factory=list,
        metadata={
            "name": "X400",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    uri: list[str] = field(
        default_factory=list,
        metadata={
            "name": "URI",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    email: list[str] = field(
        default_factory=list,
        metadata={
            "name": "Email",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class KeySetType:
    """
    KeySetType is an abstract base type for defining a collection of keys.

    :ivar key: Key contains a data or metadata key, which are sets of
        component values which identify the data or metadata.
    :ivar is_included: The isIncluded attribute indicates whether the
        keys defined in this key set are inclusive or exclusive to the
        constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    key: list[DistinctKeyType] = field(
        default_factory=list,
        metadata={
            "name": "Key",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )
    is_included: None | bool = field(
        default=None,
        metadata={
            "name": "isIncluded",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class TargetObjectTextFormatType(TextFormatType):
    """
    TargetObjectTextFormatType is a restricted version of the TextFormatType that
    does not allow for any facets and only allows the text types for target
    objects.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: None | TargetObjectDataType = field(
        default=None,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    is_sequence: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    start_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    start_time: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_time: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    min_length: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    max_length: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    min_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    max_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    decimals: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    pattern: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    is_multi_lingual: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class Annotations(AnnotationsType):
    """Annotations is a reusable element the provides for a collection of
    annotations.

    It has been made global so that restrictions of types that extend
    AnnotatableType my reference it.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AnyCodelistRefType(MaintainableRefBaseType):
    """
    AnyCodelistRefType is a type for referencing any codelist object (either a
    codelist or a hierarchical codelist).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | CodelistTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AnyLocalCodeReferenceType(ReferenceType):
    """
    AnyLocalCodeReferenceType provides a simple references to any code or
    hierarchical code where the identification of the codelist or hierarchical
    codelist which defines it is contained in another context.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategorisationRefType(MaintainableRefBaseType):
    """
    CategorisationRefType provides a reference to a categorisation via a complete
    set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.CATEGORISATION,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CategorySchemeMapRefType(ChildObjectRefBaseType):
    """
    CategorySchemeMapRefType contains a set of reference fields for a category
    scheme map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.CATEGORY_SCHEME_MAP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ChildObjectReferenceType(ReferenceType):
    """ChildObjectReferenceType is an abstract base type used for referencing a
    particular object defined directly within a maintainable object.

    It consists of a URN and/or a complete set of reference fields;
    agency, maintainable id (maintainableParentID), maintainable version
    (maintainableParentVersion), the object id (which can be nested),
    and optionally the object version (if applicable).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CodelistMapRefType(ChildObjectRefBaseType):
    """
    CodelistMapRefType contains a set of reference fields for a codelist map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.CODELIST_MAP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ComponentListRefBaseType(ChildObjectRefBaseType):
    """
    ComponentListRefBaseType is an abstract base type for referencing a component
    list within a structure.

    :ivar agency_id:
    :ivar maintainable_parent_id: The maintainableParentID references
        the structure in which the component list being referenced is
        defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the structure in which the
        component list being referenced is defined. If not supplied, a
        default value of 1.0 is assumed.
    :ivar local:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ComponentRefBaseType(ContainerChildObjectRefBaseType):
    """
    ComponentRefBaseType is an abstract base type for referencing a component
    contained in a component list within a structure.

    :ivar agency_id:
    :ivar maintainable_parent_id: The maintainableParentID references
        the structure in which the component being referenced is
        defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the structure in which the
        component being referenced is defined. If not supplied, a
        default value of 1.0 is assumed.
    :ivar local:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ConceptSchemeMapRefType(ChildObjectRefBaseType):
    """
    ConceptSchemeMapRefType contains a set of reference fields for a concept scheme
    map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.CONCEPT_SCHEME_MAP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ConstraintRefType(MaintainableRefBaseType):
    """
    ConstraintRefType contains a set of reference fields for a constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.REGISTRY,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ContainerChildObjectReferenceType(ReferenceType):
    """ContainerChildObjectReferenceType is an abstract base type used for
    referencing a particular object defined in a container object within a
    maintainable object.

    It consists of a URN and/or a complete set of reference fields;
    agency, maintainable id (maintainableParentID), maintainable version
    (maintainableParentVersion), container id (which is optional in
    order to allow for containers with fixed values to be omitted),
    container version (if applicable), the object id (which can be
    nested), and optionally the object version (if applicable).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HierarchicalCodeRefType(ContainerChildObjectRefBaseType):
    """HierarchicalCodeRefType references a code from within a hierarchical
    codelist.

    Reference fields are required for both the code and the codelist.

    :ivar maintainable_parent_id: The maintainableParentID references
        the hierarchical codelist in which the code being referenced is
        defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the hierarchical codelist in
        which the code being referenced is defined. If not supplied, a
        default value of 1.0 is assumed.
    :ivar container_id: The containerID references the hierarchy which
        contains the code being referenced is defined.
    :ivar class_value:
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.HIERARCHICAL_CODE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class HierarchicalCodelistRefType(MaintainableRefBaseType):
    """
    HierarchicalCodelistRefType contains a set of reference fields for a
    hierarchical codelist.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.HIERARCHICAL_CODELIST,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class HierarchyRefType(ChildObjectRefBaseType):
    """HierarchyRefType is type which references a hierarchy from within a
    hierarchical codelist.

    Reference fields are required for both the hierarchy and the
    codelist.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.HIERARCHY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ItemRefBaseType(ChildObjectRefBaseType):
    """
    ItemRefBaseType is an abstract base type for referencing an item within an item
    scheme.

    :ivar agency_id:
    :ivar maintainable_parent_id: The maintainableParentID references
        the item scheme in which the item being referenced is defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the item scheme in which the
        item being referenced is defined. If not supplied, a default
        value of 1.0 is assumed.
    :ivar local:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ItemSchemeRefBaseType(MaintainableRefBaseType):
    """
    ItemSchemeRefBaseType is an abstract base type for referencing an item scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    version: str = field(
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LevelRefType(ChildObjectRefBaseType):
    """LevelRefType references a level from within a hierarchical codelist.

    Reference fields are required for both the level and the codelist.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.LEVEL,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalCodelistMapRefType(LocalIdentifiableRefBaseType):
    """
    LocalCodelistMapRefType contains a set of reference fields for a codelist map
    locally.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.CODELIST_MAP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalCodelistMapReferenceType(ReferenceType):
    """
    LocalCodelistMapReferenceType is a type for referencing a codelist map object
    where the reference to the structure set which defines it is provided in
    another context (e.g. the structure set in which this reference occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentListComponentRefBaseType(LocalIdentifiableRefBaseType):
    """
    LocalComponentRefBaseType is an abstract base type which provides a local
    reference to a component object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class LocalComponentListComponentReferenceBaseType(ReferenceType):
    """
    LocalComponentListComponentReferenceBaseType is an abstract base type which
    provides a simple reference to any type of component in a specific component
    list where the reference to the structure which defines it are provided in
    another context, and the component list may or may not be defined in another
    context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentListRefBaseType(LocalIdentifiableRefBaseType):
    """
    LocalComponentListRefBaseType is an abstract base type which provides a local
    reference to a component list object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentListReferenceType(ReferenceType):
    """
    LocalComponentListReferenceType is an abstract base type which provides a
    simple reference to a component list where the reference to the structure which
    defines it is provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalIdentifiableReferenceType(ReferenceType):
    """
    LocalIdentifiableReferenceType is an abstract base type for referencing an
    identifiable object locally, where the maintainable object in which it is
    defined is referenced in another context..

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalItemRefBaseType(LocalIdentifiableRefBaseType):
    """
    LocalItemRefBaseType is an abstract base type which provides a local reference
    to a item object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalItemReferenceType(ReferenceType):
    """
    LocalItemReferenceType is an abstract base type which provides a simple
    reference to an item where the reference to the item scheme which defines it
    are provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalLevelRefType(LocalIdentifiableRefBaseType):
    """
    LocalLevelRefType references a level object where the reference to the
    hierarchy in which it is contained and the hierarchical codelist which define
    it are provided in another context.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.LEVEL,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class LocalLevelReferenceType(ReferenceType):
    """
    LocalLevelReferenceType is a type for referencing a level object where the
    reference to the hierarchical codelist and the hierarchy in which it is defined
    is provided in another context (e.g. is inferred from the hierarchy in which
    the reference is defined).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalProcessStepRefType(LocalIdentifiableRefBaseType):
    """
    LocalProcessStepRefType contains a local reference to a process step object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.PROCESS_STEP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.PROCESS,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MaintainableObjectTypeListType(ObjectTypeListType):
    """
    MaintainableObjectTypeListType provides a means for enumerating maintainable
    object types.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    any: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_descriptor: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    component_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_descriptor: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension_descriptor: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchy: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hybrid_codelist_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hybrid_code_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    level: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_descriptor: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_set: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_step: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_structure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    transition: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MaintainableRefType(MaintainableRefBaseType):
    """
    MaintainableRefType contains a complete set of reference fields for referencing
    any maintainable object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | ConcreteMaintainableTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | PackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class MaintainableReferenceBaseType(ReferenceType):
    """MaintainableReferenceBaseType is an abstract base type for referencing a
    maintainable object.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ObjectReferenceType(ReferenceType):
    """ObjectReferenceType is a generic reference which allows for any object to be
    referenced.

    The type of object actually referenced can be determined from the
    URN or from the class attribute of the full set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationSchemeMapRefType(ChildObjectRefBaseType):
    """
    OrganisationSchemeMapRefType contains a set of reference fields for an
    organisation scheme map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.ORGANISATION_SCHEME_MAP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ProcessRefType(MaintainableRefBaseType):
    """
    ProcessRefType contains a set of reference fields for a process.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.PROCESS,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.PROCESS,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ProcessStepRefType(ChildObjectRefBaseType):
    """ProcessStepRefType provides for a reference to a process step through its
    id.

    Support for referencing nested process steps is provided through a
    nested identifier.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.PROCESS_STEP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.PROCESS,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ProvisionAgreementRefType(MaintainableRefBaseType):
    """
    ProvisionAgreementRefType contains a set of reference fields for a provision
    agreement.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.PROVISION_AGREEMENT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.REGISTRY,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureMapRefType(ChildObjectRefBaseType):
    """
    StructureMapRefType contains fields for referencing a structure map within a
    structure set.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.STRUCTURE_MAP,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureOrUsageRefBaseType(MaintainableRefBaseType):
    """
    StructureOrUsageRefBaseType is an abstract base type for referencing a
    structure or structure usage.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    version: str = field(
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureSetRefType(MaintainableRefBaseType):
    """
    StructureSetRefType contains a set of reference fields for a structure set.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.STRUCTURE_SET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.MAPPING,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TransitionRefType(ContainerChildObjectRefBaseType):
    """
    TransitionRefType provides for a reference to a transition definition in
    process step through its id.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+(\.[A-Za-z0-9_@$\-]+)*",
        },
    )
    class_value: ObjectTypeCodelistType = field(
        init=False,
        default=ObjectTypeCodelistType.TRANSITION,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: PackageTypeCodelistType = field(
        init=False,
        default=PackageTypeCodelistType.PROCESS,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class UrnreferenceType(ReferenceType):
    """URNReferenceType is a type referencing any object via its URN.

    The exact type of object is not specified, although it can be
    determined from the URN value.

    :ivar ref: Ref is used to provide a complete set of reference
        fields. Derived reference types will restrict the RefType so
        that the content of the Ref element requires exactly what is
        needed for a complete reference.
    """

    class Meta:
        name = "URNReferenceType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    ref: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class FooterMessageType(CodedStatusMessageType):
    """FooterMessageType defines the structure of a message that is contained in
    the footer of a message.

    It is a status message that have a severity code of Error,
    Information, or Warning added to it.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer"
        )

    severity: None | SeverityCodeType = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ErrorType:
    """
    ErrorType describes the structure of an error response.

    :ivar error_message: ErrorMessage contains the error message. It can
        occur multiple times to communicate message for multiple errors,
        or to communicate the error message in parallel languages. If
        both messages for multiple errors and parallel language messages
        are used, then each error message should be given a code in
        order to distinguish message for unique errors.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    error_message: list[CodedStatusMessageType] = field(
        default_factory=list,
        metadata={
            "name": "ErrorMessage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "min_occurs": 1,
        },
    )


@dataclass
class PartyType:
    """
    PartyType defines the information which is sent about various parties such as
    senders and receivers of messages.

    :ivar name: Name is a human-readable name of the party.
    :ivar contact: Contact provides contact information for the party in
        regard to the transmission of the message.
    :ivar id: The id attribute holds the identification of the party.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    contact: list[ContactType2] = field(
        default_factory=list,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class AnnotableWhereType:
    """
    AnnotableWhereType is an abstract base type for querying an annotable artefact.

    :ivar annotation: Annotation is a parameter for matching the details
        of an annotatable object's annotations. It allows for querying
        based on the details of an annotation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    annotation: None | AnnotationWhereType = field(
        default=None,
        metadata={
            "name": "Annotation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class DataStructureComponentValueQueryType:
    """DataStructureComponentValueQueryType is an abstract base type that is the
    basis for query a data structure definition component for a particular value.

    Multiple values may be supplied, but the component value must match
    all of the value conditions supplied in order to return a match.

    :ivar id: ID provides the identifier for component for which the
        value is sought.
    :ivar numeric_value:
    :ivar text_value:
    :ivar time_value:
    :ivar value:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    numeric_value: list[NumericValue] = field(
        default_factory=list,
        metadata={
            "name": "NumericValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    text_value: list[TextValue] = field(
        default_factory=list,
        metadata={
            "name": "TextValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    value: None | Value = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MetadataAttributeValueType:
    """MetadataAttributeValueType describes the structure that is used to match
    reference metadata where a metadata attribute has a particular value.

    Metadata attribute value queries can be nested for querying nested
    metadata attributes. If no value is provided, then simply the
    presence of the metadata attribute within the given context will
    result in a match. All nested metadata attribute value conditions
    must be met to constitute a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    value: None | Value = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    text_value: list[TextValue] = field(
        default_factory=list,
        metadata={
            "name": "TextValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    numeric_value: list[NumericValue] = field(
        default_factory=list,
        metadata={
            "name": "NumericValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    metadata_attribute_value: list["MetadataAttributeValueType"] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttributeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MaintainableQueryType(VersionableQueryType):
    """
    MaintainableQueryType describes the structure of a query for a maintainable
    object.

    :ivar agency_id: The agencyID attribute is used to query for an
        object based on its maintenance agency's identifier. This is
        either an explicit value, or completely wild cared with the "%"
        value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    agency_id: str | WildCardValueType = field(
        default=WildCardValueType.VALUE,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+(\.[A-Za-z0-9_@$\-]+)*",
        },
    )


@dataclass
class SubscriptionStatusType:
    """
    SubscriptionStatusType describes the structure a status for a single
    subscription request.

    :ivar subscription_urn: SubscriptionURN contains the registry
        generated URN for the subscription, and will be returned for any
        successfully created, updated, or deleted subscription.
    :ivar subscriber_assigned_id: SubscriberAssignedID is the id
        assigned by the subscriber to the subscription. If it existed in
        the subscription request, it will be returned.
    :ivar status_message: StatusMessage provides that status for the
        subscription request, and if necessary, any error or warning
        information.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    subscription_urn: None | str = field(
        default=None,
        metadata={
            "name": "SubscriptionURN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    subscriber_assigned_id: None | str = field(
        default=None,
        metadata={
            "name": "SubscriberAssignedID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    status_message: None | StatusMessageType2 = field(
        default=None,
        metadata={
            "name": "StatusMessage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


@dataclass
class ConstraintTextFormatType(TargetObjectTextFormatType):
    """
    ConstraintTextFormatType is a restricted version of the
    NonFacetedTextFormatType that specifies a fixed AttachmentConstraintReference
    representation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: TargetObjectDataType = field(
        init=False,
        default=TargetObjectDataType.ATTACHMENT_CONSTRAINT_REFERENCE,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )


@dataclass
class DataKeySetType(KeySetType):
    """
    DataKeySetType defines a collection of full or partial data keys (dimension
    values).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class DataSetTextFormatType(TargetObjectTextFormatType):
    """
    DataSetTextFormatType is a restricted version of the NonFacetedTextFormatType
    that specifies a fixed DataSetReference representation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: TargetObjectDataType = field(
        init=False,
        default=TargetObjectDataType.DATA_SET_REFERENCE,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )


@dataclass
class IdentifiableObjectTextFormatType(TargetObjectTextFormatType):
    """
    IdentifiableObjectTextFormatType is a restricted version of the
    NonFacetedTextFormatType that specifies a fixed IdentifiableReference
    representation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: TargetObjectDataType = field(
        init=False,
        default=TargetObjectDataType.IDENTIFIABLE_REFERENCE,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )


@dataclass
class KeyDescriptorValuesTextFormatType(TargetObjectTextFormatType):
    """
    KeyDescriptorValuesTextFormatType is a restricted version of the
    NonFacetedTextFormatType that specifies a fixed KeyValues representation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: TargetObjectDataType = field(
        init=False,
        default=TargetObjectDataType.KEY_VALUES,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )


@dataclass
class MetadataKeySetType(KeySetType):
    """
    MetadataKeySetType defines a collection of metadata keys (identifier component
    values).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class SimpleComponentTextFormatType(BasicComponentTextFormatType):
    """
    SimpleComponentTextFormatType is a restricted version of the
    BasicComponentTextFormatType that does not allow for multi-lingual values.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: SimpleDataType = field(
        default=SimpleDataType.STRING,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    is_multi_lingual: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class AnnotableType:
    """AnnotableType is an abstract base type used for all annotable artefacts.

    Any type that provides for annotations should extend this type.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    annotations: None | Annotations = field(
        default=None,
        metadata={
            "name": "Annotations",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class AnyCodelistReferenceType(MaintainableReferenceBaseType):
    """AnyCodelistReferenceType is a specific type of a reference for referencing
    either a codelist or a hierarchical codelist usage.

    It consists of a URN and/or a complete set of reference fields;
    agency, id and version. If the complete set of reference fields is
    used, it is required that a class be provided so that the type of
    object referenced is clear.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AttachmentConstraintRefType(ConstraintRefType):
    """
    AttachmentConstraintRefType contains a set of reference fields for an
    attachment constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ConstraintTypeCodelistType1 = field(
        init=False,
        default=ConstraintTypeCodelistType1.ATTACHMENT_CONSTRAINT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class AttributeDescriptorRefType(ComponentListRefBaseType):
    """
    AttributeDescriptorRefType contains a reference to the attribute descriptor
    within a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    id: str = field(
        init=False,
        default="ATTRIBUTE_DESCRIPTOR",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.ATTRIBUTE_DESCRIPTOR,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AttributeRefType(ComponentRefBaseType):
    """AttributeRefType contains a reference to an attribute within a data
    structure definition.

    Note that since there is only one attribute descriptor, the
    container reference fields are prohibited.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.ATTRIBUTE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CategorisationReferenceType(MaintainableReferenceBaseType):
    """CategorisationReferenceType is a type for referencing a categorisation
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategoryRefType(ItemRefBaseType):
    """CategoryRefType references a category from within a category scheme.

    Reference fields are required for both the scheme and the item.

    :ivar maintainable_parent_id: The maintainableParentID references
        the category scheme in which the category being referenced is
        defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the category scheme in which
        the category being referenced is defined. If not supplied, a
        default value of 1.0 is assumed.
    :ivar class_value:
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.CATEGORY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CategorySchemeMapReferenceType(ChildObjectReferenceType):
    """CategorySchemeMapReferenceType is a type for referencing a category scheme
    map object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategorySchemeRefType(ItemSchemeRefBaseType):
    """
    CategorySchemeRefType provides a reference to a category scheme via a complete
    set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemSchemeTypeCodelistType = field(
        init=False,
        default=ItemSchemeTypeCodelistType.CATEGORY_SCHEME,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CodeRefType(ItemRefBaseType):
    """CodeRefType references a code from within a codelist.

    Reference fields are required for both the scheme and the item.

    :ivar maintainable_parent_id: The maintainableParentID references
        the codelist in which the code being referenced is defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the codelist in which the
        code being referenced is defined. If not supplied, a default
        value of 1.0 is assumed.
    :ivar class_value:
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.CODE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CodelistMapReferenceType(ChildObjectReferenceType):
    """CodelistMapReferenceType is a type for referencing a codelist map object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CodelistRefType(ItemSchemeRefBaseType):
    """
    CodelistRefType provides a reference to a codelist via a complete set of
    reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemSchemeTypeCodelistType = field(
        init=False,
        default=ItemSchemeTypeCodelistType.CODELIST,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ComponentListReferenceType(ChildObjectReferenceType):
    """ComponentListReferenceType is an abstract base type used for referencing
    component lists within a structure.

    It consists of a URN and/or a complete set of reference fields
    (structure agency, structure id, structure version, and component
    list id).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ComponentReferenceType(ContainerChildObjectReferenceType):
    """ComponentReferenceType is an abstract base type used for referencing
    components within a structure definition.

    It consists of a URN and/or a complete set of reference fields
    (structure agency, structure id, structure version, component list
    id, and component id).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptRefType(ItemRefBaseType):
    """ConceptRefType references a concept from within a concept scheme.

    Reference fields are required for both the scheme and the item.

    :ivar maintainable_parent_id: The maintainableParentID references
        the concept scheme in which the concept being referenced is
        defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the concept scheme in which
        the concept being referenced is defined. If not supplied, a
        default value of 1.0 is assumed.
    :ivar class_value:
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.CONCEPT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CONCEPTSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ConceptSchemeMapReferenceType(ChildObjectReferenceType):
    """ConceptSchemeMapReferenceType is a type for referencing a concept scheme map
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptSchemeRefType(ItemSchemeRefBaseType):
    """
    ConceptSchemeRefType provides a reference to a concept scheme via a complete
    set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemSchemeTypeCodelistType = field(
        init=False,
        default=ItemSchemeTypeCodelistType.CONCEPT_SCHEME,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CONCEPTSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ConstraintReferenceType(MaintainableReferenceBaseType):
    """ConstraintReferenceType is a type for referencing a constraint object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConstraintTargetRefType(ComponentRefBaseType):
    """
    ConstraintTargetRefType contains a reference to a constraint target within a
    metadata target of a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    id: str = field(
        init=False,
        default="CONSTRAINT_TARGET",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.CONSTRAINT_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ContentConstraintRefType(ConstraintRefType):
    """
    ContentConstraintRefType contains a set of reference fields for a content
    constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ConstraintTypeCodelistType1 = field(
        init=False,
        default=ConstraintTypeCodelistType1.CONTENT_CONSTRAINT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class DataSetTargetRefType(ComponentRefBaseType):
    """
    DataSetTargetRefType contains a reference to a data set target within a
    metadata target of a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    id: str = field(
        init=False,
        default="DATA_SET_TARGET",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.DATA_SET_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DimensionRefType(ComponentRefBaseType):
    """DimensionRefType contains a reference to a dimension within a data structure
    definition.

    Note that since there is only one key descriptor, the container
    reference fields are prohibited.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    class_value: DimensionTypeCodelistType = field(
        init=False,
        default=DimensionTypeCodelistType.DIMENSION,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GroupKeyDescriptorRefType(ComponentListRefBaseType):
    """
    GroupKeyDescriptorRefType contains a reference to a group key descriptor within
    a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.GROUP_DIMENSION_DESCRIPTOR,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class HierarchicalCodeReferenceType(ContainerChildObjectReferenceType):
    """HierarchicalCodeReferenceType is a type for referencing a hierarchical code
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HierarchicalCodelistReferenceType(MaintainableReferenceBaseType):
    """HierarchicalCodelistReferenceType is a type for referencing a hierarchical
    codelist object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class HierarchyReferenceType(ChildObjectReferenceType):
    """
    HierarchyReferenceType is a type for referencing a hierarchy within a
    hierarchical codelist.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class IdentifiableObjectTargetRefType(ComponentRefBaseType):
    """
    IdentifiableObjectTargetRefType contains a reference to an identifiable object
    target within a metadata target of a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.IDENTIFIABLE_OBJECT_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ItemReferenceType(ChildObjectReferenceType):
    """ItemReferenceType is an abstract base type used for referencing a particular
    item within an item scheme.

    Note that this reference also has the ability to reference items
    contained within other items inside of the item scheme. It consists
    of a URN and/or a complete set of reference fields; agency, scheme
    id (maintainableParentID), scheme version
    (maintainableParentVersion), and item id (which can be nested).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ItemSchemeRefType(ItemSchemeRefBaseType):
    """ItemSchemeRefType contains a complete set of reference fields for
    referencing any item scheme.

    The class and package a required so that the reference is explicit
    as to the exact object being referenced.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | ItemSchemeTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | ItemSchemePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ItemSchemeReferenceBaseType(MaintainableReferenceBaseType):
    """ItemSchemeReferenceBaseType is a specific type of MaintainableReference that
    is used for referencing item schemes.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class KeyDescriptorRefType(ComponentListRefBaseType):
    """
    KeyDescriptorRefType contains a reference to the key descriptor within a data
    structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    id: str = field(
        init=False,
        default="DIMENSION_DESCRIPTOR",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.DIMENSION_DESCRIPTOR,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class KeyDescriptorValuesTargetRefType(ComponentRefBaseType):
    """
    KeyDescriptorValuesTargetRefType contains a reference to a key descriptor
    values target within a metadata target of a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    id: str = field(
        init=False,
        default="DIMENSION_DESCRIPTOR_VALUES_TARGET",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.DIMENSION_DESCRIPTOR_VALUES_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LevelReferenceType(ChildObjectReferenceType):
    """LevelReferenceType is a type for referencing a level object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class LocalCategoryRefType(LocalItemRefBaseType):
    """
    LocalCategoryRefType references a category locally where the references to the
    category scheme which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.CATEGORY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalCategoryReferenceType(LocalItemReferenceType):
    """
    LocalCategoryReferenceType provides a simple references to a category where the
    identification of the category scheme which defines it is contained in another
    context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalCodeRefType(LocalItemRefBaseType):
    """
    LocalCodeRefType references a code locally where the references to the codelist
    which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.CODE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CODELIST,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalCodeReferenceType(LocalItemReferenceType):
    """
    LocalCodeReferenceType provides a simple references to a code where the
    identification of the codelist which defines it is contained in another
    context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentListComponentRefType(LocalComponentListComponentRefBaseType):
    """LocalComponentListComponentRefType provides a local reference to any
    component object within a specific component list.

    References for both of these are required as well as an indication
    of which type of type of component is being referenced via the class
    attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    local: bool = field(
        init=False,
        default=True,
        metadata={
            "type": "Attribute",
        },
    )
    class_value: None | ComponentTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | StructurePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class LocalComponentListComponentReferenceType(
    LocalComponentListComponentReferenceBaseType
):
    """
    LocalComponentListComponentReferenceType provides a simple reference to any
    type of component in a specific component list where the reference to the
    structure which defines it are provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentRefBaseType(LocalComponentListComponentRefBaseType):
    """
    LocalComponentRefBaseType is an abstract base type which provides a local
    reference to a component object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentReferenceBaseType(LocalComponentListComponentReferenceBaseType):
    """
    LocalComponentReferenceBaseType is an abstract base type which provides a
    simple reference to a component where the references to the component list
    which contains it and the structure which defines it are provided in another
    context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentReferenceType(LocalComponentListComponentReferenceBaseType):
    """
    LocalComponentReferenceType provides a simple reference to any type of
    component in a component list where the references to the component list and
    the structure which defines them are provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalConceptRefType(LocalItemRefBaseType):
    """
    LocalConceptRefType references a concept locally where the references to the
    concept scheme which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.CONCEPT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CONCEPTSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalConceptReferenceType(LocalItemReferenceType):
    """
    LocalConceptReferenceType provides a simple references to a concept where the
    identification of the concept scheme which defines it is contained in another
    context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalDataStructureComponentRefType(LocalComponentListComponentRefBaseType):
    """LocalDataStructureComponentRefType contains the reference fields for
    referencing any data structure component locally.

    This reference must specify the class of the component being
    referenced.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    class_value: None | DataStructureComponentTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalDataStructureComponentReferenceType(
    LocalComponentListComponentReferenceBaseType
):
    """
    LocalDataStructureComponentReferenceType is a type for referencing any type of
    data structure component locally, where the reference for the data structure
    definition which defines the components is available in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalGroupKeyDescriptorRefType(LocalComponentListRefBaseType):
    """
    LocalGroupKeyDescriptorRefType contains a local reference to a group key
    descriptor.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.GROUP_DIMENSION_DESCRIPTOR,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalGroupKeyDescriptorReferenceType(LocalComponentListReferenceType):
    """
    LocalGroupKeyDescriptorReferenceType is a type for referencing a group key
    descriptor locally, where the reference to the data structure definition which
    defines it is provided in another context (for example the data structure
    definition in which the reference occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalMetadataStructureComponentRefType(LocalComponentListComponentRefBaseType):
    """LocalMetadataStructureComponentRefType contains the reference fields for
    referencing any metadata structure component locally.

    This reference must specify the class of the component being
    referenced.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: None | MetadataStructureComponentTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalMetadataStructureComponentReferenceType(
    LocalComponentListComponentReferenceBaseType
):
    """
    LocalMetadataStructureComponentReferenceType is a type for referencing any type
    of metadata structure component locally, where the reference for the metadata
    structure definition which defines the components is available in another
    context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalMetadataTargetRefType(LocalComponentListRefBaseType):
    """
    LocalMetadataTargetRefType contains a local reference to a metadata target
    object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.METADATA_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalMetadataTargetReferenceType(LocalComponentListReferenceType):
    """
    LocalMetadataTargetReferenceType is a type for referencing a metadata target
    locally, where the reference to the metadata structure definition which defines
    it is provided in another context (for example the metadata structure
    definition in which the reference occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalOrganisationRefBaseType(LocalItemRefBaseType):
    """
    LocalOrganisationRefBaseType is an abstract base type that references an
    organisation locally where the reference to the organisation scheme which
    defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.BASE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalOrganisationReferenceBaseType(LocalItemReferenceType):
    """
    LocalOrganisationReferenceBaseType is an abstract base type which provides a
    simple references to an organisation, regardless of type, where the
    identification of the organisation scheme which defines it is contained in
    another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalProcessStepReferenceType(LocalIdentifiableReferenceType):
    """
    LocalProcessStepReferenceType is a type for referencing a process step locally,
    where the reference to the process which defines it is provided in another
    context (for example the metadata structure definition in which the reference
    occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalReportStructureRefType(LocalComponentListRefBaseType):
    """
    LocalReportStructureRefType contains a local reference to a report structure
    object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.REPORT_STRUCTURE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalReportStructureReferenceType(LocalComponentListReferenceType):
    """
    LocalReportStructureReferenceType is a type for referencing a report structure
    locally, where the reference to the metadata structure definition which defines
    it is provided in another context (for example the metadata structure
    definition in which the reference occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalReportingCategoryRefType(LocalItemRefBaseType):
    """
    LocalReportingCategoryRefType references a reporting category locally where the
    references to the reporting taxonomy which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.REPORTING_CATEGORY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalReportingCategoryReferenceType(LocalItemReferenceType):
    """
    LocalReportingCategoryReferenceType provides a simple references to a reporting
    category where the identification of the reporting taxonomy which defines it is
    contained in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MaintainableReferenceType(MaintainableReferenceBaseType):
    """MaintainableReferenceType is a type for referencing any maintainable object.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MeasureDescriptorRefType(ComponentListRefBaseType):
    """
    MeasureDescriptorRefType contains a reference to the measure descriptor within
    a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    id: str = field(
        init=False,
        default="MEASURE_DESCRIPTOR",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.MEASURE_DESCRIPTOR,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MeasureDimensionRefType(ComponentRefBaseType):
    """MeasureDimensionRefType contains a reference to the measure dimension within
    a data structure definition.

    Note that since there is only one key descriptor, the container
    reference fields are prohibited.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    class_value: DimensionTypeCodelistType = field(
        init=False,
        default=DimensionTypeCodelistType.MEASURE_DIMENSION,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MetadataAttributeRefType(ComponentRefBaseType):
    """
    MetadataAttributeRefType contains a reference to a metadata attribute within a
    report structure in a metadata structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.METADATA_ATTRIBUTE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MetadataTargetRefType(ComponentListRefBaseType):
    """
    MetadataTargetRefType contains a reference to a metadata target within a
    metadata structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.METADATA_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OrganisationRefBaseType(ItemRefBaseType):
    """OrganisationRefBaseType is an abstract base type which references an
    organisation from within a organisation scheme.

    Reference fields are required for both the scheme and the
    organisation.

    :ivar maintainable_parent_id: The maintainableParentID references
        the organisation scheme in which the organisation being
        referenced is defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the organisation scheme in
        which the organisation being referenced is defined. If not
        supplied, a default value of 1.0 is assumed.
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.BASE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OrganisationSchemeMapReferenceType(ChildObjectReferenceType):
    """OrganisationSchemeMapReferenceType is a type for referencing a organisation
    scheme map object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationSchemeRefBaseType(ItemSchemeRefBaseType):
    """
    OrganisationSchemeRefBaseType contains a set of reference fields for an
    organisation scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.BASE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PrimaryMeasureRefType(ComponentRefBaseType):
    """PrimaryMeasureRefType contains a reference to the primary measure within a
    data structure definition.

    Note that since there is only one key descriptor, the container
    reference fields are prohibited.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="OBS_VALUE",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.PRIMARY_MEASURE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ProcessReferenceType(MaintainableReferenceBaseType):
    """ProcessReferenceType is a type for referencing a process object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ProcessStepReferenceType(ChildObjectReferenceType):
    """ProcessStepReferenceType is a type for referencing a process step object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ProvisionAgreementReferenceType(MaintainableReferenceBaseType):
    """ProvisionAgreementReferenceType is a type for referencing a provision
    agreement.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportCategoryRefType(ItemRefBaseType):
    """
    ReportCategoryRefType contains a set of fields for referencing a reporting
    category within a reporting taxonomy.

    :ivar maintainable_parent_id: The maintainableParentID references
        the reporting taxonomy in which the reporting category being
        referenced is defined.
    :ivar maintainable_parent_version: The maintainableParentVersion
        attribute references the version of the reporting taxonomy in
        which the reporting category being referenced is defined. If not
        supplied, a default value of 1.0 is assumed.
    :ivar class_value:
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    maintainable_parent_id: None | str = field(
        default=None,
        metadata={
            "name": "maintainableParentID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    maintainable_parent_version: str = field(
        default="1.0",
        metadata={
            "name": "maintainableParentVersion",
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    class_value: ItemTypeCodelistType = field(
        init=False,
        default=ItemTypeCodelistType.REPORTING_CATEGORY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReportPeriodTargetRefType(ComponentRefBaseType):
    """
    ReportPeriodTargetRefType contains a reference to a report period target within
    a metadata target of a data structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: None | str = field(
        default=None,
        metadata={
            "name": "containerID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    id: str = field(
        init=False,
        default="REPORT_PERIOD_TARGET",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.REPORT_PERIOD_TARGET,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReportStructureRefType(ComponentListRefBaseType):
    """
    ReportStructureRefType contains a reference to a report structure within a
    metadata structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ComponentListTypeCodelistType = field(
        init=False,
        default=ComponentListTypeCodelistType.REPORT_STRUCTURE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReportingTaxonomyRefType(ItemSchemeRefBaseType):
    """
    ReportingTaxonomyRefType provides a reference to a reporting taxonomy via a
    complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: ItemSchemeTypeCodelistType = field(
        init=False,
        default=ItemSchemeTypeCodelistType.REPORTING_TAXONOMY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.CATEGORYSCHEME,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureMapReferenceType(ChildObjectReferenceType):
    """StructureMapReferenceType is a type for referencing a structure map object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureOrUsageRefType(StructureOrUsageRefBaseType):
    """
    StructureOrUsageRefType is a type for referencing a structure or structure
    usage.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | StructureOrUsageTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | StructurePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class StructureOrUsageReferenceType(MaintainableReferenceBaseType):
    """StructureOrUsageReferenceType is a specific type of a reference for
    referencing either a structure or a structure usage.

    It consists of a URN and/or a complete set of reference fields;
    agency, id and version. If the complete set of reference fields is
    used, it is required that a class and package be provided so that
    the type of object referenced is clear.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureRefBaseType(StructureOrUsageRefBaseType):
    """
    StructureRefBaseType is an abstract base type for referencing a structure.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    version: str = field(
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureReferenceBaseType(MaintainableReferenceBaseType):
    """StructureReferneceBaseType is a specific type of MaintainableReference that
    is used for referencing structure definitions.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureSetReferenceType(MaintainableReferenceBaseType):
    """StructureSetReferenceType is a type for referencing a structure set object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureUsageRefBaseType(StructureOrUsageRefBaseType):
    """
    StructureUsageRefBaseType is an abstract base type for referencing a structure
    usage.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    version: str = field(
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    local: bool = field(
        init=False,
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StructureUsageReferenceBaseType(MaintainableReferenceBaseType):
    """StructureUsageReferenceBaseType is a specific type of MaintainableReference
    that is used for referencing structure usages.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class TimeDimensionRefType(ComponentRefBaseType):
    """TimeDimensionRefType contains a reference to the time dimension within a
    data structure definition.

    Note that since there is only one key descriptor, the container
    reference fields are prohibited.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    container_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="TIME_PERIOD",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: DimensionTypeCodelistType = field(
        init=False,
        default=DimensionTypeCodelistType.TIME_DIMENSION,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TransitionReferenceType(ContainerChildObjectReferenceType):
    """TransiationReferenceType is a type for referencing a process step object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class FooterType:
    """FooterType describes the structure of a message footer.

    The footer is used to convey any error, information, or warning
    messages. This is to be used when the message has payload, but also
    needs to communicate additional information. If an error occurs and
    no payload is generated, an Error message should be returned.

    :ivar message: Message contains a single error, information, or
        warning message. A code is provided along with an optional
        severity. The text of the message can be expressed in multiple
        languages.
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer"
        )

    message: list[FooterMessageType] = field(
        default_factory=list,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
            "min_occurs": 1,
        },
    )


@dataclass
class Error(ErrorType):
    """Error is used to communicate that an error has occurred when responding to a
    request in an non-registry environment.

    The content will be a collection of error messages.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SenderType(PartyType):
    """
    SenderType extends the basic party structure to add an optional time zone
    declaration.

    :ivar timezone: Timezone specifies the time zone of the sender, and
        if specified can be applied to all un-time zoned time values in
        the message. In the absence of this, any dates without time zone
        are implied to be in an indeterminate "local time".
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    timezone: None | str = field(
        default=None,
        metadata={
            "name": "Timezone",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "pattern": r"Z|(\+|\-)(14:00|((0[0-9]|1[0-3]):[0-5][0-9]))",
        },
    )


@dataclass
class AttributeValueType(DataStructureComponentValueQueryType):
    """
    AttributeValueType is used to query for data where a given attribute has a
    particular value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    numeric_value: list[NumericValue] = field(
        default_factory=list,
        metadata={
            "name": "NumericValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    text_value: None | TextValue = field(
        default=None,
        metadata={
            "name": "TextValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    value: None | Value = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class DimensionValueType(DataStructureComponentValueQueryType):
    """
    DimensionValueType is used to query for data where a given dimension has a
    particular value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    text_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    numeric_value: list[NumericValue] = field(
        default_factory=list,
        metadata={
            "name": "NumericValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    value: None | Value = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class IdentifiableWhereType(AnnotableWhereType):
    """
    IdentifiableWhereType is an abstract base type that serves as the basis for any
    query for an identifiable object.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar id: ID is used to match the id of the identified object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: None | str = field(
        default=None,
        metadata={
            "name": "URN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    id: None | QueryIdtype = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class InputOrOutputObjectType:
    """InputOrOutputObjectType describes the structure of input or output condition
    for a process step query.

    It contains reference to an object, as will as an attribute
    indicates whether the object should be an input, output, or either
    of the two to the step.

    :ivar object_reference: ObjectReference is used to query for a
        process containing process steps where the referenced object is
        input or output to the process step.
    :ivar type_value: The type attribute is used to indicate whether the
        referenced object should be an input, output, or either of the
        two to the process step. The default for this is Any.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    object_reference: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "ObjectReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    type_value: InputOutputTypeCodeType = field(
        default=InputOutputTypeCodeType.ANY,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class MappedObjectRefType(MaintainableRefType):
    """
    MappedObjectRefType defines a set of reference fields for any type of mappable
    object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    class_value: None | MappedObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | PackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class PrimaryMeasureValueType(DataStructureComponentValueQueryType):
    """
    PrimaryMeasureValueType is used to query for data where the primary measure
    (i.e. the observed value) has a particular value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    numeric_value: list[NumericValue] = field(
        default_factory=list,
        metadata={
            "name": "NumericValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    text_value: None | TextValue = field(
        default=None,
        metadata={
            "name": "TextValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    value: None | Value = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ReferencesType:
    """ReferencesType defines the structure for indicating which referenced objects
    should be returned in a structural metadata query.

    It is possible to return both objects which reference the object(s)
    matched by the query and objects referenced from the match
    object(s). The type(s) of reference objects to be returned consists
    of a choice between None, All, Default, or an explicit list of
    object types.

    :ivar none: None indicates that no reference objects should be
        returned.
    :ivar all: All is a convenience to indicate that the sets indicated
        by the ParentsAndSiblings and Descendants should be returned.
    :ivar parents: Parents is a convenience to indicate that any object
        that refers to the matched object should be returned. This is
        typically used when the query the goal is to find object refer
        to a set of unknown objects.
    :ivar parents_and_siblings: ParentsAndSiblings is a convenience to
        indicate that any object that refers to the matched object
        should be returned, along with any other objects referenced by
        those referring objects.
    :ivar children: Children is a convenience to indicate that all
        object referred to by the matched object should be returned.
    :ivar descendants: Descendants is a convenience to indicate that all
        object referred to by the matched object should be returned,
        along with any objects referenced by the referred objects, and
        so on. This is a deep resolution, where all outgoing references
        starting at the matched object are resolved.
    :ivar specific_objects: SpecificObjects is used to enumerate
        specific types of object to be returned. Theses objects will
        either refer to or are referred by the matched object. Only the
        maintainable objects listed here will be returned.
    :ivar process_constraints: The processConstraints attribute is used
        to request that the query process any relevant constraints for
        the match object(s) in order to return only the applicable
        portion of any referenced codelists. A value of "true" indicates
        that constraints should be processed.
    :ivar detail: The detail attribute indicates the amount of detail
        that should be returned for reference objects.  A value of
        "Full" indicates that the full details of all reference objects
        should be returned. A value of "CompleteStub" indicates that the
        identification information, name, description, and annotations
        for the reference object should be returned. A value of "Stub"
        indicates that just the identification information and name
        should be returned for the reference objects.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    none: None | EmptyType = field(
        default=None,
        metadata={
            "name": "None",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    all: None | EmptyType = field(
        default=None,
        metadata={
            "name": "All",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    parents: None | EmptyType = field(
        default=None,
        metadata={
            "name": "Parents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    parents_and_siblings: None | EmptyType = field(
        default=None,
        metadata={
            "name": "ParentsAndSiblings",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    children: None | EmptyType = field(
        default=None,
        metadata={
            "name": "Children",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    descendants: None | EmptyType = field(
        default=None,
        metadata={
            "name": "Descendants",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    specific_objects: None | MaintainableObjectTypeListType = field(
        default=None,
        metadata={
            "name": "SpecificObjects",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    process_constraints: bool = field(
        default=False,
        metadata={
            "name": "processConstraints",
            "type": "Attribute",
        },
    )
    detail: MaintainableReturnDetailType = field(
        default=MaintainableReturnDetailType.FULL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReportStructureValueType:
    """ReportStructureValueType describes the structure that is used to match
    reference metadata where the metadata attributes of a report structure have
    particular values.

    All metadata attribute value conditions must be met to constitute a
    match.

    :ivar id:
    :ivar metadata_attribute_value: MetadataAttributeValue is used to
        match reference metadata where a metadata attribute has a
        particular value within the referenced report structure.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    metadata_attribute_value: list[MetadataAttributeValueType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttributeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class TimeDimensionValueType(DataStructureComponentValueQueryType):
    """
    TimeDimensionValueType is used to query for data where the time dimension has a
    particular value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    numeric_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    text_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "min_occurs": 1,
            "max_occurs": 2,
        },
    )


@dataclass
class MaintainableEventType:
    """
    MaintainableEventType provides a reference to a maintainable object's event
    with either the URN of the specific object, or a set of potentially wild-carded
    reference fields.

    :ivar urn: URN provides an explicit reference to a single object.
    :ivar ref: Ref provides a reference to potentially many object
        through the use of possible wild-carded reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    urn: None | str = field(
        default=None,
        metadata={
            "name": "URN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    ref: None | MaintainableQueryType = field(
        default=None,
        metadata={
            "name": "Ref",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )


@dataclass
class SubmitSubscriptionsResponseType1:
    """SubmitSubscriptionsResponseType describes the structure of the response to a
    new subscription submission.

    A status is provided for each subscription in the request.

    :ivar subscription_status: SubscriptionStatus contains information
        which describes the success or failure of a subscription
        request, providing any error messages in the event of failure.
        The statuses should occur in the same order as the requests when
        responding to a message with multiple subscription requests. If
        a subscriber-assigned identification for the subscription is
        provided, it will be returned to allow for accurate matching of
        the responses to the requests. A registry assigned URN will be
        returned for any successfully created, updated, or deleted
        subscription.
    """

    class Meta:
        name = "SubmitSubscriptionsResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    subscription_status: list[SubscriptionStatusType] = field(
        default_factory=list,
        metadata={
            "name": "SubscriptionStatus",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "min_occurs": 1,
        },
    )


@dataclass
class CodededTextFormatType(SimpleComponentTextFormatType):
    """CodededTextFormatType is a restricted version of the
    SimpleComponentTextFormatType that only allows factets and text types
    applicable to codes.

    Although the time facets permit any value, an actual code identifier
    does not support the necessary characters for time. Therefore these
    facets should not contain time in their values.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: None | CodeDataType = field(
        default=None,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    decimals: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CodingTextFormatType(SimpleComponentTextFormatType):
    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: None | SimpleCodeDataType = field(
        default=None,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    time_interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    start_time: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_time: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    decimals: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class NonFacetedTextFormatType(SimpleComponentTextFormatType):
    """
    NonFacetedTextFormatType is a restricted version of the
    SimpleComponentTextFormatType that does not allow for any facets.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: None | SimpleDataType = field(
        default=None,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    is_sequence: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    start_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    start_time: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_time: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    min_length: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    max_length: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    min_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    max_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    decimals: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    pattern: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class RepresentationMapType:
    """RepresentationMapType describes the structure of the mapping of the value of
    a source to component to a target component.

    Either a reference to another map defined within the containing
    structure set or a description of the source and target text formats
    must be provided. Note that for key family components, only a
    reference to a codelist map is relevant, since that is the only type
    of coded representation allowed in a key family.

    :ivar codelist_map: CodelistMap references a codelist map defined in
        the same structure set which maps the enumeration of the
        representation of the source component to the enumeration of the
        representation of the target component.
    :ivar to_text_format: ToTextFormat describes the un-coded
        representation of the target to which the value of the
        referenced component should be transformed.
    :ivar to_value_type: ToValueType notes whether the value, name, or
        description of the source value should be used in the target
        value.
    :ivar value_map: ValueMap provides for a simple mapping of a source
        value to a target value without having to define a codelist map.
        This is available to allow mappings in situations such as the
        source or target is not being formally coded, or the source
        and/or target being a measure dimension in which case its
        representation is not mappable from a codelist map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    codelist_map: None | LocalCodelistMapReferenceType = field(
        default=None,
        metadata={
            "name": "CodelistMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    to_text_format: None | TextFormatType = field(
        default=None,
        metadata={
            "name": "ToTextFormat",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    to_value_type: None | ToValueTypeType = field(
        default=None,
        metadata={
            "name": "ToValueType",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    value_map: None | ValueMapType = field(
        default=None,
        metadata={
            "name": "ValueMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class TimeTextFormatType(SimpleComponentTextFormatType):
    """
    TimeTextFormat is a restricted version of the SimpleComponentTextFormatType
    that only allows time based format and specifies a default
    ObservationalTimePeriod representation and facets of a start and end time.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: TimeDataType = field(
        default=TimeDataType.OBSERVATIONAL_TIME_PERIOD,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )
    is_sequence: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    start_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    end_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_interval: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    min_length: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    max_length: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    min_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    max_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    decimals: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    pattern: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class AgencyRefType(OrganisationRefBaseType):
    """
    AgencyRefType contains a set of reference fields for referencing an agency
    within an agency scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.AGENCY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class AgencySchemeRefType(OrganisationSchemeRefBaseType):
    """
    AgencySchemeRefType contains a set of reference fields for an agency scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationSchemeTypeCodelistType = field(
        init=False,
        default=OrganisationSchemeTypeCodelistType.AGENCY_SCHEME,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class AttachmentConstraintReferenceType(ConstraintReferenceType):
    """AttachmentConstraintReferenceType is a type for referencing a attachment
    constraint object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AttributeDescriptorReferenceType(ComponentListReferenceType):
    """AttributeDescriptorReferenceType is a type for referencing an attribute
    descriptor object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AttributeReferenceType(ComponentReferenceType):
    """AttributeReferenceType is a type for referencing an attribute object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategoryReferenceType(ItemReferenceType):
    """CategoryReferenceType is a type for referencing a category object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CategorySchemeReferenceType(ItemSchemeReferenceBaseType):
    """CategorySchemeReferenceType is a type for referencing a category scheme
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CodeReferenceType(ItemReferenceType):
    """CodeReferenceType is a type for referencing a code object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class CodelistReferenceType(ItemSchemeReferenceBaseType):
    """CodelistReferenceType is a type for referencing a codelist object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptReferenceType(ItemReferenceType):
    """ConceptReferenceType is a type for referencing a concept object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConceptSchemeReferenceType(ItemSchemeReferenceBaseType):
    """ConceptSchemeReferenceType is a type for referencing a concept scheme
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ConstraintTargetReferenceType(ComponentReferenceType):
    """ConstraintTargetReferenceType is a type for referencing a constraint target
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ContentConstraintReferenceType(ConstraintReferenceType):
    """ContentConstraintReferenceType is a type for referencing a content
    constraint object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataConsumerRefType(OrganisationRefBaseType):
    """
    DataConsumerRefType contains a set of reference fields for referencing a data
    consumer within a data consumer scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.DATA_CONSUMER,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class DataConsumerSchemeRefType(OrganisationSchemeRefBaseType):
    """
    DataConsumerSchemeRefType contains a set of reference fields for a data
    consumer scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationSchemeTypeCodelistType = field(
        init=False,
        default=OrganisationSchemeTypeCodelistType.DATA_CONSUMER_SCHEME,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class DataProviderRefType(OrganisationRefBaseType):
    """
    DataProviderRefType contains a set of reference fields for referencing a data
    provider within a data provider scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.DATA_PROVIDER,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class DataProviderSchemeRefType(OrganisationSchemeRefBaseType):
    """
    DataProviderSchemeRefType contains a set of reference fields for a data
    provider scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationSchemeTypeCodelistType = field(
        init=False,
        default=OrganisationSchemeTypeCodelistType.DATA_PROVIDER_SCHEME,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class DataSetTargetReferenceType(ComponentReferenceType):
    """DataSetTargetReferenceType is a type for referencing a data set target
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataStructureEnumerationSchemeRefType(ItemSchemeRefType):
    """
    DataStructureEnumerationSchemeRefType contains the reference fields for
    referencing any item scheme that is allowable as the enumeration of the
    representation of a data structure definition component.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | DimensionEumerationSchemeTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | ItemSchemePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class DataStructureRefType(StructureRefBaseType):
    """
    DataStructureRefType contains a set of reference fields for a data structure
    definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: StructureTypeCodelistType = field(
        init=False,
        default=StructureTypeCodelistType.DATA_STRUCTURE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DataStructureReferenceType(StructureReferenceBaseType):
    """DataStructureReferenceType is a type for referencing a data structure
    definition object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataflowRefType(StructureUsageRefBaseType):
    """
    DataflowRefType contains a set of reference fields for a data flow.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: StructureUsageTypeCodelistType = field(
        init=False,
        default=StructureUsageTypeCodelistType.DATAFLOW,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DataflowReferenceType(StructureUsageReferenceBaseType):
    """DataflowReferenceType is a type for referencing a dataflow object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DimensionReferenceType(ComponentReferenceType):
    """DimensionReferenceType is a type for referencing a dimension object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class GroupKeyDescriptorReferenceType(ComponentListReferenceType):
    """GroupKeyDescriptorReferenceType is a type for referencing a group key
    descriptor object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class IdentifiableObjectTargetReferenceType(ComponentReferenceType):
    """IdentifiableObjectTargetReferenceType is a type for referencing an
    identifiable object target object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ItemSchemeReferenceType(ItemSchemeReferenceBaseType):
    """ItemSchemeReferenceType is a reference that is used for referencing any type
    of item scheme.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class KeyDescriptorReferenceType(ComponentListReferenceType):
    """KeyDescriptorReferenceType is a type for referencing a key descriptor
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class KeyDescriptorValuesTargetReferenceType(ComponentReferenceType):
    """KeyDescriptorValuesTargetType is a type for referencing a key descriptor
    values target object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class LocalAgencyRefType(LocalOrganisationRefBaseType):
    """
    LocalAgencyRefType references an agency locally where the reference to the
    agency scheme which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.AGENCY,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class LocalAgencyReferenceType(LocalOrganisationReferenceBaseType):
    """
    LocalAgencyReferenceType provides a simple reference to an agency, where the
    reference to the agency scheme which defines it is provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalComponentRefType(LocalComponentRefBaseType):
    """
    LocalComponentRefType provides a local reference to any type component object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | ComponentTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | StructurePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class LocalDataConsumerRefType(LocalOrganisationRefBaseType):
    """
    LocalDataConsumerRefType references a data consumer locally where the reference
    to the data consumer scheme which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.DATA_CONSUMER,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class LocalDataConsumerReferenceType(LocalOrganisationReferenceBaseType):
    """
    LocalDataConsumerReferenceType provides a simple reference to a data consumer,
    where the reference to the data consumer scheme which defines it is provided in
    another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalDataProviderRefType(LocalOrganisationRefBaseType):
    """
    LocalDataProviderRefType references a data provider locally where the reference
    to the data provider scheme which defines it is provided elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.DATA_PROVIDER,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class LocalDataProviderReferenceType(LocalOrganisationReferenceBaseType):
    """
    LocalDataProviderReferenceType provides a simple reference to a data provider,
    where the reference to the data provider scheme which defines it is provided in
    another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalDimensionRefType(LocalComponentRefBaseType):
    """
    LocalDimensionRefType contains the reference fields for referencing a dimension
    locally.

    :ivar class_value: The class attribute is optional and provided a
        default value of Dimension. It is strongly recommended that if
        the time or measure dimension is referenced, that the proper
        value be set for this field. However, this is not absolutely
        necessary since all data structure definition components must
        have a unique identifier within the scope of the entire data
        structure. It does, however, allow systems which will treat such
        a reference as a URN to easily construct the URN without having
        to verify the object class of the referenced dimension.
    :ivar package:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: DimensionTypeCodelistType = field(
        default=DimensionTypeCodelistType.DIMENSION,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalDimensionReferenceType(LocalComponentReferenceBaseType):
    """
    LocalDimensionReferenceType is a type for referencing any type of dimension
    locally, where the reference to the data structure definition which defines the
    dimension is provided in another context (for example the data structure
    definition in which the reference occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalOrganisationRefType(LocalOrganisationRefBaseType):
    """LocalOrganisationRefType references an organisation locally where the
    reference to the organisation scheme which defines it is provided elsewhere.

    The reference requires that the class (i.e. the type) or the
    organisation being reference be provided.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    package: ItemSchemePackageTypeCodelistType = field(
        init=False,
        default=ItemSchemePackageTypeCodelistType.BASE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalOrganisationReferenceType(LocalOrganisationReferenceBaseType):
    """
    LocalOrganisationReferenceType provides a simple reference to an organisation,
    regardless of type, where the identification of the organisation scheme which
    defines it is contained in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalOrganisationUnitRefType(LocalOrganisationRefBaseType):
    """
    LocalOrganisationUnitRefType references an organisation unit locally where the
    reference to the organisation unit scheme which defines it is provided
    elsewhere.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.ORGANISATION_UNIT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class LocalOrganisationUnitReferenceType(LocalOrganisationReferenceBaseType):
    """
    LocalOrganisationUnitReferenceType provides a simple reference to an
    organisation unit, where the reference to the organisation unit scheme which
    defines it is provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalPrimaryMeasureRefType(LocalComponentRefBaseType):
    """
    LocalPrimaryMeasureRefType contains the reference fields for referencing a
    primary measure locally.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    id: str = field(
        init=False,
        default="OBS_VALUE",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    class_value: ComponentTypeCodelistType = field(
        init=False,
        default=ComponentTypeCodelistType.PRIMARY_MEASURE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.DATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalPrimaryMeasureReferenceType(LocalComponentReferenceBaseType):
    """
    LocalPrimaryMeasureReferenceType is a type for referencing a primary measure
    locally, where the reference to the data structure definition which defines the
    primary measure is provided in another context (for example the data structure
    definition in which the reference occurs).

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class LocalTargetObjectRefType(LocalComponentRefBaseType):
    """
    LocalTargetObjectRefType contains the reference fields for referencing a target
    object locally.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | TargetObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LocalTargetObjectReferenceType(LocalComponentReferenceBaseType):
    """
    LocalTargetObjectReferenceType is a type for referencing any type of target
    object within a metadata target locally, where the references to the metadata
    target and the  metadata structure definition which defines the target
    reference are provided in another context.

    :ivar urn: URN is used to hold the URN of the referenced object.
        This must be the same URN that would be constructed from the
        individual fields in the Ref element.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MeasureDescriptorReferenceType(ComponentListReferenceType):
    """MeasureDescriptorReferenceType is a type for referencing a measure
    descriptor object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MeasureDimensionReferenceType(ComponentReferenceType):
    """MeasureDimensionReferenceType is a type for referencing a measure dimension
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataAttributeReferenceType(ComponentReferenceType):
    """MetadataAttributeReferenceType is a type for referencing a metadata
    attribute object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataStructureRefType(StructureRefBaseType):
    """
    MetadataStructureRefType contains a set of reference fields for a metadata
    structure definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: StructureTypeCodelistType = field(
        init=False,
        default=StructureTypeCodelistType.METADATA_STRUCTURE,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MetadataStructureReferenceType(StructureReferenceBaseType):
    """MetadataStructureReferenceType is a type for referencing a metadata
    structure definition object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataTargetReferenceType(ComponentListReferenceType):
    """MetadataTargetReferenceType is a type for referencing a metadata target
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataflowRefType(StructureUsageRefBaseType):
    """
    MetadataflowRefType contains a set of reference fields for a metadata flow.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: StructureUsageTypeCodelistType = field(
        init=False,
        default=StructureUsageTypeCodelistType.METADATAFLOW,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )
    package: StructurePackageTypeCodelistType = field(
        init=False,
        default=StructurePackageTypeCodelistType.METADATASTRUCTURE,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MetadataflowReferenceType(StructureUsageReferenceBaseType):
    """MetadataflowReferenceType is a type for referencing a metadata flow object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationRefType(OrganisationRefBaseType):
    """OrganisationRefType provides a reference to any organisation via a complete
    set of reference fields.

    It is required that the class (i.e. the type) of organisation being
    referenced be specified.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | OrganisationTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class OrganisationReferenceBaseType(ItemReferenceType):
    """OrganisationReferenceBaseType is a type for referencing any organisation
    object, regardless of its type.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationSchemeRefType(OrganisationSchemeRefBaseType):
    """OrganisationSchemeRefType provides a reference to an organisation scheme via
    a complete set of reference fields.

    It is required that the class (i.e. the type) of organisation scheme
    being referenced be specified.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | OrganisationSchemeTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class OrganisationSchemeReferenceBaseType(ItemSchemeReferenceBaseType):
    """OrganisationSchemeReferenceBaseType is a type for referencing a organisation
    scheme object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationUnitRefType(OrganisationRefBaseType):
    """
    OrganisationUnitRefType contains a set of reference fields for referencing an
    organisation unit within an organisation unit scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationTypeCodelistType = field(
        init=False,
        default=OrganisationTypeCodelistType.ORGANISATION_UNIT,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class OrganisationUnitSchemeRefType(OrganisationSchemeRefBaseType):
    """
    OrganisationUnitSchemeRefType contains a set of reference fields for an
    organisation unit scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: OrganisationSchemeTypeCodelistType = field(
        init=False,
        default=OrganisationSchemeTypeCodelistType.ORGANISATION_UNIT_SCHEME,
        metadata={
            "name": "class",
            "type": "Attribute",
        },
    )


@dataclass
class PayloadStructureType:
    """PayloadStructureType is an abstract base type used to define the structural
    information for data or metadata sets.

    A reference to the structure is provided (either explicitly or
    through a reference to a structure usage).

    :ivar provision_agrement: ProvisionAgreement references a provision
        agreement which the data or metadata is reported against.
    :ivar structure_usage: StructureUsage references a flow which the
        data or metadata is reported against.
    :ivar structure: Structure references the structure which defines
        the structure of the data or metadata set.
    :ivar structure_id: The structureID attribute uniquely identifies
        the structure for the purpose of referencing it from the
        payload. This is only used in structure specific formats.
        Although it is required, it is only useful when more than one
        data set is present in the message.
    :ivar schema_url: The schemaURL attribute provides a location from
        which the structure specific schema can be located.
    :ivar namespace: The namespace attribute is used to provide the
        namespace for structure-specific formats. By communicating this
        information in the header, it is possible to generate the
        structure specific schema while processing the message.
    :ivar dimension_at_observation: The dimensionAtObservation is used
        to reference the dimension at the observation level for data
        messages. This can also be given the explicit value of
        "AllDimensions" which denotes that the cross sectional data is
        in the flat format.
    :ivar explicit_measures: The explicitMeasures indicates whether
        explicit measures are used in the cross sectional format. This
        is only applicable for the measure dimension as the dimension at
        the observation level or the flat structure.
    :ivar service_url: The serviceURL attribute indicates the URL of an
        SDMX SOAP web service from which the details of the object can
        be retrieved. Note that this can be a registry or and SDMX
        structural metadata repository, as they both implement that same
        web service interface.
    :ivar structure_url: The structureURL attribute indicates the URL of
        a SDMX-ML structure message (in the same version as the source
        document) in which the externally referenced object is
        contained. Note that this may be a URL of an SDMX RESTful web
        service which will return the referenced object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    provision_agrement: None | ProvisionAgreementReferenceType = field(
        default=None,
        metadata={
            "name": "ProvisionAgrement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structure_usage: None | StructureUsageReferenceBaseType = field(
        default=None,
        metadata={
            "name": "StructureUsage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structure: None | StructureReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structure_id: None | str = field(
        default=None,
        metadata={
            "name": "structureID",
            "type": "Attribute",
            "required": True,
        },
    )
    schema_url: None | str = field(
        default=None,
        metadata={
            "name": "schemaURL",
            "type": "Attribute",
        },
    )
    namespace: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    dimension_at_observation: None | str | ObsDimensionsCodeType = field(
        default=None,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: None | bool = field(
        default=None,
        metadata={
            "name": "explicitMeasures",
            "type": "Attribute",
        },
    )
    service_url: None | str = field(
        default=None,
        metadata={
            "name": "serviceURL",
            "type": "Attribute",
        },
    )
    structure_url: None | str = field(
        default=None,
        metadata={
            "name": "structureURL",
            "type": "Attribute",
        },
    )


@dataclass
class PrimaryMeasureReferenceType(ComponentReferenceType):
    """PrimaryMeasureReferenceType is a type for referencing a primary measure
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportPeriodTargetReferenceType(ComponentReferenceType):
    """ReportPeriodTargetReferenceType is a type for referencing a report period
    target object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportStructureReferenceType(ComponentListReferenceType):
    """ReportStructureReferenceType is a type for referencing a report structure
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportingCategoryReferenceType(ItemReferenceType):
    """ReportingCategoryReferenceType is a type for referencing a reporting
    category object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class ReportingTaxonomyReferenceType(ItemSchemeReferenceBaseType):
    """ReportingTaxonomyReferenceType is a type for referencing a reporting
    taxonomy object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureRefType(StructureRefBaseType):
    """
    StructureRefType contains a set of reference fields for referencing any
    structure.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | StructureTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | StructurePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class StructureReferenceType(StructureReferenceBaseType):
    """StructureReferenceType is a specific type of MaintainableReference that is
    used for referencing any structure.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class StructureUsageRefType(StructureUsageRefBaseType):
    """
    StructureUsageRefType contains a set of reference fields for referencing any
    structure usage.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    class_value: None | StructureUsageTypeCodelistType = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Attribute",
            "required": True,
        },
    )
    package: None | StructurePackageTypeCodelistType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class StructureUsageReferenceType(StructureUsageReferenceBaseType):
    """StructureUsageReferenceType is a specific type of MaintainableReference that
    is used for referencing any structure usages.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class TimeDimensionReferenceType(ComponentReferenceType):
    """TimeDimensionReferenceType is a type for referencing a time dimension
    object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class GroupType1(AnnotableType):
    """GroupType defines a structure which is used to communicate attribute values
    for a group defined in a data structure definition.

    The group can consist of either a subset of the dimensions defined
    by the data structure definition, or an association to an attachment
    constraint, which in turn defines key sets to which attributes can
    be attached. In the case that the group is based on an attachment
    constraint, only the identification of group is provided. It is
    expected that a system which is processing this will relate that
    identifier to the key sets defined in the constraint and apply the
    values provided for the attributes appropriately.

    :ivar group_key: GroupKey contains the values for each dimension
        defined as being a member of the referenced group in the data
        structure definition. A value must be provided for every group
        dimension. This is optional, and not used if the group is
        defined as an association to an attachment constraint rather
        than a subset of the data structure definition dimensions.
    :ivar attributes: Attributes contains the set of attribute values
        which are reported for group. The attribute values provided here
        apply to all data matching the partial key defined by the group
        key or the key sets of the associated attachment constraint.
    :ivar type_value: The type attribute holds the identifier assigned
        to the group in the data structure definition for which
        attribute values are being provided.
    """

    class Meta:
        name = "GroupType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    group_key: None | ValuesType = field(
        default=None,
        metadata={
            "name": "GroupKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    attributes: None | ValuesType = field(
        default=None,
        metadata={
            "name": "Attributes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
            "required": True,
        },
    )
    type_value: None | str = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ObsOnlyType(AnnotableType):
    """ObsOnlyType defines the structure for an un-grouped observation.

    Unlike a group observation, an un-grouped must provided a full set
    of values for every dimension declared in the data structure
    definition. The observation can contain an observed value and/or a
    collection of attribute values.

    :ivar obs_key: ObsKey contains the values for every dimension
        defined in the data structure definition. A value must be
        provided for each dimension. This key serves to disambiguate the
        un-grouped observation within the data set.
    :ivar obs_value: ObsValue type contains the value for the
        observation.
    :ivar attributes: Attributes contains the set of values reported for
        the attributes which have an association with the primary
        measure or any dimension in the data structure definition (so
        long as an attachment group is not also specified).
    """

    class Meta:
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    obs_key: None | ValuesType = field(
        default=None,
        metadata={
            "name": "ObsKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
            "required": True,
        },
    )
    obs_value: None | ObsValueType = field(
        default=None,
        metadata={
            "name": "ObsValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    attributes: None | ValuesType = field(
        default=None,
        metadata={
            "name": "Attributes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )


@dataclass
class ObsType1(AnnotableType):
    """ObsType defines the structure of a grouped observation.

    The observation must be provided a value for the dimension which is
    declared to be at the observation level for this data set. This
    dimension value should disambiguate the observation within the
    series in which it is defined (i.e. there should not be another
    observation with the same dimension value). The observation can
    contain an observed value and/or attribute values.

    :ivar obs_dimension: ObsDimension holds the key for the grouped
        observation, i.e. the value of the observation dimension. Note
        that in this element, the reference to the dimension is
        optional, since it can be inferred from the structure
        specification for the data set. This saves having to repeat the
        value unnecessarily. It is assumed that any application
        processing the data set will have the information from the
        structure specification available, so that if a dimension
        identifier is not supplied here, the proper reference can be
        applied.
    :ivar obs_value: ObsValue type contains the value for the
        observation.
    :ivar attributes: Attributes contains the set of values reported for
        the attributes which have an association with the primary
        measure or the observations dimension (so long as an attachment
        group is not also specified).
    """

    class Meta:
        name = "ObsType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    obs_dimension: None | BaseValueType = field(
        default=None,
        metadata={
            "name": "ObsDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
            "required": True,
        },
    )
    obs_value: None | ObsValueType = field(
        default=None,
        metadata={
            "name": "ObsValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    attributes: None | ValuesType = field(
        default=None,
        metadata={
            "name": "Attributes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )


@dataclass
class GroupType2(AnnotableType):
    """<ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">GroupType is the abstract type which defines a structure which is used to communicate attribute values for a group defined in a data structure definition. The group can consist of either a subset of the dimensions defined by the data structure definition, or an association to an attachment constraint, which in turn defines key sets to which attributes can be attached. In the case that the group is based on an attachment constraint, only the identification of group is provided. It is expected that a system which is processing this will relate that identifier to the key sets defined in the constraint and apply the values provided for the attributes appropriately.</ns1:p>
    <ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">Data structure definition schemas will drive types based on this for each group defined in the data structure definition. Both the dimension values which make up the key (if applicable) and the attribute values associated with the group will be represented with XML attributes. This is specified in the content model with the declaration of anyAttributes in the "local" namespace. The derived group type will refine this structure so that the attributes are explicit. The XML attributes will be given a name based on the attribute's identifier. These XML attributes will be unqualified (meaning they do not have a namespace associated with them). The dimension XML attributes will be required while the attribute XML attributes will be optional. To allow for generic processing, it is required that the only unqualified XML attributes in the derived group type be for the group dimensions and attributes declared in the data structure definition. If additional attributes are required, these should be qualified with a namespace so that a generic application can easily distinguish them as not being meant to represent a data structure definition dimension or attribute.</ns1:p>

    :ivar type_value: The type attribute reference the identifier of the
        group as defined in the data structure definition. This is
        optional, but derived group types will provide a fixed value for
        this so that it always available in the post validation
        information set. This allows the group to be processed in a
        generic manner.
    :ivar reporting_year_start_day: The REPORTING_YEAR_START_DAY
        attribute is an explict attribute for the reporting year start
        day, which provides context to the time dimension when its value
        contains a reporting period (e.g. 2010-Q1). This attribute is
        used to state the month and day that the reporting year begins
        (e.g. --07-01 for July 1st). In the absence of an explicit value
        provided in this attribute, all reporting period values will be
        assumed to be based on a reporting year start day of January 1.
        This is declared in the base schema since it has a fixed
        identifier and representation. The derived group types may
        either require or prohibit this attribute, depending on whether
        the data structure declared the reporting year start day
        attribute and if so, the attribute relationship and assignment
        status assigned to it.
    :ivar local_attributes:
    """

    class Meta:
        name = "GroupType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    type_value: None | str = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    reporting_year_start_day: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "REPORTING_YEAR_START_DAY",
            "type": "Attribute",
        },
    )
    local_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##local",
        },
    )


@dataclass
class ObsType2(AnnotableType):
    """<ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">ObsType is the abstract type which defines the structure of a grouped or un-grouped observation. The observation must be provided a key, which is either a value for the dimension which is declared to be at the observation level if the observation is grouped, or a full set of values for all dimensions in the data structure definition if the observation is un-grouped. This key should disambiguate the observation within the context in which it is defined (e.g. there should not be another observation with the same dimension value in a series). The observation can contain an observed value and/or attribute values.</ns1:p>
    <ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">Data structure definition schemas will drive a type or types based on this that is specific to the data structure definition and the variation of the format being expressed in the schema. The dimension value(s) which make up the key and the attribute values associated with the key dimension(s) or the primary measure will be represented with XML attributes. This is specified in the content model with the declaration of anyAttributes in the "local" namespace. The derived observation type will refine this structure so that the attributes are explicit. The XML attributes will be given a name based on the attribute's identifier. These XML attributes will be unqualified (meaning they do not have a namespace associated with them). The dimension XML attribute(s) will be required while the attribute XML attributes will be optional. To allow for generic processing, it is required that the only unqualified XML attributes in the derived observation type be for the observation dimension(s) and attributes declared in the data structure definition. If additional attributes are required, these should be qualified with a namespace so that a generic application can easily distinguish them as not being meant to represent a data structure definition dimension or attribute.</ns1:p>
    <ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">If the data structure definition specific schema requires that explicit measures be used (only possible when the measure dimension is specified at the observation), then there will be types derived for each measure defined by the measure dimension. In this case, the types will be specific to each measure, which is to say that the representation of the primary measure (i.e. the observed value) will be restricted to that which is specified by the specific measure.</ns1:p>

    :ivar type_value: The type attribute is used when the derived format
        requires that explicit measure be used. In this case, the
        derived type based on the measure will fix this value to be the
        identification of the measure concept. This will not be
        required, but since it is fixed it will be available in the post
        validation information set which will allow for generic
        processing of the data. If explicit measures are not used, then
        the derived type will prohibit the use of this attribute.
    :ivar time_period: The TIME_PERIOD attribute is an explicit
        attribute for the time dimension. This is declared in the base
        schema since it has a fixed identifier and representation. The
        derived series type will either require or prohibit this
        attribute, depending on whether time is the observation
        dimension. If the time dimension specifies a more specific
        representation of time the derived type will restrict the type
        definition to the appropriate type.
    :ivar reporting_year_start_day: The REPORTING_YEAR_START_DAY
        attribute is an explict attribute for the reporting year start
        day, which provides context to the time dimension when its value
        contains a reporting period (e.g. 2010-Q1). This attribute is
        used to state the month and day that the reporting year begins
        (e.g. --07-01 for July 1st). In the absence of an explicit value
        provided in this attribute, all reporting period values will be
        assumed to be based on a reporting year start day of January 1.
        This is declared in the base schema since it has a fixed
        identifier and representation. The derived observation type may
        either require or prohibit this attribute, depending on whether
        the data structure declared the reporting year start day
        attribute and if so, the attribute relationship and assignment
        status assigned to it.
    :ivar obs_value: The OBS_VALUE attribute is an explicit attribute
        for the primary measure, which is intended to hold the value for
        the observation. This is declared in the base schema since it
        has a fixed identifier. This attribute is un-typed, since the
        representation of the observed value can vary widely. Derived
        types will restrict this to be a type based on the
        representation of the primary measure. In the case that an
        explicit measure is used, the derived type for a given measure
        might further restrict the type of the primary measure to be
        more specific to the core representation for the measure
        concept. Note that it is required that in the case of multiple
        measures being used, that the representation of the primary
        measure is broad enough to handle the various representations of
        the measure concepts.
    :ivar local_attributes:
    """

    class Meta:
        name = "ObsType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    type_value: None | str = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    time_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "TIME_PERIOD",
            "type": "Attribute",
            "pattern": r".{5}A1.*",
        },
    )
    reporting_year_start_day: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "REPORTING_YEAR_START_DAY",
            "type": "Attribute",
        },
    )
    obs_value: None | object = field(
        default=None,
        metadata={
            "name": "OBS_VALUE",
            "type": "Attribute",
        },
    )
    local_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##local",
        },
    )


@dataclass
class Footer(FooterType):
    """
    Footer is used to communicate information such as error and warnings after the
    payload of a message.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer"


@dataclass
class ReportedAttributeType1(AnnotableType):
    """ReportedAttributeType defines the structure for a reported metadata
    attribute.

    A value for the attribute can be supplied as either a single value,
    or multi-lingual text values (either structured or unstructured). An
    optional set of child metadata attributes is also available if the
    metadata attribute definition defines nested metadata attributes.

    :ivar text: Text is used to supply parallel multi-lingual textual
        values for the reported metadata attribute. This will be used if
        the text format of the metadata attribute has a type of string
        and the multi-lingual value is set to true.
    :ivar structured_text: StructuredText is used to supply parallel
        multi-lingual structured (as XHTML) textual values for the
        reported metadata attribute. This will be used if the text
        format of the metadata attribute has a type of XHTML and the
        multi-lingual value is set to true.
    :ivar attribute_set: AttributeSet contains the reported metadata
        attribute values for the child metadata attributes.
    :ivar id: The id attribute identifies the metadata attribute that
        the value is being reported for.
    :ivar value: The value attribute holds any simple value for the
        metadata attribute.
    """

    class Meta:
        name = "ReportedAttributeType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic"
        )

    text: list[Text] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structured_text: list[StructuredText] = field(
        default_factory=list,
        metadata={
            "name": "StructuredText",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    attribute_set: None | AttributeSetType = field(
        default=None,
        metadata={
            "name": "AttributeSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    value: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReportedAttributeType2(AnnotableType):
    """ReportedAttributeType is an abstract base type that forms the basis for a
    metadata structure specific metadata attribute.

    A value for the attribute can be supplied as either a single value,
    or multi-lingual text values (either structured or unstructured). An
    optional set of child metadata attributes is also available if the
    metadata attribute definition defines nested metadata attributes.
    The metadata structure definition specific schema will refine this
    type for each metadata attribute such that the content can be
    validation against what is defined in the metadata structure
    definition.

    :ivar text: Text is used to supply parallel multi-lingual textual
        values for the reported metadata attribute. This will be used if
        the text format of the metadata attribute has a type of string
        and the multi-lingual value is set to true.
    :ivar structured_text: StructuredText is used to supply parallel
        multi-lingual structured (as XHTML) textual values for the
        reported metadata attribute. This will be used if the text
        format of the metadata attribute has a type of XHTML and the
        multi-lingual value is set to true. If the multi-lingual flag is
        not set to true, it is expected that the maximum occurrence of
        this will be refined to be 1 in the metadata structure
        definition specific schema.
    :ivar attribute_set: AttributeSet contains the reported metadata
        attribute values for the child metadata attributes. This element
        is unqualified and un-typed so that it can refined by the
        metadata structure definition specific schema to validate that
        the reported metadata attributes conform to those prescribed by
        the metadata attribute definition. The content of this must be
        element only, and these elements must always represent a
        reported attribute. Since this can not be strictly enforced in
        XML Schema, additional steps have been added to make generic
        processing of this element simpler. When processing this
        element, any element found with the attribute
        isMetadataAttribute in this target namespace is assumed to be a
        reported metadata attribute and can be processed as such.
    :ivar id: The id attribute identifies the metadata attribute that
        the value is being reported for. This is optional and not
        expected to be supplied as the metadata structure definition
        specific schema will specify a fixed value such that the
        reference to the metadata attribute will always be available if
        required for processing.
    :ivar value: The value attribute holds any simple value for the
        metadata attribute. This attribute is un-typed such that the
        metadata structure definition specific schema can specify any
        simple type according the text format / local representation
        defined by the metadata structure definition.
    :ivar is_metadata_attribute: The isMetadataAttribute attribute is a
        fixed boolean (true) and is intended to designate to processing
        applications that a given element represents a reported
        attribute. This attribute is qualified (meaning that it will be
        qualified in an instance with the target namespace) to ensure
        that it can be properly identified by applications. The purpose
        of this is to allow applications to identify elements with
        unknown names as reported attributes so that they may process a
        metadata structure definition specific  instance without
        knowledge of the underlying metadata structure definition.
    """

    class Meta:
        name = "ReportedAttributeType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific"

    text: list[Text] = field(
        default_factory=list,
        metadata={
            "name": "Text",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structured_text: list[StructuredText] = field(
        default_factory=list,
        metadata={
            "name": "StructuredText",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    attribute_set: None | object = field(
        default=None,
        metadata={
            "name": "AttributeSet",
            "type": "Element",
            "namespace": "",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    value: None | object = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    is_metadata_attribute: bool = field(
        init=False,
        default=True,
        metadata={
            "name": "isMetadataAttribute",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )


@dataclass
class MappedObjectReferenceType(MaintainableReferenceType):
    """MappedObjectReferenceType is a type for referencing any mappable object.

    It consists of a URN and/or a complete set of reference fields;
    agency, id, and version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class NameableWhereType(IdentifiableWhereType):
    """
    NameableWhereType is an abstract base type that serves as the basis for any
    query for a nameable object.

    :ivar name: Name is used to match the name of the identified object.
        It may occur multiple times for its usage within an or-query or
        for multi-lingual searches, however if multiple values are
        supplied in an and-query (explicit or implicit), each name
        search will have to be found in order to constitute a match. The
        value here can either be an explicit value (exact match) or a
        regular expression pattern on which to match.
    :ivar description: Description is used to match the description of
        the identified object. It may occur multiple times for its usage
        within an or-query or for multi-lingual searches, however if
        multiple values are supplied in an and-query (explicit or
        implicit), each description search will have to be found in
        order to constitute a match. The value here can either be an
        explicit value (exact match) or a regular expression pattern on
        which to match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    name: None | QueryTextType = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    description: None | QueryTextType = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ProcessStepWhereType(IdentifiableWhereType):
    """ProcessStepWhereType defines a set of parameters for matching a category.

    All supplied parameters must be matched in order for an object to
    satisfy the query. In addition to the base item parameters, there
    are also parameters for matching based on the objects which serve as
    the input or output to the process step.

    :ivar input_or_output_object: InputOrOutputObject is a parameter for
        matching a process step based on the referenced object, and
        whether it is an input or an output to the step.
    :ivar process_step_where: ProcessStepWhere is used to query for
        process steps within a the particular process step. This is an
        implicit set of "and" parameters, meaning all of the conditions
        must be met in order to return a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    input_or_output_object: list[InputOrOutputObjectType] = field(
        default_factory=list,
        metadata={
            "name": "InputOrOutputObject",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    process_step_where: list["ProcessStepWhereType"] = field(
        default_factory=list,
        metadata={
            "name": "ProcessStepWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class StructureReturnDetailsType(StructureReturnDetailsBaseType):
    """
    StructureReturnDetailsType defines the structure of the return details for any
    structural metadata query.

    :ivar references: References is used to communicate how objects that
        reference or are referenced by the object(s) being queried
        should be returned.
    :ivar return_matched_artefact: The returnMatchedArtefact attribute
        indicates whether the object(s) match by the query should be
        returned. If this is set to false, only the reference objects
        from the match object(s) will be returned.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    references: None | ReferencesType = field(
        default=None,
        metadata={
            "name": "References",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    return_matched_artefact: bool = field(
        default=True,
        metadata={
            "name": "returnMatchedArtefact",
            "type": "Attribute",
        },
    )


@dataclass
class RegistrationType:
    """Registration provides the information needed for data and reference metadata
    set registration.

    A data source must be supplied here if not already provided in the
    provision agreement. The data set or metadata set must be associated
    with a provision agreement,  a metadata flow, or a dataflow
    definition. If possible, the provision agreement should be
    specified. Only in cases where this is not possible should the
    dataflow or metadata flow be used.

    :ivar provision_agreement: ProvisionAgreement provides a reference
        to the provision agreement that the data is being registered
        against.
    :ivar datasource: Datasource identifies the data source(s) where the
        registered data can be retrieved.
    :ivar id: The id attribute holds a registry assigned identification
        for the registration. This must be provided in a response
        message (unless an error occurred while submitting a new
        registration), and should be included when updating or deleting
        a registration.
    :ivar valid_from: The validFrom attribute provides an inclusive
        start date for providing supplemental validity information about
        the registration, so that data visibility from the registry can
        be controlled by the registrant.
    :ivar valid_to: The validFrom attribute provides an inclusive end
        date for providing supplemental validity information about the
        registration, so that data visibility from the registry can be
        controlled by the registrant.
    :ivar last_updated: The lastUpdated attribute provides a timestamp
        for the last time the data source was updated.
    :ivar index_time_series: The indexTimeSeries, if true, indicates
        that the registry must index all time series for the registered
        data. The default value is false, and the attribute will always
        be assumed false when the provision agreement references a
        metadata flow.
    :ivar index_data_set: The indexDataSet, if true, indicates that the
        registry must index the range of actual (present) values for
        each dimension of the data set or identifier component of the
        metadata set (as indicated in the set's structure definition).
        The default value is false.
    :ivar index_attributes: The indexAttributes, if true, indicates that
        the registry must index the range of actual (present) values for
        each attribute of the data set or the presence of the metadata
        attributes of the metadata set (as indicated in the set's
        structure definition). The default value is false.
    :ivar index_reporting_period: The indexReportingPeriod, if true,
        indicates that the registry must index the time period ranges
        for which data is present for the data source. The default value
        is false, and the attribute will always be assumed false when
        the provision agreement references a metadata flow.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    provision_agreement: None | ProvisionAgreementReferenceType = field(
        default=None,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    datasource: None | DataSourceType = field(
        default=None,
        metadata={
            "name": "Datasource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    valid_from: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFrom",
            "type": "Attribute",
        },
    )
    valid_to: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validTo",
            "type": "Attribute",
        },
    )
    last_updated: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "lastUpdated",
            "type": "Attribute",
        },
    )
    index_time_series: bool = field(
        default=False,
        metadata={
            "name": "indexTimeSeries",
            "type": "Attribute",
        },
    )
    index_data_set: bool = field(
        default=False,
        metadata={
            "name": "indexDataSet",
            "type": "Attribute",
        },
    )
    index_attributes: bool = field(
        default=False,
        metadata={
            "name": "indexAttributes",
            "type": "Attribute",
        },
    )
    index_reporting_period: bool = field(
        default=False,
        metadata={
            "name": "indexReportingPeriod",
            "type": "Attribute",
        },
    )


@dataclass
class SubmittedStructureType:
    """SubmittedStructureType generally references a submitted structural object.

    When used in a submit structure request, its purpose is to override
    the default action or external dependency resolution behavior. If
    neither of these indicators are set, then it will be ignored. In a
    submit structure response, it is used to reference a submitted
    object for the purpose of providing a status for the submission. In
    this case, the action attribute should be populated in order to echo
    the requested action.

    :ivar maintainable_object:
    :ivar action: The action attribute will indicate the action to be
        taken on the referenced structural object. This should be
        provided when this structure is used in a submit structure
        response.
    :ivar external_dependencies: The externalDependencies attribute
        should be set to true if the repository is expected to use
        external reference URLs in the structural components to retrieve
        objects on which the referenced object has dependencies. (Thus,
        if a key family referenced here is being submitted to the
        repository, and the structure message has URLs which point to
        the locations of the codelists it uses, then this attribute
        should be set to true). This should not be provided when this
        structure is used in a submit structure response.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    maintainable_object: None | MaintainableReferenceType = field(
        default=None,
        metadata={
            "name": "MaintainableObject",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    external_dependencies: None | bool = field(
        default=None,
        metadata={
            "name": "externalDependencies",
            "type": "Attribute",
        },
    )


@dataclass
class ComponentMapType(AnnotableType):
    """
    ComponentMapType defines the structure for relating a component in a source
    structure to a component in a target structure.

    :ivar source:
    :ivar target:
    :ivar representation_mapping: RepresentationMapping describes the
        mapping rules to map the value of the source component to the
        target component. Note that is a representation mapping is not
        supplied, then the value of the source component is mapped
        directly to the value of the target component without any
        manipulation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | LocalComponentListComponentReferenceType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    target: None | LocalComponentListComponentReferenceType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    representation_mapping: None | RepresentationMapType = field(
        default=None,
        metadata={
            "name": "RepresentationMapping",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ComputationType(AnnotableType):
    """
    ComputationType describes a computation in a process.

    :ivar description: Description describe the computation in any form
        desired by the user (these are informational rather than
        machine-actionable), and so may be supplied in multiple,
        parallel-language versions,
    :ivar local_id: The localID attribute is an optional identification
        for the computation within the process.
    :ivar software_package: The softwarePackage attribute holds the name
        of the software package that is used to perform the computation.
    :ivar software_language: The softwareLanguage attribute holds the
        coding language that the software package used to perform the
        computation is written in.
    :ivar software_version: The softwareVersion attribute hold the
        version of the software package that is used to perform that
        computation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    description: list[Description] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )
    local_id: None | str = field(
        default=None,
        metadata={
            "name": "localID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    software_package: None | str = field(
        default=None,
        metadata={
            "name": "softwarePackage",
            "type": "Attribute",
        },
    )
    software_language: None | str = field(
        default=None,
        metadata={
            "name": "softwareLanguage",
            "type": "Attribute",
        },
    )
    software_version: None | str = field(
        default=None,
        metadata={
            "name": "softwareVersion",
            "type": "Attribute",
        },
    )


@dataclass
class HybridCodeMapType(AnnotableType):
    """CodeMapType defines the structure for associating a code from a source
    codelist to a code in a target codelist.

    Note that either of these may come from a hierarchical codelist.

    :ivar source: Source provides a local reference to the code which is
        to be mapped. If this code is from a hierarchical codelist, a
        reference to the hierarchy in which it is defined must also be
        provided.
    :ivar target: Target provides a local reference to the code to which
        the source code is mapped. If this code is from a hierarchical
        codelist, a reference to the hierarchy in which it is defined
        must also be provided.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | AnyLocalCodeReferenceType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    target: None | AnyLocalCodeReferenceType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class IdentifiableType(AnnotableType):
    """
    IdentifiableType is an abstract base type for all identifiable objects.

    :ivar id: The id is the identifier for the object.
    :ivar urn: The urn attribute holds a valid SDMX Registry URN (see
        SDMX Registry Specification for details).
    :ivar uri: The uri attribute holds a URI that contains a link to a
        resource with additional information about the object, such as a
        web page. This uri is not a SDMX message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    urn: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    uri: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class InputOutputType(AnnotableType):
    """InputOutputType describes the structure of an input or output to a process
    step.

    It provides a reference to the object that is the input or output.

    :ivar object_reference: ObjectReference is an abstract substitution
        head that references the object that is an input or output. It
        is substituted with a concrete reference to an explicit object
        type.
    :ivar local_id: The localID attribute is an optional identification
        for the input or output within the process.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    object_reference: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "ObjectReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    local_id: None | str = field(
        default=None,
        metadata={
            "name": "localID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ItemAssociationType(AnnotableType):
    """
    ItemAssociationType is an abstract type which defines the relationship between
    two items from the source and target item schemes of an item scheme map.

    :ivar source: Source provides a local reference (id only) to an item
        from the source item scheme in the item scheme map which is
        being mapped to another item.
    :ivar target: Target provides a local reference (id only) to an item
        from the target item scheme in the item scheme map which is
        being mapped from another item.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | LocalItemReferenceType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    target: None | LocalItemReferenceType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class ReportingYearStartDayTextFormatType(NonFacetedTextFormatType):
    """ReportingYearStartDayTextFormatType is a restricted version of the
    NonFacetedTextFormatType that fixes the value of the text type to be DayMonth.

    This type exists solely for the purpose of fixing the representation
    of the reporting year start day attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_type: SimpleDataType = field(
        init=False,
        default=SimpleDataType.MONTH_DAY,
        metadata={
            "name": "textType",
            "type": "Attribute",
        },
    )


@dataclass
class RepresentationType:
    """RepresentationType is an abstract type that defines a representation.

    Because the type of item schemes that are allowed as the an
    enumeration vary based on the object in which this is defined, this
    type is abstract to force that the enumeration reference be
    restricted to the proper type of item scheme reference.

    :ivar text_format: TextFormat describes an uncoded textual format.
    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_format: None | TextFormatType = field(
        default=None,
        metadata={
            "name": "TextFormat",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    enumeration: None | ItemSchemeReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Enumeration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    enumeration_format: None | CodededTextFormatType = field(
        default=None,
        metadata={
            "name": "EnumerationFormat",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class AgencyReferenceType(OrganisationReferenceBaseType):
    """AgencyReferenceType is a type for referencing an agency.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class AgencySchemeReferenceType(OrganisationSchemeReferenceBaseType):
    """AgencySchemeReferenceType is a type for referencing an agency scheme object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataConsumerReferenceType(OrganisationReferenceBaseType):
    """DataConsumerReferenceType is a type for referencing a data consumer.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataConsumerSchemeReferenceType(OrganisationSchemeReferenceBaseType):
    """DataConsumerSchemeReferenceType is a type for referencing a data consumer
    scheme object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataProviderReferenceType(OrganisationReferenceBaseType):
    """DataProviderReferenceType is a type for referencing a data provider.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataProviderSchemeReferenceType(OrganisationSchemeReferenceBaseType):
    """DataProviderSchemeReferenceType is a type for referencing a data provider
    scheme object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataStructureEnumerationSchemeReferenceType(ItemSchemeReferenceType):
    """DataStructureEnumerationSchemeReferenceType is a type for referencing any
    type of item scheme that is allowable as the enumeration of the representation
    of a data structure definition component.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class DataStructureType1(PayloadStructureType):
    """
    DataStructureType is an abstract base type the forms the basis for the
    structural information for a data set.
    """

    class Meta:
        name = "DataStructureType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class MetadataStructureType1(PayloadStructureType):
    """MetadataStructureType is an abstract base type the forms the basis of the
    structural information for any metadata message.

    A reference to the metadata structure definition or a metadataflow
    must be provided. This can be used to determine the structure of the
    message.
    """

    class Meta:
        name = "MetadataStructureType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    dimension_at_observation: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    explicit_measures: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class OrganisationReferenceType(OrganisationReferenceBaseType):
    """OrganisationReferenceType references an organisation regardless of the
    specific type.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationSchemeReferenceType(OrganisationSchemeReferenceBaseType):
    """OrganisationSchemeReferenceType references an organisation scheme regardless
    of the specific type.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationUnitReferenceType(OrganisationReferenceBaseType):
    """OrganisationUnitReferenceType is a type for referencing an organisation
    unit.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class OrganisationUnitSchemeReferenceType(OrganisationSchemeReferenceBaseType):
    """OrganisationUnitSchemeReferenceType is a type for referencing an
    organisation unit scheme object.

    It consists of a URN and/or a complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"


@dataclass
class SeriesType1(AnnotableType):
    """SeriesType defines a structure which is used to group a collection of
    observations which have a key in common.

    The key for a series is every dimension defined in the data
    structure definition, save the dimension declared to be at the
    observation level for this data set. In addition to observations,
    values can be provided for attributes which are associated with the
    dimensions which make up this series key (so long as the attributes
    do not specify a group attachment or also have an relationship with
    the observation dimension). It is possible for the series to contain
    only observations or only attribute values, or both.

    :ivar series_key: SeriesKey contains the values for each all
        dimensions defined in the data structure definition, except for
        that which is declared to be at the observation level for this
        data set. This key is required, and every dimension must be
        provided a value.
    :ivar attributes: Attributes contains the values for attributes
        which are associated with the dimensions which make up the
        series key, so long as the attributes do not also specify an
        attachment group or have a relationship with the observation
        dimension.
    :ivar obs: Obs contains an observation which shares the
        dimensionality of the series key. These observations are
        disambiguated from one another within this series by a single
        dimension value provided for each dimension. The dimension which
        provides this observation key is declared in the structure
        specification for the data set, which is provided in the header
        of the data message.
    """

    class Meta:
        name = "SeriesType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    series_key: None | ValuesType = field(
        default=None,
        metadata={
            "name": "SeriesKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
            "required": True,
        },
    )
    attributes: None | ValuesType = field(
        default=None,
        metadata={
            "name": "Attributes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    obs: list[ObsType1] = field(
        default_factory=list,
        metadata={
            "name": "Obs",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )


@dataclass
class TimeSeriesObsType1(ObsType1):
    """TimeSeriesObsType defines the structure of a time series observation.

    The observation must be provided a value for the time dimension.
    This time value should disambiguate the observation within the
    series in which it is defined (i.e. there should not be another
    observation with the same time value). The observation can contain
    an observed value and/or attribute values.
    """

    class Meta:
        name = "TimeSeriesObsType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )


@dataclass
class SeriesType2(AnnotableType):
    """<ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">SeriesType is the abstract type which defines a structure which is used to group a collection of observations which have a key in common. The key for a series is every dimension defined in the data structure definition, save the dimension declared to be at the observation level for this data set. In addition to observations, values can be provided for attributes which are associated with the dimensions which make up this series key (so long as the attributes do not specify a group attachment or also have an relationship with the observation dimension). It is possible for the series to contain only observations or only attribute values, or both.</ns1:p>
    <ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">Data structure definition schemas will drive a type based on this that is specific to the data structure definition and the variation of the format being expressed in the schema. Both the dimension values which make up the key and the attribute values associated with the key dimensions will be represented with XML attributes. This is specified in the content model with the declaration of anyAttributes in the "local" namespace. The derived series type will refine this structure so that the attributes are explicit. The XML attributes will be given a name based on the attribute's identifier. These XML attributes will be unqualified (meaning they do not have a namespace associated with them). The dimension XML attributes will be required while the attribute XML attributes will be optional. To allow for generic processing, it is required that the only unqualified XML attributes in the derived group type be for the series dimensions and attributes declared in the data structure definition. If additional attributes are required, these should be qualified with a namespace so that a generic application can easily distinguish them as not being meant to represent a data structure definition dimension or attribute.</ns1:p>

    :ivar obs:
    :ivar time_period: The TIME_PERIOD attribute is an explict attribute
        for the time dimension. This is declared in the base schema
        since it has a fixed identifier and representation. The derived
        series type will either require or prohibit this attribute,
        depending on whether time is the observation dimension. If the
        time dimension specifies a more specific representation of time
        the derived type will restrict the type definition to the
        appropriate type.
    :ivar reporting_year_start_day: The REPORTING_YEAR_START_DAY
        attribute is an explict attribute for the reporting year start
        day, which provides context to the time dimension when its value
        contains a reporting period (e.g. 2010-Q1). This attribute is
        used to state the month and day that the reporting year begins
        (e.g. --07-01 for July 1st). In the absence of an explicit value
        provided in this attribute, all reporting period values will be
        assumed to be based on a reporting year start day of January 1.
        This is declared in the base schema since it has a fixed
        identifier and representation. The derived series type may
        either require or prohibit this attribute, depending on whether
        the data structure declared the reporting year start day
        attribute and if so, the attribute relationship and assignment
        status assigned to it.
    :ivar local_attributes:
    """

    class Meta:
        name = "SeriesType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    obs: list[ObsType2] = field(
        default_factory=list,
        metadata={
            "name": "Obs",
            "type": "Element",
            "namespace": "",
        },
    )
    time_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "TIME_PERIOD",
            "type": "Attribute",
            "pattern": r".{5}A1.*",
        },
    )
    reporting_year_start_day: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "REPORTING_YEAR_START_DAY",
            "type": "Attribute",
        },
    )
    local_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##local",
        },
    )


@dataclass
class TimeSeriesObsType2(ObsType2):
    """TimeSeriesObsType defines the abstract structure of a time series
    observation.

    The observation must be provided a value for the time dimension.
    This time value should disambiguate the observation within the
    series in which it is defined (i.e. there should not be another
    observation with the same time value). The observation can contain
    an observed value and/or attribute values. The same rules for
    derivation as the base observation type apply to this specialized
    observation.

    :ivar type_value:
    :ivar time_period: The TIME_PERIOD attribute is an explicit
        attribute for the time dimension. This is declared in the base
        schema since it has a fixed identifier and representation. Since
        this data is structured to be time series only, this attribute
        is always required. If the time dimension specifies a more
        specific representation of time the derived type will restrict
        the type definition to the appropriate type.
    """

    class Meta:
        name = "TimeSeriesObsType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    type_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "TIME_PERIOD",
            "type": "Attribute",
            "required": True,
            "pattern": r".{5}A1.*",
        },
    )


@dataclass
class CodeValueType:
    """CodeValueType is used to query for data or reference metadata where a
    component which uses the referenced codelist as its representation enumeration
    has the value provided.

    Note that this is only applicable when the value is a coded value,
    which is to say that it does not apply to a codelist which is
    specified as the representation or an identifiable object target in
    a metadata target.

    :ivar codelist: Codelist references the codelist for which the coded
        value is being sought.
    :ivar value: The value attribute indicates the coded value that is
        to be queried for.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    codelist: None | CodelistReferenceType = field(
        default=None,
        metadata={
            "name": "Codelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    value: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ComponentWhereType(IdentifiableWhereType):
    """ComponentWhereType is an abstract base type that serves as the basis for a
    query for a component within a component list where or a structure query.

    A concept identity and a local representation condition are
    available to seek a component that utilizes a particular concept or
    representation scheme. The conditions within a component query are
    implied to be in an and-query. If an id and a concept identity
    condition are supplied, then both conditions will have to met in
    order for the component query to return true. If, for instance, a
    query based on names in multiple languages is required, then
    multiple instances of the element utilizing this type should be used
    within an or-query container.

    :ivar concept_identity: ConceptIdentity is used to query for a
        structure component based on the concept from which it takes its
        semantic.
    :ivar enumeration: Enumeration is used to query for a structure
        component based on the item scheme that is used as the
        enumeration for its representation. This enumeration may be
        explicit defined by the component (i.e. its local
        representation), or inherited from the concept from which the
        component takes its semantic (i.e. the concept core
        representation).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    enumeration: None | ItemSchemeReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Enumeration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ConceptValueType:
    """ConceptValueType describes the structure of a query for the value of the
    underlying concept of a component.

    It provides a reference to a concept in a concept scheme via a URN
    and/or a complete set of reference fields, as well as a numeric,
    text, or un-typed value.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    concept: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "Concept",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    numeric_value: list[NumericValue] = field(
        default_factory=list,
        metadata={
            "name": "NumericValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    text_value: list[TextValue] = field(
        default_factory=list,
        metadata={
            "name": "TextValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    value: None | Value = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ItemWhereType(NameableWhereType):
    """ItemQueryType is an abstract base type that serves as the basis for a query
    for an item within an item scheme query.

    A nested item where is provided to query for items nested within
    other items. The conditions within an item query are implied to be
    in an and-query. If an id and a child item where condition are
    supplied, then both conditions will have to met in order for the
    item query to return true. If, for instance, a query based on names
    in multiple languages is required, then multiple instances of the
    element utilizing this type should be used within an or-query
    container.

    :ivar parent: Parent is used to query for an item where it declares
        the item referenced here as its parent. This is used for items
        that are not nested in a hierarchy. If child items are sought
        for an item that is contained in a nested hierarchy (e.g. a
        category) on can query directly for the parent category and
        request that the child items be returned by specifying
        cascadeMatchedItems in the detail field of the return details.
    :ivar reporting_category_where:
    :ivar organisation_where:
    :ivar concept_where:
    :ivar code_where:
    :ivar category_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    parent: None | LocalItemReferenceType = field(
        default=None,
        metadata={
            "name": "Parent",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    reporting_category_where: list["ReportingCategoryWhere"] = field(
        default_factory=list,
        metadata={
            "name": "ReportingCategoryWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    organisation_where: list["OrganisationWhere"] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    concept_where: list["ConceptWhere"] = field(
        default_factory=list,
        metadata={
            "name": "ConceptWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    code_where: list["CodeWhere"] = field(
        default_factory=list,
        metadata={
            "name": "CodeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    category_where: list["CategoryWhere"] = field(
        default_factory=list,
        metadata={
            "name": "CategoryWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )


@dataclass
class MaintainableReturnDetailsType(StructureReturnDetailsType):
    """MaintainableReturnDetailsType defines the structure for the return details
    of a non-item scheme maintainable object.

    It eliminates the detail options that are specific to searching an
    item scheme
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    detail: MaintainableReturnDetailType = field(
        default=MaintainableReturnDetailType.FULL,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MappedObjectType(MappedObjectReferenceType):
    """
    MappedObjectType defines a structure for referencing an object and indicating
    whether it is the source, target, or either for the purposes of query for
    structure set containing the referenced object in one of the maps it defines.

    :ivar type_value: The type attribute indicates whether the
        referenced object should be queried as the source, target, or
        both of a map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: SourceTargetType = field(
        default=SourceTargetType.ANY,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class VersionableWhereType(NameableWhereType):
    """
    VersionableQueryType is an abstract base type that serves as the basis for any
    query for a versionable object.

    :ivar version: Version is used to match the version of the versioned
        object. The version can be specified as either an explicit
        version number, or a late bound query where the latest version
        of an object will be returned.
    :ivar version_to: VersionTo is used to specify a range which the
        start date of the validity period of version should fall within
        to create a successful match.
    :ivar version_from: VersionFrom is used to specify a range which the
        end date of the validity period of version should fall within to
        create a successful match.
    :ivar version_active: VersionActive is used to request object with
        active or inactive versions, base on the version validity dates.
        A value of true indicates that only objects where the current
        date is within the validity period of the version will be
        matched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    version: None | str | LateBoundVersionType = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    version_to: None | TimeRangeValueType = field(
        default=None,
        metadata={
            "name": "VersionTo",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    version_from: None | TimeRangeValueType = field(
        default=None,
        metadata={
            "name": "VersionFrom",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    version_active: None | bool = field(
        default=None,
        metadata={
            "name": "VersionActive",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class RegistrationEventType:
    """
    This provides the details of a data or metadata registration event for the
    purposes of notification.

    :ivar registration: Registration provides the changed details of the
        data or metadata registration.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    registration: None | RegistrationType = field(
        default=None,
        metadata={
            "name": "Registration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


@dataclass
class RegistrationRequestType:
    """RegistrationRequestType describes the structure of a single registration
    request.

    It contains the details of a registation and an action field to
    indicate the action to be taken on the contained registration.

    :ivar registration: Registration contains the details of the
        data/metadata set registration to be added, updated, or deleted.
    :ivar action: The action attribute indicates whether this is an
        addition, a modification, or a deletion of a registration.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    registration: None | RegistrationType = field(
        default=None,
        metadata={
            "name": "Registration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class RegistrationStatusType:
    """
    RegistrationStatusType describes the structure of a registration status.

    :ivar registration: Registration, at the very least echoes the
        submitted registration. It the request was to create a new
        registration and it was successful, an id must be supplied.
    :ivar status_message: StatusMessage provides that status for the
        registration request, and if necessary, any error or warning
        information.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    registration: None | RegistrationType = field(
        default=None,
        metadata={
            "name": "Registration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    status_message: None | StatusMessageType2 = field(
        default=None,
        metadata={
            "name": "StatusMessage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


@dataclass
class ResultType:
    """ResultType contains the details about a data or metadata source, through the
    complete registration information.

    In addition, a reference to the content constraints for the data
    source may be provided, if the query requested this information.

    :ivar registration: Registration provides the details of a matching
        registration. In addition to the data source and provision
        agreement information, the id of the registration must also be
        provided.
    :ivar content_constraint: ContentConstraint provides a reference to
        a content constraint in the registry for the resulting data
        source (or possibly constraints base on the registration
        provision agreement, data provider, structure usage, or
        structure). The reference is provided for by a URN and/or a
        complete set of reference fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    registration: None | RegistrationType = field(
        default=None,
        metadata={
            "name": "Registration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    content_constraint: list[ContentConstraintReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ContentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )


@dataclass
class SubmissionResultType:
    """SubmissionResultType provides the status of the structural object submission
    request.

    It will identify the object submitted, report back the action
    requested, and convey the status and any error messages which are
    relevant to the submission.

    :ivar submitted_structure: SubmittedStructure provides a reference
        to the submitted structural object and echoes back the action
        requested for it.
    :ivar status_message: StatusMessage provides that status for the
        submission of the structural object, and if necessary, any error
        or warning information.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    submitted_structure: None | SubmittedStructureType = field(
        default=None,
        metadata={
            "name": "SubmittedStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    status_message: None | StatusMessageType2 = field(
        default=None,
        metadata={
            "name": "StatusMessage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


@dataclass
class AttributeRelationshipType:
    """
    AttributeRelationshipType defines the structure for stating the relationship
    between an attribute and other data structure definition components.

    :ivar none: This means that value of the attribute will not vary
        with any of the other key family components. This will always be
        treated as a data set level attribute.
    :ivar dimension: This is used to reference dimensions in the data
        structure definition on which the value of this attribute
        depends. An attribute using this relationship can be either a
        group, series (or section), or observation level attribute. The
        attachment level of the attribute will be determined by the data
        format and which dimensions are referenced.
    :ivar attachment_group: This is used to specify that the attribute
        should always be attached to the groups referenced here. Note
        that if one of the referenced dimensions is the time dimension,
        the groups referenced here will be ignored.
    :ivar group: This is used as a convenience to referencing all of the
        dimension defined by the referenced group. The attribute will
        also be attached to this group.
    :ivar primary_measure: This is used to specify that the value of the
        attribute is dependent upon the observed value. An attribute
        with this relationship will always be treated as an observation
        level attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    none: None | EmptyType = field(
        default=None,
        metadata={
            "name": "None",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    dimension: list[LocalDimensionReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Dimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    attachment_group: list[LocalGroupKeyDescriptorReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentGroup",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    group: None | LocalGroupKeyDescriptorReferenceType = field(
        default=None,
        metadata={
            "name": "Group",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    primary_measure: None | LocalPrimaryMeasureReferenceType = field(
        default=None,
        metadata={
            "name": "PrimaryMeasure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class CategoryMapType(ItemAssociationType):
    """CategoryMapType defines the structure for mapping two categories.

    A local reference is provided both the source and target category.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class CodeMapType(ItemAssociationType):
    """CodeMapType defines the structure for mapping two codes.

    A local reference is provided both the source and target code.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ComponentBaseType(IdentifiableType):
    """ComponentBaseType is an abstract type that only serves the purpose of
    forming the base for the actual ComponentType.

    It only restricts the format of the id attribute to the
    NCNameIDType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConceptMapType(ItemAssociationType):
    """ConceptMapType defines the structure for mapping two concepts.

    A local reference is provided both the source and target concept.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConceptRepresentation(RepresentationType):
    """ConceptRepresentation defines the core representation that are allowed for a
    concept.

    The text format allowed for a concept is that which is allowed for
    any non-target object component.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConstraintRepresentationType(RepresentationType):
    """ConstraintRepresentationType defines the possible local representations of a
    constraint reference target object.

    The representation is fixed to always be an attachment constraint
    reference.

    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataSetRepresentationType(RepresentationType):
    """DataSetRepresentationType defines the possible local representations of a
    data set reference target object.

    The representation is fixed to always be a data set reference.

    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataStructureRepresentationType(RepresentationType):
    """DataStructureRepresentationType is an abstract base type which defines the
    allowable representations for any data structure definition component.

    The enumeration must be restricted to the proper type for item
    scheme for a given component.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class HierarchicalCodeBaseType(IdentifiableType):
    """HierarchicalCodeBaseType is an abstract base type the creates the basis for
    the HierarchicalCodeType.

    It removes the urn and uri.

    :ivar id: The id attribute allows for an id to be assigned to the
        use of the particular code at that specific point in the
        hierarchy. This value is unique within the hierarchy being
        created, and is used to map the hierarchy against external
        structures.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class IdentifiableObjectRepresentationType(RepresentationType):
    """
    IdentifiableObjectRepresentationType defines the possible local representations
    of an identifiable object target object.

    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class IncludedCodelistReferenceType(CodelistReferenceType):
    """
    IncludedCodelistReferenceType provides the structure for a referencing a
    codelist and optionally providing a local alias identification for this
    reference.

    :ivar alias: The alias attribute is used to carry the identifier for
        the referenced codelist, so that codes from that list can be
        easily referenced by the hierarchical codes contained in the
        parent hierarchy, without having to repeat the reference to the
        codelist itself. The alias attribute must be unique within the
        parent hierarchical codelist.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    alias: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ItemAssociation(ItemAssociationType):
    """
    ItemAssociation is an abstract description of the relation between two items
    for the purpose of mapping.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class KeyDescriptorValuesRepresentationType(RepresentationType):
    """KeyDescriptorValuesRepresentationType defines the possible local
    representations of a key descriptor values target object.

    The representation is fixed to always be a data key (KeyValues).

    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataAttributeRepresentationType(RepresentationType):
    """
    MetadataAttributeRepresentationType defines the possible local representations
    of a metadata attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class NameableType(IdentifiableType):
    """
    NameableType is an abstract base type for  all nameable objects.

    :ivar name: Name provides for a human-readable name for the object.
        This may be provided in multiple, parallel language-equivalent
        forms.
    :ivar description: Description provides for a longer human-readable
        description of the object. This may be provided in multiple,
        parallel language-equivalent forms.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )
    description: list[Description] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class OrganisationMapType(ItemAssociationType):
    """OrganisationMapType defines the structure for mapping two organisations.

    A local reference is provided both the source and target
    organisation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ReportPeriodRepresentationType(RepresentationType):
    """ReportPeriodRepresentationType defines the possible local representations of
    a report period target object.

    The reprentation must be a time period or a subset of this
    representation.

    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ReportingCategoryMapType(ItemAssociationType):
    """ReportingCategoryMapType defines the structure for mapping two reporting
    categories.

    A local reference is provided both the source and target category.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class TransitionType(IdentifiableType):
    """
    TransitionType describes the details of a transition, which is an expression in
    a textual or formalised way of the transformation of data between two specific
    operations performed on the data.

    :ivar target_step: TargetStep references a process step within the
        process that should be transitioned to, should the conditions
        described be met.
    :ivar condition: Condition is a textual description of the
        conditions to be met in order for the target step to be
        proceeded to. It is informational only (not machine-actionable),
        and may be supplied in multiple, parallel-language form.
    :ivar local_id: The localID attribute is an optional identification
        for the transition within the process.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    target_step: None | LocalProcessStepReferenceType = field(
        default=None,
        metadata={
            "name": "TargetStep",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    condition: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )
    local_id: None | str = field(
        default=None,
        metadata={
            "name": "localID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class DataStructureRequestType1(DataStructureType1):
    """DataStructureRequestType is a variation of a the DataStructureType for
    querying purposes.

    Only the observation dimension and the explicit measures flag are
    allowed.
    """

    class Meta:
        name = "DataStructureRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    schema_url: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    namespace: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_at_observation: None | str | ObsDimensionsCodeType = field(
        default=None,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: bool = field(
        default=False,
        metadata={
            "name": "explicitMeasures",
            "type": "Attribute",
        },
    )


@dataclass
class GenericDataStructureType(DataStructureType1):
    """GenericDataStructureType defines the structural information for a generic
    data set.

    A reference to the structure, either explicitly or through a
    dataflow or provision agreement is required as well as the dimension
    which occurs at the observation level.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    schema_url: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    namespace: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_at_observation: None | str | ObsDimensionsCodeType = field(
        default=None,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class GenericMetadataStructureType(MetadataStructureType1):
    """
    GenericMetadataStructureType defines the structural information for a generic
    metadata message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    namespace: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class SetReferenceType:
    """SetReferenceType defines the structure of a reference to a data/metadata
    set.

    A full reference to a data provider and the identifier for the data
    set must be provided. Note that this is not derived from the base
    reference structure since data/metadata sets are not technically
    identifiable.

    :ivar data_provider: DataProvider references a the provider of the
        data/metadata set. A URN and/or a complete set of reference
        fields must be provided.
    :ivar id: ID contains the identifier of the data/metadata set being
        referenced.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "required": True,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class StructureSpecificDataStructureType(DataStructureType1):
    """StructureSpecificDataStructureType defines the structural information for a
    structured data set.

    In addition to referencing the data structure or dataflow which
    defines the structure of the data, the namespace for the data
    structure specific schema as well as which dimension is used at the
    observation level must be provided. It is also necessary to state
    whether the format uses explicit measures, although this is
    technically only applicable is the dimension at the observation
    level is the measure dimension or the flat data format is used.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    namespace: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    dimension_at_observation: None | str | ObsDimensionsCodeType = field(
        default=None,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: bool = field(
        default=False,
        metadata={
            "name": "explicitMeasures",
            "type": "Attribute",
        },
    )


@dataclass
class StructureSpecificMetadataStructureType(MetadataStructureType1):
    """
    StructureSpecificMetadataStructureType defines the structural information for a
    structured metadata message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    namespace: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class DataSetType1(AnnotableType):
    """DataSetType defines the structure of the generic data set.

    Data is organised into either a collection of series (grouped
    observations) or a collection of un-grouped observations. The
    organisation used is dependent on the structure specification in the
    header of the data message (which is referenced via the structureRef
    attribute). The structure specification states which data occurs at
    the observation level. If this dimension is "AllDimensions" then the
    data set must consist of a collection of un-grouped observations;
    otherwise the data set will contain a collection of series with the
    observations in the series disambiguated by the specified dimension
    at the observation level. This data set is capable of containing
    data (observed values) and/or documentation (attribute values). It
    is assumed that each series or un-grouped observation will be
    distinct in its purpose. For example, if series contains both data
    and documentation, it assumed that each series will have a unique
    key. If the series contains only data or only documentation, then it
    is possible that another series with the same key might exist, but
    with not with the same purpose (i.e. to provide data or
    documentation) as the first series.

    :ivar data_provider: DataProvider contains a reference to the
        provider for the data set.
    :ivar attributes: Attributes contains the collection of attribute
        values for attributes defined in the data structure definition
        which do not have an attribute relationship with any other data
        structure definition components.
    :ivar group: Group contains a references to a defined group in the
        data structure definition along with its key (if necessary) and
        values for the attributes which are associated with the group.
        An attribute is associated to a group by either an explicit
        group relationship or by a group attachment when the attribute
        has a relationship with a dimension which is a member of this
        group.
    :ivar series: Series contains a collection of observations that
        share a common key (set of dimension values). The key of a
        series is every dimension defined in the data structure
        definition, save the dimension which is declared in the
        structure specification to be at the observation level. In
        addition to the key and observations, the series contains values
        for attributes which have a relationship with any dimension that
        is part of the series key, so long as the attribute does not
        specify an attachment group or also has a relationship with the
        dimension declared to be at the observation level.
    :ivar obs: Obs is an un-grouped observation. This observation has a
        key which is a set of values for all dimensions declared in the
        data structure definition. In addition to the key, the value of
        the observation can be provided along with values for all
        attributes which have an association with the primary measure or
        any dimension (so long as it does not specify a group
        attachment).
    :ivar structure_ref: The structureRef contains a reference to a
        structural specification in the header of a data or reference
        metadata message. The structural specification details which
        structure the data or reference metadata conforms to, as well as
        providing additional information such as how the data is
        structure (e.g. which dimension occurs at the observation level
        for a data set).
    :ivar set_id: The setID provides an identification of the data or
        metadata set.
    :ivar action: The action attribute indicates whether the file is
        appending, replacing, or deleting.
    :ivar reporting_begin_date: The reportingBeginDate indicates the
        inclusive start time of the data reported in the data or
        metadata set.
    :ivar reporting_end_date: The reportingEndDate indicates the
        inclusive end time of the data reported in the data or metadata
        set.
    :ivar valid_from_date: The validFromDate indicates the inclusive
        start time indicating the validity of the information in the
        data or metadata set.
    :ivar valid_to_date: The validToDate indicates the inclusive end
        time indicating the validity of the information in the data or
        metadata set.
    :ivar publication_year: The publicationYear holds the ISO 8601 four-
        digit year.
    :ivar publication_period: The publicationPeriod specifies the period
        of publication of the data or metadata in terms of whatever
        provisioning agreements might be in force (i.e., "Q1 2005" if
        that is the time of publication for a data set published on a
        quarterly basis).
    """

    class Meta:
        name = "DataSetType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    attributes: None | ValuesType = field(
        default=None,
        metadata={
            "name": "Attributes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    group: list[GroupType1] = field(
        default_factory=list,
        metadata={
            "name": "Group",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    series: list[SeriesType1] = field(
        default_factory=list,
        metadata={
            "name": "Series",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    obs: list[ObsOnlyType] = field(
        default_factory=list,
        metadata={
            "name": "Obs",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic",
        },
    )
    structure_ref: None | str = field(
        default=None,
        metadata={
            "name": "structureRef",
            "type": "Attribute",
            "required": True,
        },
    )
    set_id: None | str = field(
        default=None,
        metadata={
            "name": "setID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    reporting_begin_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingBeginDate",
            "type": "Attribute",
        },
    )
    reporting_end_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingEndDate",
            "type": "Attribute",
        },
    )
    valid_from_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFromDate",
            "type": "Attribute",
        },
    )
    valid_to_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validToDate",
            "type": "Attribute",
        },
    )
    publication_year: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "publicationYear",
            "type": "Attribute",
        },
    )
    publication_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "publicationPeriod",
            "type": "Attribute",
            "pattern": r".{5}A1.*",
        },
    )


@dataclass
class TimeSeriesType1(SeriesType1):
    """TimeSeriesType defines a structure which is used to group a collection of
    observations which have a key in common, organised by time.

    The key for a series is every dimension defined in the data
    structure definition, save the time dimension. In addition to
    observations, values can be provided for attributes which are
    associated with the dimensions which make up this series key (so
    long as the attributes do not specify a group attachment or also
    have an relationship with the time dimension). It is possible for
    the series to contain only observations or only attribute values, or
    both.
    """

    class Meta:
        name = "TimeSeriesType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )


@dataclass
class DataSetType2(AnnotableType):
    """<ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">DataSetType is the abstract type which defines the base structure for any data structure definition specific data set. A derived data set type will be created that is specific to a data structure definition and the details of the organisation of the data (i.e. which dimension is the observation dimension and whether explicit measures should be used). Data is organised into either a collection of series (grouped observations) or a collection of un-grouped observations. The derived data set type will restrict this choice to be either grouped or un-grouped observations. If this dimension is "AllDimensions" then the derived data set type must consist of a collection of un-grouped observations; otherwise the data set will contain a collection of series with the observations in the series disambiguated by the specified dimension at the observation level. This data set is capable of containing data (observed values) and/or documentation (attribute values) and can be used for incremental updates and deletions (i.e. only the relevant updates or deletes are exchanged). It is assumed that each series or un-grouped observation will be distinct in its purpose. For example, if series contains both data and documentation, it assumed that each series will have a unique key. If the series contains only data or only documentation, then it is possible that another series with the same key might exist, but with not with the same purpose (i.e. to provide data or documentation) as the first series.</ns1:p>
    <ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">This base type is designed such that derived types can be processed in a generic manner; it assures that data structure definition specific data will have a consistent structure. The group, series, and observation elements are unqualified, meaning that they are not qualified with a namespace in an instance. This means that in the derived data set types, the elements will always be the same, regardless of the target namespace of the schemas which defines these derived types. This allows for consistent processing of the structure without regard to what the namespace might be for the data structure definition specific schema.</ns1:p>
    <ns1:p xmlns:ns1="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific">The data set can contain values for attributes which do not have an attribute relationship with any data structure definition components. These attribute values will exist in XML attributes in this element based on this type (DataSet). This is specified in the content model with the declaration of anyAttributes in the "local" namespace. The derived data set type will refine this structure so that the attributes are explicit. The XML attributes will be given a name based on the attribute's identifier. These XML attributes will be unqualified (meaning they do not have a namespace associated with them). To allow for generic processing, it is required that the only unqualified XML attributes in the derived data set type (outside of the standard data set attributes) be for attributes declared in the data structure definition. If additional attributes are required, these should be qualified with a namespace so that a generic application can easily distinguish them as not being meant to represent a data structure definition attribute.</ns1:p>

    :ivar data_provider: DataProvider contains a reference to the
        provider for the data set.
    :ivar group: Group contains a references to a defined group in the
        data structure definition along with its key (if necessary) and
        values for the attributes which are associated with the group.
        An attribute is associated to a group by either an explicit
        group relationship or by a group attachment when the attribute
        has a relationship with a dimension which is a member of this
        group.
    :ivar series: Series contains a collection of observations that
        share a common key (set of dimension values). The key of a
        series is every dimension defined in the data structure
        definition, save the dimension at the observation level. In
        addition to the key and observations, the series contains values
        for attributes which have a relationship with any dimension that
        is part of the series key, so long as the attribute does not
        specify an attachment group or also has a relationship with the
        dimension declared to be at the observation level.
    :ivar obs: Obs is an un-grouped observation. This observation has a
        key which is a set of values for all dimensions declared in the
        data structure definition. In addition to the key, the value of
        the observation can be provided along with values for all
        attributes which have an association with the primary measure or
        any dimension (so long as it does not specify a group
        attachment).
    :ivar structure_ref: The structureRef contains a reference to a
        structural specification in the header of a data or reference
        metadata message. The structural specification details which
        structure the data or reference metadata conforms to, as well as
        providing additional information such as how the data is
        structure (e.g. which dimension occurs at the observation level
        for a data set).
    :ivar set_id: The setID provides an identification of the data or
        metadata set.
    :ivar action: The action attribute indicates whether the file is
        appending, replacing, or deleting.
    :ivar reporting_begin_date: The reportingBeginDate indicates the
        inclusive start time of the data reported in the data or
        metadata set.
    :ivar reporting_end_date: The reportingEndDate indicates the
        inclusive end time of the data reported in the data or metadata
        set.
    :ivar valid_from_date: The validFromDate indicates the inclusive
        start time indicating the validity of the information in the
        data or metadata set.
    :ivar valid_to_date: The validToDate indicates the inclusive end
        time indicating the validity of the information in the data or
        metadata set.
    :ivar publication_year: The publicationYear holds the ISO 8601 four-
        digit year.
    :ivar publication_period: The publicationPeriod specifies the period
        of publication of the data or metadata in terms of whatever
        provisioning agreements might be in force (i.e., "Q1 2005" if
        that is the time of publication for a data set published on a
        quarterly basis).
    :ivar data_scope: The dataScope attribute indicates the scope at
        which the data is meant to be validated. These scopes are
        hierarchical and are (from the top down); DataStructure,
        ConstrainedDataStructure, Dataflow, and ProvisionAgreement. the
        hierarchy of these scopes represent the cascading level of
        constraints, which can restrict the valid values for components.
        For example, a data structure defines a dimension with a coded
        representation. A data flow might have a constraint associated
        with it which further restricts the values allowed from the
        referenced code list to a subset of the values allowed by the
        data structure definition. A provision agreement that is based
        on the dataflow might also have a constraint, which further
        restricts the subset of the codelist from the dataflow.
        Therefore, the allowed content becomes stricter lower in the
        hierarchy. Data that is given a scope of one value is stated to
        be valid at that level and all levels below it. Therefore, this
        scope serves to state that data that is meant to be structured
        simply against the data structure definition is not meant to be
        validated against the a dataflow, where constraints might be
        applied.
    :ivar reporting_year_start_day: The REPORTING_YEAR_START_DAY
        attribute is an explict attribute for the reporting year start
        day, which provides context to the time dimension when its value
        contains a reporting period (e.g. 2010-Q1). This attribute is
        used to state the month and day that the reporting year begins
        (e.g. --07-01 for July 1st). In the absence of an explicit value
        provided in this attribute, all reporting period values will be
        assumed to be based on a reporting year start day of January 1.
        This is declared in the base schema since it has a fixed
        identifier and representation. The derived data set type may
        either require or prohibit this attribute, depending on whether
        the data structure declared the reporting year start day
        attribute and if so, the attribute relationship and assignment
        status assigned to it.
    :ivar local_attributes:
    """

    class Meta:
        name = "DataSetType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "",
        },
    )
    group: list[GroupType2] = field(
        default_factory=list,
        metadata={
            "name": "Group",
            "type": "Element",
            "namespace": "",
        },
    )
    series: list[SeriesType2] = field(
        default_factory=list,
        metadata={
            "name": "Series",
            "type": "Element",
            "namespace": "",
        },
    )
    obs: list[ObsType2] = field(
        default_factory=list,
        metadata={
            "name": "Obs",
            "type": "Element",
            "namespace": "",
        },
    )
    structure_ref: None | str = field(
        default=None,
        metadata={
            "name": "structureRef",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
            "required": True,
        },
    )
    set_id: None | str = field(
        default=None,
        metadata={
            "name": "setID",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
        },
    )
    reporting_begin_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingBeginDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
        },
    )
    reporting_end_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingEndDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
        },
    )
    valid_from_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFromDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
        },
    )
    valid_to_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validToDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
        },
    )
    publication_year: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "publicationYear",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
        },
    )
    publication_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "publicationPeriod",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
            "pattern": r".{5}A1.*",
        },
    )
    data_scope: None | DataScopeType = field(
        default=None,
        metadata={
            "name": "dataScope",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific",
            "required": True,
        },
    )
    reporting_year_start_day: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "REPORTING_YEAR_START_DAY",
            "type": "Attribute",
        },
    )
    local_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##local",
        },
    )


@dataclass
class TimeSeriesType2(SeriesType2):
    """TimeSeriesType defines an abstract structure which is used to group a
    collection of observations which have a key in common, organised by time.

    The key for a series is every dimension defined in the data
    structure definition, save the time dimension. In addition to
    observations, values can be provided for attributes which are
    associated with the dimensions which make up this series key (so
    long as the attributes do not specify a group attachment or also
    have an relationship with the time dimension). It is possible for
    the series to contain only observations or only attribute values, or
    both. The same rules for derivation as the base series type apply to
    this specialized series.
    """

    class Meta:
        name = "TimeSeriesType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    time_period: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class BaseHeaderType:
    """BaseHeaderType in an abstract base type that defines the basis for all
    message headers.

    Specific message formats will refine this

    :ivar id: ID identifies an identification for the message, assigned
        by the sender.
    :ivar test: Test indicates whether the message is for test purposes
        or not.
    :ivar prepared: Prepared is the date the message was prepared.
    :ivar sender: Sender is information about the party that is
        transmitting the message.
    :ivar receiver: Receiver is information about the party that is the
        intended recipient of the message.
    :ivar name: Name provides a name for the transmission. Multiple
        instances allow for parallel language values.
    :ivar structure: Structure provides a reference to the structure
        (either explicitly or through a structure usage reference) that
        describes the format of data or reference metadata. In addition
        to the structure, it is required to also supply the namespace of
        the structure specific schema that defines the format of the
        data/metadata. For cross sectional data, additional information
        is also required to state which dimension is being used at the
        observation level. This information will allow the structure
        specific schema to be generated. For generic format messages,
        this is used to simply reference the underlying structure. It is
        not mandatory in these cases and the generic data/metadata sets
        will require this reference explicitly.
    :ivar data_provider: DataProvider identifies the provider of the
        data for a data/reference metadata message.
    :ivar data_set_action: DataSetAction code provides a code for
        determining whether the enclosed message is an Update or Delete
        message (not to be used with the UtilityData message).
    :ivar data_set_id: DataSetID provides an identifier for a contained
        data set.
    :ivar extracted: Extracted is a time-stamp from the system rendering
        the data.
    :ivar reporting_begin: ReportingBegin provides the start of the time
        period covered by the message (in the case of data).
    :ivar reporting_end: ReportingEnd provides the end of the time
        period covered by the message (in the case of data).
    :ivar embargo_date: EmbargoDate holds a time period before which the
        data included in this message is not available.
    :ivar source: Source provides human-readable information about the
        source of the data.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    test: bool = field(
        default=False,
        metadata={
            "name": "Test",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    prepared: None | XmlDateTime | XmlDate = field(
        default=None,
        metadata={
            "name": "Prepared",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    sender: None | SenderType = field(
        default=None,
        metadata={
            "name": "Sender",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    receiver: list[PartyType] = field(
        default_factory=list,
        metadata={
            "name": "Receiver",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    structure: list[PayloadStructureType] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    data_set_action: None | ActionType = field(
        default=None,
        metadata={
            "name": "DataSetAction",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    data_set_id: list[str] = field(
        default_factory=list,
        metadata={
            "name": "DataSetID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    extracted: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "Extracted",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    reporting_begin: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "ReportingBegin",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "pattern": r".{5}A1.*",
        },
    )
    reporting_end: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "ReportingEnd",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "pattern": r".{5}A1.*",
        },
    )
    embargo_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "EmbargoDate",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    source: list[TextType] = field(
        default_factory=list,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )


@dataclass
class CategoryWhereType(ItemWhereType):
    """CategoryQueryWhereType contains a set of parameters for matching a category.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar parent: Parent is used to query for an item where it declares
        the item referenced here as its parent. This is used for items
        that are not nested in a hierarchy. If child items are sought
        for an item that is contained in a nested hierarchy (e.g. a
        category) on can query directly for the parent category and
        request that the child items be returned by specifying
        cascadeMatchedItems in the detail field of the return details.
    :ivar reporting_category_where:
    :ivar organisation_where:
    :ivar concept_where:
    :ivar code_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CodeWhereType(ItemWhereType):
    """CodeWhereType defines a set of parameters for matching a code.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar reporting_category_where:
    :ivar organisation_where:
    :ivar concept_where:
    :ivar code_where:
    :ivar category_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ComponentWhere(ComponentWhereType):
    """ComponentWhere is an abstract substitution head to query for a component
    within a component list or a structure.

    A component where query is implicitly an and-query - that is the conditions within the component where must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ConceptWhereBaseType(ItemWhereType):
    """
    ConceptWhereBaseType is an abstract base type that forms the basis for the
    ConceptWhereType.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar reporting_category_where:
    :ivar organisation_where:
    :ivar concept_where:
    :ivar code_where:
    :ivar category_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataParametersType:
    """DataParametersType defines the parameters for querying for data.

    This structure is refined by separate And/Or constructs which make
    logical restrictions on which parameters apply in such cases.

    :ivar data_set_id: DataSetID is used to match the id of the data
        set. Only data from data sets with an identifier satisfying
        these conditions will be matched.
    :ivar data_provider: DataProvider is used to match the provider of
        data to the referenced data provider. Only data from data sets
        provided by the referenced data provider will be matched.
    :ivar data_structure: DataStructure is used to match the underlying
        structure of the data. Only data from data sets that conform to
        referenced data structure definition will be matched.
    :ivar dataflow: Dataflow is used to match the flow which data is
        reported against. Only data from data sets report against
        referenced dataflow will be matched.
    :ivar provision_agreement: ProvisionAgreement is used to match the
        provision agreement which data is reported against. Only data
        from data sets report against the referenced provision agreement
        will be matched.
    :ivar category: Category is used to match a data based on the
        categorization of its underlying structure (data structure
        definition), or the usage of that structure (data flow). Only
        data whose underlying structure or structure usage are
        categorized against the referenced category will be matched.
    :ivar updated: Updated is used to match data based on when it was
        last updated (including additions and deletions). Only data
        which satisfies the conditions for the last update parameters
        supplied here will be matched.
    :ivar concept_value: ConceptValue is used to match data based on the
        value of a particular concept. This concept may be used as a
        dimension, attribute, or measure for the data. So long as the
        referenced concept has the specified value for a given data
        point, it will be matched.
    :ivar representation_value: RepresentationValue is used to match
        data based on a representation scheme having a particular value.
        This representation scheme may be used as the representation of
        a dimension, attribute, or measure. So long as the value of the
        concept using the referenced codelist has the value specified,
        any data point for the concept will be matched.
    :ivar dimension_value: DimensionValue is used to match data based on
        the value of a dimension. Any data with the dimension with the
        supplied identifier satisfies the conditions supplied will be
        matched.
    :ivar time_dimension_value: TimeDimensionValue is used to match data
        based on the value of the time dimension. Any data with a time
        value satisfying the conditions supplied will be matched.
    :ivar attribute_value: AttributeValue is used to match data based on
        the value of an attribute. Any data with an attribute with the
        supplied identifier satisfies the conditions supplied will be
        matched.
    :ivar primary_measure_value: PrimaryMeasureValue is used to match
        data based on the value of the primary measure. Any data with
        its value satisfying the conditions supplied will be matched.
    :ivar attachment_constraint: AttachmentConstraint references an
        attachment constraint in order to match data which matches the
        effective data keys or cube regions defined in the constraint.
        Data will be returned by first matching data on the keys and
        cube regions that are marked as included (or all data if none),
        and then excluding the data that satisfies the conditions of the
        excluded keys and cube regions.
    :ivar time_format: TimeFormat is used to match data when a frequency
        dimension is not explicitly defined. Only data reported against
        the supplied time data type will be returned.
    :ivar or_value: Or contains a collection of additional parameters,
        any one of which can be satisfied to result in a match.
    :ivar and_value: And contains a collection of additional parameters,
        all of which must be satisfied to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    data_set_id: list[QueryIdtype] = field(
        default_factory=list,
        metadata={
            "name": "DataSetID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_provider: list[DataProviderReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_structure: list[DataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    dataflow: list[DataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    category: list[CategoryReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    updated: list[TimeRangeValueType] = field(
        default_factory=list,
        metadata={
            "name": "Updated",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )
    concept_value: list[ConceptValueType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    representation_value: list[CodeValueType] = field(
        default_factory=list,
        metadata={
            "name": "RepresentationValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    dimension_value: list[DimensionValueType] = field(
        default_factory=list,
        metadata={
            "name": "DimensionValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_dimension_value: list[TimeDimensionValueType] = field(
        default_factory=list,
        metadata={
            "name": "TimeDimensionValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attribute_value: list[AttributeValueType] = field(
        default_factory=list,
        metadata={
            "name": "AttributeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    primary_measure_value: list[PrimaryMeasureValueType] = field(
        default_factory=list,
        metadata={
            "name": "PrimaryMeasureValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attachment_constraint: list[AttachmentConstraintReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_format: list[TimeDataType] = field(
        default_factory=list,
        metadata={
            "name": "TimeFormat",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    or_value: list["DataParametersOrType"] = field(
        default_factory=list,
        metadata={
            "name": "Or",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    and_value: list["DataParametersAndType"] = field(
        default_factory=list,
        metadata={
            "name": "And",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class DataStructureComponentWhereType(ComponentWhereType):
    """DataStructureComponentWhereType defines the basic information for querying
    for a data structure definition component.

    The component can be queried based on its identification, the
    concept from which it takes its semantic, and the code list it uses
    as its representation,. This is an implicit set of "and" parameters,
    that is the conditions within this must all be met in order to
    return a match.

    :ivar urn: URN is used to match the urn of any SDMX object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ItemWhere(ItemWhereType):
    """ItemWhere is an abstract substitution head to query for an item within a
    parent item where or an item scheme query.

    An item where query is implicitly an and-query - that is the conditions within the item where must all be met in order to return a match. If this is nested within another item where, the meaning is that the conditions specified must be matched within the hierarchy provided.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class MaintainableWhereType(VersionableWhereType):
    """
    MaintainableQueryType is an abstract base type that serves as the basis for any
    query for a maintainable object.

    :ivar agency_id: AgencyID is used to match the agency id of the
        maintained object.
    :ivar type_value: The type attribute optionally defines the type of
        object being queried. For queries for distinct types of objects,
        a fixed value should be specified in the derived queries. For
        queries that serve to query for like types of objects, this
        should be required.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    agency_id: None | QueryNestedIdtype = field(
        default=None,
        metadata={
            "name": "AgencyID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    type_value: None | MaintainableTypeCodelistType = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class MeasureDimensionWhereBaseType(ComponentWhereType):
    """
    MeasureDimensionWhereBaseType is an abstract base type which forms the basis
    for a measure dimension query.

    :ivar urn: URN is used to match the urn of any SDMX object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataAttributeWhereBaseType(ComponentWhereType):
    """
    MetadataAttributeWhereBaseType is an abstract base type that forms the basis
    for the MetadataAttributeWhereType.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar concept_identity: ConceptIdentity is used to query for a
        structure component based on the concept from which it takes its
        semantic.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class OrganisationWhereType(ItemWhereType):
    """OrganisationWhereType defines a set of parameters for matching an
    organisation.

    In addition to the base parameters for any item, there is an
    additional parameter for matching an organisation based on the roles
    it serves. All supplied parameters must be matched in order for an
    object to satisfy the query.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar reporting_category_where:
    :ivar organisation_where:
    :ivar concept_where:
    :ivar code_where:
    :ivar category_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ReportingCategoryWhereBaseType(ItemWhereType):
    """
    ReportingCategoryWhereBaseType is an abstract base type that forms the basis
    for the ReportingCategoryQueryType.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar parent: Parent is used to query for an item where it declares
        the item referenced here as its parent. This is used for items
        that are not nested in a hierarchy. If child items are sought
        for an item that is contained in a nested hierarchy (e.g. a
        category) on can query directly for the parent category and
        request that the child items be returned by specifying
        cascadeMatchedItems in the detail field of the return details.
    :ivar organisation_where:
    :ivar concept_where:
    :ivar code_where:
    :ivar category_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class TargetObjectWhereBaseType(ComponentWhereType):
    """
    TargetObjectWhereBaseType is an abstract base type that forms the basis for the
    TargetObjectWhereType.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar concept_identity: ConceptIdentity is used to query for a
        structure component based on the concept from which it takes its
        semantic.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataRegistrationEventsType:
    """DataRegistrationEventsType details the data registration events for the
    subscription.

    It is possible to subscribe to all data registration events in the
    repository, or specific events for; single registrations, provision
    agreements, data providers, data flows, key families, and categories
    that categorize data flows or key families.

    :ivar all_events: AllEvents subscribes to all data registration
        events in the repository.
    :ivar registration_id: RegistrationID subscribes to all the data
        registration events for the unique registration referenced.
    :ivar provision_agreement: ProvisionAgreementReference subscribes to
        all data registration events for the explicitly referenced
        provision agreement.
    :ivar data_provider: DataProviderReference subscribes to all data
        registration events for the explicitly referenced data provider.
    :ivar dataflow_reference: DataflowReference subscribes to all data
        registration events for the data flows referenced by this
        object. This may reference one or more data flows, as the
        specific references fields allow for a wild-carded value.
    :ivar key_family_reference: KeyFamilyReference subscribes to all
        data registration events for the key families referenced by this
        object. This may reference one or more key families, as the
        specific references fields allow for a wild-carded value.
    :ivar category: Category subscribes to all data registration events
        for any data flows or key families that are categorized by the
        referenced category.
    :ivar type_value: TYPE is a fixed attribute that is used to ensure
        only of each event selector may be provided, when it is
        referenced in a uniqueness constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    all_events: None | EmptyType = field(
        default=None,
        metadata={
            "name": "AllEvents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    registration_id: list[str] = field(
        default_factory=list,
        metadata={
            "name": "RegistrationID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    data_provider: list[DataProviderReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    dataflow_reference: list[MaintainableEventType] = field(
        default_factory=list,
        metadata={
            "name": "DataflowReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    key_family_reference: list[MaintainableEventType] = field(
        default_factory=list,
        metadata={
            "name": "KeyFamilyReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    category: list[CategoryReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    type_value: str = field(
        init=False,
        default="DATA",
        metadata={
            "name": "TYPE",
            "type": "Attribute",
        },
    )


@dataclass
class MetadataRegistrationEventsType:
    """MetadataRegistrationEventsType details the metadata registration events for
    the subscription.

    It is possible to subscribe to all metadata registration events in
    the repository, or specific events for; single registrations,
    provision agreements, data providers, metadata flows, metadata
    structure definitions, and categories that categorize metadata flows
    or metadata structure definitions.

    :ivar all_events: AllEvents subscribes to all metadata registration
        events in the repository.
    :ivar registration_id: RegistrationID subscribes to all the metadata
        registration events for the unique registration referenced.
    :ivar provision_agreement: ProvisionAgreementReference subscribes to
        all metadata registration events for the explicitly referenced
        provision agreement.
    :ivar data_provider: DataProvider subscribes to all metadata
        registration events for the explicitly referenced data provider.
    :ivar metadataflow_reference: MetadataflowReference subscribes to
        all metadata registration events for the metadata flows
        referenced by this object. This may reference one or more
        metadata flows, as the specific references fields allow for a
        wild-carded value.
    :ivar metadata_structure_definition_reference:
        MetadataStructureDefinitionReference subscribes to all metadata
        registration events for the metadata structure definitions
        referenced by this object. This may reference one or more
        metadata structure definitions, as the specific references
        fields allow for a wild-carded value.
    :ivar category: Category subscribes to all metadata registration
        events for any metadata flows or metadata structure definitions
        that are categorized by the referenced category.
    :ivar type_value: TYPE is a fixed attribute that is used to ensure
        only of each event selector may be provided, when it is
        referenced in a uniqueness constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    all_events: None | EmptyType = field(
        default=None,
        metadata={
            "name": "AllEvents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    registration_id: list[str] = field(
        default_factory=list,
        metadata={
            "name": "RegistrationID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    data_provider: list[DataProviderReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadataflow_reference: list[MaintainableEventType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataflowReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadata_structure_definition_reference: list[MaintainableEventType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructureDefinitionReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    category: list[CategoryReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    type_value: str = field(
        init=False,
        default="METADATA",
        metadata={
            "name": "TYPE",
            "type": "Attribute",
        },
    )


@dataclass
class QueryRegistrationRequestType1:
    """QueryRegistrationRequestType describes the structure of a registration query
    request.

    The type of query (data, reference metadata, or both) must be
    specified. It is possible to query for registrations for a
    particular provision agreement, data provider, or structure usage,
    or to query for all registrations in the registry. In addition the
    search can be refined by providing constraints in the form of
    explicit time periods, constraint regions, and key sets. When
    constraint regions and key sets are provided they will be
    effectively processed by first matching all data for the included
    keys and regions (all available data if there are none) and then
    removing any data matching the excluded keys or regions.

    :ivar query_type: QueryType defines the type of sets (data,
        metadata, or both) that are being queried for.
    :ivar all: All indicates that all registrations meeting the other
        criteria of the query should be returned.
    :ivar provision_agreement: ProvisionAgreement provides a reference
        to a provision agreement in the registry, for which all
        registered sets meeting the other criteria of this query should
        be returned. The reference is provided as a URN and/or a
        complete set of reference fields.
    :ivar data_provider: DataProvider provides a reference to a data
        provider in the registry, for which all registered sets meeting
        the other criteria of this query should be returned. The
        reference is provided as a URN and/or a complete set of
        reference fields.
    :ivar dataflow: Dataflow provides a reference to a data flow in the
        registry, for which all registered sets meeting the other
        criteria of this query should be returned. The reference is
        provided as a URN and/or a complete set of reference fields.
    :ivar metadataflow: Metadataflow provides a reference to a metadata
        flow in the registry, for which all registered sets meeting the
        other criteria of this query should be returned. The reference
        is provided as a URN and/or a complete set of reference fields
    :ivar reference_period: ReferencePeriod provides an inclusive start
        and end date for the data or metadata being sought.
    :ivar data_key_set: DataKeySet is used to provide a set of included
        or excluded keys which serves to refine the data being sought.
    :ivar metadata_key_set: MetadataKeySet is used to provide a set of
        included or excluded keys which serves to refine the data being
        sought.
    :ivar cube_region: CubeRegion is used to provide sets of include or
        excluded values for dimensions when querying for data.
    :ivar metadata_target_region: MetadataTargetRegion is used to
        provide sets of included or excluded values for identifier
        components when querying for metadata.
    :ivar return_constraints: The returnConstraints attribute determines
        whether information about the constraints on the data or
        metadata sets returned should also be sent the results.
    """

    class Meta:
        name = "QueryRegistrationRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    query_type: None | QueryTypeType = field(
        default=None,
        metadata={
            "name": "QueryType",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    all: None | EmptyType = field(
        default=None,
        metadata={
            "name": "All",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    provision_agreement: None | ProvisionAgreementReferenceType = field(
        default=None,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    dataflow: None | DataflowReferenceType = field(
        default=None,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadataflow: None | MetadataflowReferenceType = field(
        default=None,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    reference_period: None | ReferencePeriodType = field(
        default=None,
        metadata={
            "name": "ReferencePeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    data_key_set: list[DataKeySetType] = field(
        default_factory=list,
        metadata={
            "name": "DataKeySet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadata_key_set: list[MetadataKeySetType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataKeySet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    cube_region: list[CubeRegionType] = field(
        default_factory=list,
        metadata={
            "name": "CubeRegion",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadata_target_region: list[MetadataTargetRegionType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTargetRegion",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    return_constraints: bool = field(
        default=False,
        metadata={
            "name": "returnConstraints",
            "type": "Attribute",
        },
    )


@dataclass
class QueryResultType:
    """QueryResultType describes the structure of a query result for a single data
    source.

    Either a data result or metadata result is detailed, depending on
    the data source.

    :ivar data_result:
    :ivar metadata_result:
    :ivar time_series_match: The timeSeriesMatch attribute is true when
        the result is an exact match with the key found in the registry
        - that is, when the registered data source provides a matching
        key. It is set to false when the data source is registered with
        cube-region constraints, or in any other circumstance when it
        cannot be established that the sought-for keys have been exactly
        matched. This is always true when the resulting data source is
        the source of a metadata set.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    data_result: None | ResultType = field(
        default=None,
        metadata={
            "name": "DataResult",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    metadata_result: None | ResultType = field(
        default=None,
        metadata={
            "name": "MetadataResult",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    time_series_match: None | bool = field(
        default=None,
        metadata={
            "name": "timeSeriesMatch",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class QuerySubscriptionRequestType1:
    """QuerySubscriptionRequestType describes the structure of a query for
    subscriptions.

    Subscriptions for a given organisation may be retrieved.

    :ivar organisation: Organisation provides a reference to the data
        consumer for which the subscription details should be returned.
    """

    class Meta:
        name = "QuerySubscriptionRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    organisation: None | OrganisationReferenceType = field(
        default=None,
        metadata={
            "name": "Organisation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


@dataclass
class SubmitRegistrationsRequestType1:
    """
    SubmitRegistrationsRequestType defines the payload of a request message used to
    submit addtions, updates, or deletions of data/metadata set registrations.

    :ivar registration_request: RegistrationRequest provides the details
        of a requested registration and the action to take on it. A
        reference to a provision agreement that exists in the registry
        must be provide along with a simple and/or queryable data
        source. The id should only be provided when updating or deleting
        a registration.
    """

    class Meta:
        name = "SubmitRegistrationsRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    registration_request: list[RegistrationRequestType] = field(
        default_factory=list,
        metadata={
            "name": "RegistrationRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "min_occurs": 1,
        },
    )


@dataclass
class SubmitRegistrationsResponseType1:
    """SubmitRegistrationsResponseType describes the structure of a registration
    response.

    For each submitted registration in the request, a registration
    status is provided. The status elements should be provided in the
    same order as the submitted registrations, although each status will
    echo the request to ensure accurate processing of the responses.

    :ivar registration_status: RegistrationStatus provided the status
        details for the submitted registration. It echoes the original
        submission and provides status information about the request.
    """

    class Meta:
        name = "SubmitRegistrationsResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    registration_status: list[RegistrationStatusType] = field(
        default_factory=list,
        metadata={
            "name": "RegistrationStatus",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "min_occurs": 1,
        },
    )


@dataclass
class SubmitStructureResponseType1:
    """SubmitStructureResponseType describes the structure of a response to a
    structure submission.

    For each submitted structure, a Result will be returned.

    :ivar submission_result: SubmissionResult provides a status for each
        submitted structural object.
    """

    class Meta:
        name = "SubmitStructureResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    submission_result: list[SubmissionResultType] = field(
        default_factory=list,
        metadata={
            "name": "SubmissionResult",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "min_occurs": 1,
        },
    )


@dataclass
class CategoryMap(CategoryMapType):
    """
    CategoryMap defines the structure of a map which identifies relationships
    between categories in different category schemes.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class CodeMap2(CodeMapType):
    """
    CodeMap defines the structure of a map which identifies relationships between
    codes in different codelists.
    """

    class Meta:
        name = "CodeMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ComponentType(ComponentBaseType):
    """ComponentType is an abstract base type for all components.

    It contains information pertaining to a component, including an
    optional reference to a concept, an optional role played by the
    concept, an optional text format description, and an optional local
    representation.

    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation: LocalRepresentation references item
        schemes that may be used to create the representation of a
        component. The type of this must be refined such that a concrete
        item scheme reference is used.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    local_representation: None | RepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ConceptMap2(ConceptMapType):
    """
    ConceptMap defines the structure of a map which identifies relationships
    between concepts in different concept schemes.
    """

    class Meta:
        name = "ConceptMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class HierarchicalCodeType(HierarchicalCodeBaseType):
    """HierarchicalCodeType describes the structure of a hierarchical code.

    A hierarchical code provides for a reference to a code that is
    referenced within the hierarchical code list via either a complete
    reference to a code through either a URN or full set of reference
    fields, or a local reference which utilizes the included codelist
    reference alias and the identification of a code from the list.
    Codes are arranged in a hierarchy by this reference. Note that it is
    possible to reference a single code such that it has multiple
    parents within the hierarchy. Further, the hierarchy may or may not
    be a leveled one.

    :ivar code: Code provides a complete, explicit reference to a code
        through either its URN, or a complete reference to the codelist
        and code.
    :ivar codelist_alias_ref: CodelistAliasRef references an alias
        assigned in a IncludedCodelistReference element in the
        containing hierarchical codelist. This is used in conjunction
        with the CodeID element to reference a code from one of the
        included codelists.
    :ivar code_id: CodeID references the id of a code from the codelist
        that is referenced through the CodelistAliaRef element.
    :ivar hierarchical_code: HierarchicalCode is used to nest referenced
        codes into a value based hierarchy.
    :ivar level: Level references a formal level defined within the
        hierarchy which defines this hierarchical code. This is only
        necessary if the nesting depth of the hierarchical code does not
        correspond to the nesting depth of the level to which it belongs
        (i.e. the hieararchical code is to skip down a level).
        Otherwise, the code is assumed to exist at the level in which
        the nesting depth of the level matches the nesting depth of the
        code.
    :ivar version: The version attriubte contains a version number for
        the hierarchical code. A hierarchical code is not formally
        versionable, therefore each code must have a unique identifier.
        The version supplied here is for informational purposes only and
        is not used to uniquely identity the code.
    :ivar valid_from: The validFrom attriubte indicates the point in
        time in which the hiearchical code became effective. This can be
        used to track the historicity of codes changing over time.
    :ivar valid_to: The validTo attriubte indicates the point in time in
        which the hiearchical code became no longer effective. This can
        be used to track the historicity of codes changing over time.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    code: None | CodeReferenceType = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    codelist_alias_ref: None | str = field(
        default=None,
        metadata={
            "name": "CodelistAliasRef",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    code_id: None | LocalCodeReferenceType = field(
        default=None,
        metadata={
            "name": "CodeID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    hierarchical_code: list["HierarchicalCodeType"] = field(
        default_factory=list,
        metadata={
            "name": "HierarchicalCode",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    level: None | LocalLevelReferenceType = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    version: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    valid_from: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFrom",
            "type": "Attribute",
        },
    )
    valid_to: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validTo",
            "type": "Attribute",
        },
    )


@dataclass
class HierarchyBaseType(NameableType):
    """HierarchyBaseType is an abstract base type that serves as the basis for the
    HierarchyType.

    It requires a name and id be provided.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class HybridCodelistMapBaseType(NameableType):
    """
    HybridCodelistMapBaseType is an abstract base type which forms the basis for
    the HybridCodelistMapType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ItemBaseType(NameableType):
    """ItemBaseType is an abstract base type that forms the basis for the ItemType.

    It requires that at least an id be supplied for an item.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ItemSchemeMapBaseType(NameableType):
    """
    ItemSchemeMapBaseType is an abstract base type which forms the basis for the
    ItemSchemeMapType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class LevelBaseType(NameableType):
    """LevelBaseType is an abstract base type that makes up the basis for the
    LevelType.

    It requires a name and id.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class MeasureDimensionRepresentationType(DataStructureRepresentationType):
    """
    BaseDimensionRepresentationType is an abstract base which defines the
    representation for a measure dimension.

    :ivar text_format: TextFormat describes an uncoded textual format.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    text_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class OrganisationMap2(OrganisationMapType):
    """
    OrganisationMap relates a source organisation to a target organisation.
    """

    class Meta:
        name = "OrganisationMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ProcessStepBaseType(NameableType):
    """
    ProcessStepBaseType is an abstract base type used as the basis for the
    ProcessStepType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ReportingCategoryMap2(ReportingCategoryMapType):
    """
    ReportingCategoryMap defines the structure of a map which identifies
    relationships between reporting categories in different reporting taxonomies.
    """

    class Meta:
        name = "ReportingCategoryMap"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class SimpleDataStructureRepresentationType(DataStructureRepresentationType):
    """
    SimpleDataStructureRepresentationType defines the representation for any non-
    measure and non-time dimension data structure definition component.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class StructureMapBaseType(NameableType):
    """
    StructureMapBaseType is an abstract base type which forms the basis for the
    StructureMapType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class VersionableType(NameableType):
    """
    VersionableType is an abstract base type for all versionable objects.

    :ivar version: This version attribute holds a version number in the
        format of #[.#]+ (see common:VersionType definition for
        details). If not supplied, the version number is defaulted to
        1.0.
    :ivar valid_from: The validFrom attribute provides the inclusive
        start date for providing supplemental validity information about
        the version.
    :ivar valid_to: The validTo attribute provides the inclusive end
        date for providing supplemental validity information about the
        version.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    version: str = field(
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    valid_from: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFrom",
            "type": "Attribute",
        },
    )
    valid_to: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validTo",
            "type": "Attribute",
        },
    )


@dataclass
class ComponentValueSetType:
    """ComponentValueSetType is an abstract base type which is used to provide a
    set of value for a referenced component.

    Implementations of this type will be based on a particular component
    type and refine the allowed values to reflect the types of values
    that are possible for that type of component.

    :ivar value: Value provides a simple value for the component, such
        as a coded, numeric, or simple text value. This type of
        component value is applicable for dimensions and attributes.
    :ivar data_set: DataSet provides a reference to a data set and is
        used to state a value for the data set target component in a
        metadata target.
    :ivar data_key: DataKey provides a set of dimension references and
        value, which form a full or partial data key. This is used to
        state a value for the key descriptor values target component in
        a metadata target.
    :ivar object_value: Object provides a reference to an Identifiable
        object in the SDMX Information Model. This is used to state a
        value for an identifiable target component in a metadata target.
    :ivar time_range: TimeValue provides a value for a component which
        has a time representation. This is repeatable to allow for a
        range to be specified, although a single value can also be
        provided. An operator is available on this to indicate whether
        the specified value indicates an exact value or the
        beginning/end of a range (inclusive or exclusive).
    :ivar id: The id attribute provides the identifier for the component
        for which values are being provided. This base type allows for a
        nested identifier to be provided, for the purpose of referencing
        a nested component (i.e. a metadata attribute). However,
        specific implementations will restrict this representation to
        only allow single level identifiers where appropriate.
    :ivar include: The include attribute indicates whether the values
        provided for the referenced component are to be included are
        excluded from the region in which they are defined.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    value: list[SimpleValueType1] = field(
        default_factory=list,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_key: list["DataKeyType"] = field(
        default_factory=list,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    object_value: list[ObjectReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Object",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    time_range: None | TimeRangeValueType = field(
        default=None,
        metadata={
            "name": "TimeRange",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    include: bool = field(
        default=True,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericDataStructureRequestType(DataStructureRequestType1):
    """GenericDataStructureRequestType is a variation of a the
    DataStructureRequestType for querying purposes.

    The explicit measure flag in not allowed.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    dimension_at_observation: None | str | ObsDimensionsCodeType = field(
        default=None,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class GenericTimeSeriesDataStructureType(GenericDataStructureType):
    """GenericTimeSeriesDataStructureType defines the structural information for a
    generic time series based data set.

    The dimension at the observation level is fixed to be TIME_PERIOD.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    dimension_at_observation: str | ObsDimensionsCodeType = field(
        init=False,
        default=ObsDimensionsCodeType.TIME_PERIOD,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class StructureSpecificDataTimeSeriesStructureType(StructureSpecificDataStructureType):
    """StructureSpecificDataTimeSeriesStructureType defines the structural
    information for a structure definition specific time series data set.

    The dimension at the observation level is fixed to be TIME_PERIOD.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    namespace: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    dimension_at_observation: str | ObsDimensionsCodeType = field(
        init=False,
        default=ObsDimensionsCodeType.TIME_PERIOD,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class TimeSeriesDataStructureRequestType(DataStructureRequestType1):
    """TimeSeriesDataStructureRequestType is a variation of a the
    DataStructureRequestType for querying purposes.

    The observation dimension is fixed to TIME_PERIOD
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    dimension_at_observation: str | ObsDimensionsCodeType = field(
        init=False,
        default=ObsDimensionsCodeType.TIME_PERIOD,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    explicit_measures: bool = field(
        default=False,
        metadata={
            "name": "explicitMeasures",
            "type": "Attribute",
        },
    )


@dataclass
class TimeSeriesDataSetType1(DataSetType1):
    """TimeSeriesDataSetType is a derivation of the base DataSetType of the generic
    format the restricts the data set to only allow for grouped observations where
    the dimension at the observation level is the time dimension of the data
    structure definition.

    This means that unlike the base data set structure, there can be no
    un-grouped observations. Because this derivation is achieved using
    restriction, data sets conforming to this type will inherently
    conform to the base data set structure as well. In fact, data
    structured here will be identical to data in the base data set when
    the time dimension is the observation dimension. This means that the
    data contained in this structure can be processed in exactly the
    same manner as the base structure.

    :ivar obs: Obs is an un-grouped observation. This observation has a
        key which is a set of values for all dimensions declared in the
        data structure definition. In addition to the key, the value of
        the observation can be provided along with values for all
        attributes which have an association with the primary measure or
        any dimension (so long as it does not specify a group
        attachment).
    """

    class Meta:
        name = "TimeSeriesDataSetType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/generic"
        )

    obs: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class TimeSeriesDataSetType2(DataSetType2):
    """TimeSeriesDataSetType is the abstract type which defines the base structure
    for any data structure definition specific time series based data set.

    A derived data set type will be created that is specific to a data
    structure definition. Unlike the base format, only one variation of
    this is allowed for a data structure definition. This variation is
    the time dimension as the observation dimension. Data is organised
    into a collection of time series. Because this derivation is
    achieved using restriction, data sets conforming to this type will
    inherently conform to the base data set structure as well. In fact,
    data structure specific here will be identical to data in the base
    data set when the time dimension is the observation dimension, even
    for the derived data set types. This means that the data contained
    in this structure can be processed in exactly the same manner as the
    base structure. The same rules for derivation as the base data set
    type apply to this specialized data set.

    :ivar obs: Obs is an un-grouped observation. This observation has a
        key which is a set of values for all dimensions declared in the
        data structure definition. In addition to the key, the value of
        the observation can be provided along with values for all
        attributes which have an association with the primary measure or
        any dimension (so long as it does not specify a group
        attachment).
    """

    class Meta:
        name = "TimeSeriesDataSetType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/data/structurespecific"
        )

    obs: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class BasicHeaderType(BaseHeaderType):
    """
    BasicHeaderType defines the most basic header information used in simple
    message exchanges.

    :ivar name: Name provides a name for the transmission. Multiple
        instances allow for parallel language values.
    :ivar structure: Structure provides a reference to the structure
        (either explicitly or through a structure usage reference) that
        describes the format of data or reference metadata. In addition
        to the structure, it is required to also supply the namespace of
        the structure specific schema that defines the format of the
        data/metadata. For cross sectional data, additional information
        is also required to state which dimension is being used at the
        observation level. This information will allow the structure
        specific schema to be generated. For generic format messages,
        this is used to simply reference the underlying structure. It is
        not mandatory in these cases and the generic data/metadata sets
        will require this reference explicitly.
    :ivar data_provider: DataProvider identifies the provider of the
        data for a data/reference metadata message.
    :ivar data_set_action: DataSetAction code provides a code for
        determining whether the enclosed message is an Update or Delete
        message (not to be used with the UtilityData message).
    :ivar data_set_id: DataSetID provides an identifier for a contained
        data set.
    :ivar extracted: Extracted is a time-stamp from the system rendering
        the data.
    :ivar reporting_begin: ReportingBegin provides the start of the time
        period covered by the message (in the case of data).
    :ivar reporting_end: ReportingEnd provides the end of the time
        period covered by the message (in the case of data).
    :ivar embargo_date: EmbargoDate holds a time period before which the
        data included in this message is not available.
    :ivar source: Source provides human-readable information about the
        source of the data.
    :ivar receiver:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    name: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_action: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    extracted: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_begin: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_end: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    embargo_date: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    source: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    receiver: None | PartyType = field(
        default=None,
        metadata={
            "name": "Receiver",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class GenericDataHeaderType(BaseHeaderType):
    """
    GenericDataHeaderType defines the header structure for a generic data message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    structure: list[GenericDataStructureType] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "min_occurs": 1,
        },
    )


@dataclass
class GenericMetadataHeaderType(BaseHeaderType):
    """
    GenericMetadataHeaderType defines the header format for generic reference
    metadata.

    :ivar reporting_begin: ReportingBegin provides the start of the time
        period covered by the message (in the case of data).
    :ivar reporting_end: ReportingEnd provides the end of the time
        period covered by the message (in the case of data).
    :ivar embargo_date: EmbargoDate holds a time period before which the
        data included in this message is not available.
    :ivar structure:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    reporting_begin: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_end: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    embargo_date: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure: list[GenericMetadataStructureType] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "min_occurs": 1,
        },
    )


@dataclass
class MessageType:
    """MessageType is an abstract type which is used by all of the messages, to
    allow inheritance of common features.

    Every message consists of a mandatory header, followed by optional
    payload (which may occur multiple times), and finally an optional
    footer section for conveying error, warning, and informational
    messages.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BaseHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    target_namespace_element: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##targetNamespace",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class StructureHeaderType(BaseHeaderType):
    """
    StructureHeaderType defines the structure for structural metadata messages.

    :ivar structure: Structure provides a reference to the structure
        (either explicitly or through a structure usage reference) that
        describes the format of data or reference metadata. In addition
        to the structure, it is required to also supply the namespace of
        the structure specific schema that defines the format of the
        data/metadata. For cross sectional data, additional information
        is also required to state which dimension is being used at the
        observation level. This information will allow the structure
        specific schema to be generated. For generic format messages,
        this is used to simply reference the underlying structure. It is
        not mandatory in these cases and the generic data/metadata sets
        will require this reference explicitly.
    :ivar data_provider: DataProvider identifies the provider of the
        data for a data/reference metadata message.
    :ivar data_set_action: DataSetAction code provides a code for
        determining whether the enclosed message is an Update or Delete
        message (not to be used with the UtilityData message).
    :ivar data_set_id: DataSetID provides an identifier for a contained
        data set.
    :ivar extracted: Extracted is a time-stamp from the system rendering
        the data.
    :ivar reporting_begin: ReportingBegin provides the start of the time
        period covered by the message (in the case of data).
    :ivar reporting_end: ReportingEnd provides the end of the time
        period covered by the message (in the case of data).
    :ivar embargo_date: EmbargoDate holds a time period before which the
        data included in this message is not available.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    structure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_action: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    extracted: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_begin: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_end: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    embargo_date: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class StructureSpecificDataHeaderType(BaseHeaderType):
    """
    StructureSpecificDataHeaderType defines the header structure for a structure
    specific data message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    structure: list[StructureSpecificDataStructureType] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "min_occurs": 1,
        },
    )


@dataclass
class StructureSpecificMetadataHeaderType(BaseHeaderType):
    """
    StructureSpecificMetadataHeaderType defines the header format for metadata
    structure definition specific reference metadata messages.

    :ivar reporting_begin: ReportingBegin provides the start of the time
        period covered by the message (in the case of data).
    :ivar reporting_end: ReportingEnd provides the end of the time
        period covered by the message (in the case of data).
    :ivar embargo_date: EmbargoDate holds a time period before which the
        data included in this message is not available.
    :ivar structure:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    reporting_begin: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_end: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    embargo_date: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure: list[StructureSpecificMetadataStructureType] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "min_occurs": 1,
        },
    )


@dataclass
class AttributeWhereType(DataStructureComponentWhereType):
    """AttributeWhereType describes the structure of an attribute query.

    An attribute can be queried based on its identification, the concept
    from which it takes its semantic, the role it plays, and the code
    list it uses as the enumeration of its representation. This is an
    implicit set of "and" parameters, that is the conditions within this
    must all be met in order to return a match.

    :ivar role: Role is used to specify the role of the attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    role: list[ConceptReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class CategorisationWhereBaseType(MaintainableWhereType):
    """
    CategorisationWhereBaseType is an abstract base type which forms the basis for
    the CategorisationWhereType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.CATEGORISATION,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class CategoryWhere(CategoryWhereType):
    """CategoryWhere is used to query for categories matching the parameters
    supplied.

    It allows for nested category queries so that hierarchical
    categories can be queried explicitly by their nested level, although
    a top level category will always result in a search for categories
    at any level. This is an implicit set of "and" parameters, meaning
    all of the conditions must be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class CodeWhere(CodeWhereType):
    """CodeWhere is used to query for codes matching the parameters supplied.

    This is an implicit set of "and" parameters, meaning all of the
    conditions must be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ConceptWhereType(ConceptWhereBaseType):
    """ConceptWhereType defines a set of parameters for matching a category.

    All supplied parameters must be matched in order for an object to
    satisfy the query. In addition to the base parameters for an item, a
    concept can be queried based on the item scheme that is used as a
    core representation.

    :ivar enumeration: Enumeration is used to query for a concept based
        on the codelist that is uses as the enumeration for its core
        representation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    enumeration: None | CodelistReferenceType = field(
        default=None,
        metadata={
            "name": "Enumeration",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ConstraintAttachmentWhereType:
    """ConstraintAttachmentWhereType describes the structure for querying for a
    constraint based on the objects it is attached to.

    A constraint attachment query is implicitly an and-query meaning all
    of the referenced objects must be part of a constraints attachment
    in order to return a match. It is treated as a condition within its
    parent query.

    :ivar data_provider: DataProviderReference references a data
        provider to which a constraint is attached. It is referenced via
        a URN and/or a full set of reference fields. If a constraint is
        attached to the data provider referenced, a match will be
        returned.
    :ivar dataflow: DataflowReference references a data flow to which a
        constraint is attached. It is referenced via a URN and/or a full
        set of reference fields. If a constraint is attached to the data
        flow referenced, a match will be returned.
    :ivar data_structure: DataStructureReference references a data
        structure definition to which a constraint is attached. It is
        referenced via a URN and/or a full set of reference fields. If a
        constraint is attached to the data structure definition
        referenced, a match will be returned.
    :ivar metadataflow: MetadataflowReference references a metadata flow
        to which a constraint is attached. It is referenced via a URN
        and/or a full set of reference fields. If a constraint is
        attached to the metadata flow referenced, a match will be
        returned.
    :ivar metadata_structure: MetadataStructureReference references a
        metadata structure definition to which a constraint is attached.
        It is referenced via a URN and/or a full set of reference
        fields. If a constraint is attached to the metadata structure
        definition referenced, a match will be returned.
    :ivar provision_agreement: ProvisionAgreementReference references a
        provision agreement to which a constraint is attached. It is
        referenced via a URN and/or a full set of reference fields. If a
        constraint is attached to the provision agreement referenced, a
        match will be returned.
    :ivar data_set: DataSetReference references a data set to which a
        constraint is attached. If a constraint is attached to the data
        set referenced, a match will be returned.
    :ivar metadata_set: MetadataSetReference references a reference
        metadata set to which a constraint is attached. If a constraint
        is attached to the metadata set referenced, a match will be
        returned.
    :ivar data_source_url: DataSourceURL references a queryable data
        source to which a constraint it attached. The data source is
        referenced by its data URL. If a constraint is attached to the
        data source described (by matching the data URL), a match will
        be returned.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    data_provider: list[DataProviderReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    dataflow: list[DataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_structure: list[DataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadataflow: list[MetadataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_structure: list[MetadataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_source_url: list[str] = field(
        default_factory=list,
        metadata={
            "name": "DataSourceURL",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ConstraintWhereBaseType(MaintainableWhereType):
    """
    ConstraintWhereBaseType is an abstract base type which forms the basis for the
    ConstraintWhereType.

    :ivar type_value: The type attribute indicates the type of
        constraint that is being queried for, with a default of Any,
        meaning both content and attachment constraints will be
        searched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: ConstraintTypeCodelistType2 = field(
        default=ConstraintTypeCodelistType2.CONSTRAINT,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class DataParametersAndType(DataParametersType):
    """DataParametersAndType refines the base data parameters to define a set of
    parameters joined by an "and" conditions.

    All of the parameters supplied in an instance of this type must be
    satisfied to result in a match. As a result of this condition, the
    maximum occurrence of some parameters has been reduced so as to not
    allow for impossible conditions to be specified (for example data
    cannot be matched is it is specified that the data set identifier
    should be "xyz" and the data identifier should be "abc".

    :ivar and_value: And contains a collection of additional parameters,
        all of which must be satisfied to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    and_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataParametersOrType(DataParametersType):
    """DataParametersOrType refines the base data parameters to define a set of
    parameters joined by an "or" condition.

    Only one of the parameters supplied in an instance of this type can
    be satisfied to result in a match.

    :ivar or_value: Or contains a collection of additional parameters,
        any one of which can be satisfied to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    or_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataReturnDetailsType(DataReturnDetailsBaseType):
    """
    DataReturnDetailsType specifies the specifics of the how data should be
    returned, including how it should be structured and how many and what type
    (e.g. active or deleted) observations should be returned.

    :ivar first_nobservations: FirstNObservations specifies that number
        of observations indicated should be returned, starting from the
        earliest observation. Note that this can be used in conjunction
        with the LastNObservations. For example, if both
        FirstNObservations and LastNObservations had a value of 1, then
        the first and the last observation would be returned.
    :ivar last_nobservations: LastNObservations specifies that number of
        observations indicated should be returned, starting from the
        latest observation and working back. Note that this can be used
        in conjunction with the FirstNObservations. For example, if both
        FirstNObservations and LastNObservations had a value of 1, then
        the first and the last observation would be returned.
    :ivar structure: Structure defines how the is requested to be
        oriented in the returned message. For each data structure,
        dataflow, or provision agreement, a dimension at the observation
        level can be specified, and in the case that the dimension is a
        measure and the query is for structured data, the measure can be
        specified as being explicit. For any matched data in which there
        is not a structure specification, the query service can orient
        that data in any manner, although it is recommended that time be
        used as the observation dimension.
    :ivar observation_action: The observationAction attribute specifies
        the type of observations (added, deleted, udpated, or current)
        to be returned. In the absence of the Updated parameter, this
        will return all observations that have ever existed for Added,
        any observations that have ever been updated for Updated, and
        any observations that have ever been deleted for Deleted. Note
        that since observations themselves contain no status in the data
        messages, it is only possible to query for active observations
        or deleted observations, but not both. It is possible to subset
        active observation into recently added and recently updated,
        however it is only possible to retrieve on or the other. If
        active observations are returned, there will be no distinction
        as to whether an individual observation was updated or added
        during the requested Update parameter.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    first_nobservations: None | int = field(
        default=None,
        metadata={
            "name": "FirstNObservations",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    last_nobservations: None | int = field(
        default=None,
        metadata={
            "name": "LastNObservations",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    structure: list[DataStructureRequestType1] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    observation_action: ObservationActionCodeType = field(
        default=ObservationActionCodeType.ACTIVE,
        metadata={
            "name": "observationAction",
            "type": "Attribute",
        },
    )


@dataclass
class DataStructureRequestType2(DataStructureRequestType1):
    """
    DataStructureRequestType extends the base DataStructureRequestType to add
    additional parameters that are necessary when querying for a schema.

    :ivar time_series: The timeSeries attribute indicates that the
        requested schema should derived from the time series specific
        data set. If the observation dimension is anything but the time
        dimension, this field will be ignored.
    :ivar process_constraints: The processConstraints attribute
        indicates that constraints should be processed when returning
        the schema. If this value is false, then the schema will be
        based on the data structure deflation, regardless of whether the
        reference was specified as a provision agreement, dataflow, or
        data structure. If this is true, then the constraints at the
        requested level will be processed and the returned schema will
        take these constraints into account (i.e. the appropriate code
        lists will be sub-setted
    """

    class Meta:
        name = "DataStructureRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    time_series: bool = field(
        default=False,
        metadata={
            "name": "timeSeries",
            "type": "Attribute",
        },
    )
    process_constraints: bool = field(
        default=False,
        metadata={
            "name": "processConstraints",
            "type": "Attribute",
        },
    )


@dataclass
class DimensionWhereType(DataStructureComponentWhereType):
    """DimensionWhereType describes the structure of a dimension query.

    A dimension can be queried based on its identification, the concept
    from which it takes its semantic, the role it plays, and the code
    list it uses as the enumeration of its representation. This is an
    implicit set of "and" parameters, that is the conditions within this
    must all be met in order to return a match.

    :ivar role: Role is used to specify the role of the dimension.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    role: list[ConceptReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class HierarchicalCodelistWhereBaseType(MaintainableWhereType):
    """
    HierarchicalCodelistWhereBaseType is an abstract base type which forms the
    basis for the HierarchicalCodelistWhereType.

    :ivar type_value: The type attribute indicates the type of
        constraint that is being queried for, with a default of Any,
        meaning both content and attachment constraints will be
        searched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.HIERARCHICAL_CODELIST,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class MeasureDimensionWhereType(MeasureDimensionWhereBaseType):
    """MeasureDimensionWhereType describes the structure of a measure dimension
    query.

    A measure dimension can be queried based on its identification, the
    concept from which it takes its semantic, the role it plays, and the
    concept scheme which defines its measure concepts. This is an
    implicit set of "and" parameters, that is the conditions within this
    must all be met in order to return a match.

    :ivar role: Role is used to specify the role of the dimension.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    role: list[ConceptReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MetadataAttributeWhereType(MetadataAttributeWhereBaseType):
    """MetadataAttributeWhereType describes the parameters for a metadata
    attribute.

    A metadata attribute can be queried based on its identification, the
    concept from which it takes its semantic, and an item scheme it uses
    as its representation. Nested metadata attributes allow for the
    querying of metadata attributes explicitly at nested level, although
    a top level metadata attribute query will be processed by querying
    metadata attributes at any level. This is an implicit set of "and"
    parameters, that is the conditions within this must all be met in
    order to return a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    metadata_attribute_where: list["MetadataAttributeWhere"] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttributeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MetadataSchemaQueryType1:
    """MetadataSchemaQueryType defines the structure of a query for a structured
    metadata schema.

    This query consists of a single metadata structure which simply
    provides a reference to a metadata structure.

    :ivar metadata_structure: MetadataStructure references a metadata
        structure either explicitly or through it usage (metadataflow)
        or an application of that usage (provision agreement).
    """

    class Meta:
        name = "MetadataSchemaQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    metadata_structure: None | GenericMetadataStructureType = field(
        default=None,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class OrganisationWhere(OrganisationWhereType):
    """OrganisationWhere is used to query for organisations matching the parameters
    supplied.

    This is an implicit set of "and" parameters, meaning all of the
    conditions must be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class PrimaryMeasureWhereType(DataStructureComponentWhereType):
    """MeasureWhereType describes the structure of a measure query.

    The primary measure can be queried based on the concept from which
    it takes its semantic, and the code list it uses as the enumeration
    of its representation. This is an implicit set of "and" parameters,
    that is the conditions within this must all be met in order to
    return a match.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar id: ID is used to match the id of the identified object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ProcessWhereBaseType(MaintainableWhereType):
    """
    ProcessWhereBaseType is an abstract base type which forms the basis for the
    ProcessWhereType.

    :ivar type_value: The type attribute indicates the type of
        constraint that is being queried for, with a default of Any,
        meaning both content and attachment constraints will be
        searched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.PROCESS,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class ProvisionAgreementWhereBaseType(MaintainableWhereType):
    """
    ProvisionAgreementWhereBaseType is an abstract base type which forms the basis
    for the ProvisionAgreementWhereType.

    :ivar type_value: The type attribute indicates the type of
        constraint that is being queried for, with a default of Any,
        meaning both content and attachment constraints will be
        searched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.PROVISION_AGREEMENT,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class ReportingCategoryWhereType(ReportingCategoryWhereBaseType):
    """ReportingCategoryWhereType contains a set of parameters for matching a
    reporting category.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar provisioning_metadata: ProvisioningMetadata is used to query
        for a reporting category where the structure usages referenced
        are referenced by the reporting category.
    :ivar structural_metadata: StructuralMetadata is used to query for a
        reporting category where the structures referenced are
        referenced by the reporting category.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    provisioning_metadata: list[StructureUsageReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisioningMetadata",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    structural_metadata: list[StructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "StructuralMetadata",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class StructuralMetadataWhere(MaintainableWhereType):
    """StructuralMetadataWhere is an abstract substitution head that forms the
    basis of any structural metadata query's details.

    This contains the actual parameters to be matched. These parameters
    are implicitly joined by an "and" connector (i.e. each of the
    parameters must be matched in order to satisfy the query). If it is
    necessary to supply "or" conditions for a parameter, this should be
    done by supplying multiple queries.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class StructureSetWhereBaseType(MaintainableWhereType):
    """
    StructureSetWhereBaseType is an abstract base type which forms the basis for
    the StructureSetWhereType.

    :ivar type_value: The type attribute indicates the type of
        constraint that is being queried for, with a default of Any,
        meaning both content and attachment constraints will be
        searched.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.STRUCTURE_SET,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class StructureUsageWhereType(MaintainableWhereType):
    """
    StructureUsageWhereType is an abstract base type that serves as the basis for a
    query for a structure usage object.

    :ivar structure: Structure is used to match the structure referenced
        by a structure usage object. Only structure usages which
        reference the supplied structure will be returned.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structure: None | StructureReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class StructuresWhereType(MaintainableWhereType):
    """StructuresWhereType contains a set of parameters for a structures query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.ANY,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class TargetObjectWhereType(TargetObjectWhereBaseType):
    """TargetObjectWhereType describes the structure of a target object query.

    A target object can be queried based on its identification, its type
    (i.e. data set target, key descriptor values target, report period
    target, or identifiable object target), and in the case of an
    identifiable object target, an item scheme which enumerates the
    possible values and/or the class of the target object reference.

    :ivar type_value: The type attribute is used to query for a target
        object of a given type (i.e. data set target, key descriptor
        values target, report period target, or identifiable object
        target)
    :ivar target_class: The targetClass attribute is used to query for
        an identifiable object target based on the class its target
        object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: None | TargetObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )
    target_class: None | ObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "targetClass",
            "type": "Attribute",
        },
    )


@dataclass
class TimeDimensionWhereType(DataStructureComponentWhereType):
    """TimeDimensionWhereType describes the structure of a time dimension query.

    The time dimension can be queried based on the concept from which it
    takes its semantic. This is an implicit set of "and" parameters,
    that is the conditions within this must all be met in order to
    return a match.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar id: ID is used to match the id of the identified object.
    :ivar enumeration: Enumeration is used to query for a structure
        component based on the item scheme that is used as the
        enumeration for its representation. This enumeration may be
        explicit defined by the component (i.e. its local
        representation), or inherited from the concept from which the
        component takes its semantic (i.e. the concept core
        representation).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class EventSelectorType:
    """EventSelectorType describes the details of the events for a subscription.

    It allows subscribers to specify registry and repository events for
    which they wish to receive notifications.

    :ivar structural_repository_events: StructuralRepositoryEvents
        details structural events for the subscription.
    :ivar data_registration_events: DataRegistrationEvents details the
        data registration events for the subscription.
    :ivar metadata_registration_events: MetadataRegistrationEvents
        details the metadata registration events for the subscription.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    structural_repository_events: list[StructuralRepositoryEventsType] = field(
        default_factory=list,
        metadata={
            "name": "StructuralRepositoryEvents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "max_occurs": 3,
        },
    )
    data_registration_events: list[DataRegistrationEventsType] = field(
        default_factory=list,
        metadata={
            "name": "DataRegistrationEvents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "max_occurs": 3,
        },
    )
    metadata_registration_events: list[MetadataRegistrationEventsType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataRegistrationEvents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "max_occurs": 3,
        },
    )


@dataclass
class QueryRegistrationResponseType1:
    """QueryRegistrationResponseType describes the structure of a registration
    query response.

    It provides a status for the request, and if successful, the
    resulting data and/or metadata results.

    :ivar status_message: StatusMessage provides that status for the
        registration query request, and if necessary, any error or
        warning information.
    :ivar query_result: QueryResult contains a result for a successful
        registration query. It can occur multiple times, for each
        registration the meets the conditions specified in the query.
    """

    class Meta:
        name = "QueryRegistrationResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    status_message: None | StatusMessageType2 = field(
        default=None,
        metadata={
            "name": "StatusMessage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    query_result: list[QueryResultType] = field(
        default_factory=list,
        metadata={
            "name": "QueryResult",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )


@dataclass
class AttributeBaseType(ComponentType):
    """AttributeBaseType is an abstract base type that serves as the basis for the
    AttributeType.

    It restricts the text format base to a text format valid  for data
    components (that does not allow for XHTML representation). The local
    representation is restricted to the values defined in codelist. The
    concept role is restricted to the values valid for a data attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class BaseDimensionBaseType(ComponentType):
    """BaseDimensionBaseType is an abstract base type that serves as the basis for
    any dimension.

    It restricts the text format base to a text format valid  for data
    components (that does not allow for XHTML representation).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class Component(ComponentType):
    """Component is an abstract element that serves as a substitution head for all
    components.

    Concrete instances of this must use a concrete instance of
    ComponentType.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConstraintAttachmentType:
    """
    ConstraintAttachmentType describes a collection of references to constrainable
    artefacts.

    :ivar data_provider: DataProvider is reference to a data provider to
        which the constraint is attached. If this is used, then only the
        release calendar is relevant. The referenced is provided as a
        URN and/or a full set of reference fields.
    :ivar data_set: DataSet is reference to a data set to which the
        constraint is attached. The referenced is provided as a URN
        and/or a full set of reference fields.
    :ivar metadata_set: MetadataSet is reference to a metadata set to
        which the constraint is attached. The referenced is provided as
        a URN and/or a full set of reference fields.
    :ivar simple_data_source: SimpleDataSource describes a simple data
        source, which is a URL of a SDMX-ML data or metadata message.
    :ivar data_structure: DataStructure is reference to a data structure
        definition to which the constraint is attached. The referenced
        is provided as a URN and/or a full set of reference fields. A
        constraint which is attached to more than one data structure
        must only express key sets and/or cube regions where the
        identifiers of the dimensions are common across all structures
        to which the constraint is attached.
    :ivar queryable_data_source: QueryableDataSource describes a
        queryable data source to which the constraint is attached.
    :ivar metadata_structure: MetadataStructure is reference to a
        metadata structure definition to which the constraint is
        attached. The referenced is provided as a URN and/or a full set
        of reference fields. A constraint which is attached to more than
        one metadata structure must only express key sets and/or target
        regions where the identifiers of the target objects are common
        across all structures to which the constraint is attached.
    :ivar dataflow: Dataflow is reference to a data flow to which the
        constraint is attached. The referenced is provided as a URN
        and/or a full set of reference fields. A constraint can be
        attached to more than one dataflow, and the dataflows do not
        necessarily have to be usages of the same data structure.
        However, a constraint which is attached to more than one data
        structure must only express key sets and/or cube regions where
        the identifiers of the dimensions are common across all
        structures to which the constraint is attached.
    :ivar metadataflow: Metadataflow is reference to a metadata flow to
        which the constraint is attached. The referenced is provided as
        a URN and/or a full set of reference fields. A constraint can be
        attached to more than one metadataflow, and the metadataflows do
        not necessarily have to be usages of the same metadata
        structure. However, a constraint which is attached to more than
        one metadata structure must only express key sets and/or target
        regions where the identifiers of the target objects are common
        across all structures to which the constraint is attached.
    :ivar provision_agreement: ProvisionAgreementReference is reference
        to a provision agreement to which the constraint is attached.
        The referenced is provided as a URN and/or a full set of
        reference fields. A constraint can be attached to more than one
        provision aggreement, and the provision agreements do not
        necessarily have to be references structure usages based on the
        same structure. However, a constraint which is attached to more
        than one provision agreement must only express key sets and/or
        cube/target regions where the identifier of the components are
        common across all structures to which the constraint is
        attached.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    simple_data_source: list[str] = field(
        default_factory=list,
        metadata={
            "name": "SimpleDataSource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_structure: list[DataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    queryable_data_source: list[QueryableDataSourceType1] = field(
        default_factory=list,
        metadata={
            "name": "QueryableDataSource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_structure: list[MetadataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    dataflow: list[DataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadataflow: list[MetadataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ContentConstraintAttachmentType:
    """
    ContentConstraintAttachmentType defines the structure for specifying the target
    object(s) of a content constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_set: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_set: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "MetadataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    simple_data_source: None | str = field(
        default=None,
        metadata={
            "name": "SimpleDataSource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_structure: list[DataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    queryable_data_source: list[QueryableDataSourceType1] = field(
        default_factory=list,
        metadata={
            "name": "QueryableDataSource",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_structure: list[MetadataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    dataflow: list[DataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadataflow: list[MetadataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class GroupDimensionBaseType(ComponentType):
    """
    GroupDimensionBaseType is an abstract base type which refines the base
    ComponentType in order to form the basis for the GroupDimensionType.

    :ivar annotations:
    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation: LocalRepresentation references item
        schemes that may be used to create the representation of a
        component. The type of this must be refined such that a concrete
        item scheme reference is used.
    :ivar id:
    :ivar urn:
    :ivar uri:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    annotations: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_representation: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    uri: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class HybridCodelistMapType(HybridCodelistMapBaseType):
    """
    HybridCodelistMapType defines the structure of a map which relates codes
    (possibly hierarchical) from different code lists.

    :ivar source: Source provides a reference to either a codelist or a
        hierarchical codelist, from which the codes are to be mapped.
    :ivar target: Target provides a reference to either a codelist or a
        hierarchical codelist, to which the source codes are to be
        mapped.
    :ivar hybrid_code_map: HybridCodeMap defines the relationship of a
        code in the source list to code in the target list.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | AnyCodelistReferenceType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    target: None | AnyCodelistReferenceType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    hybrid_code_map: list[HybridCodeMapType] = field(
        default_factory=list,
        metadata={
            "name": "HybridCodeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ItemSchemeMapType(ItemSchemeMapBaseType):
    """
    ItemSchemeMapType is an abstract base type which forms the basis for mapping
    items between item schemes of the same type.

    :ivar source: Source provides a reference to the item scheme which
        items are mapped from.
    :ivar target: Target provides a reference to the item scheme which
        items are mapped to.
    :ivar reporting_category_map:
    :ivar concept_map:
    :ivar code_map:
    :ivar category_map:
    :ivar organisation_map:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | ItemSchemeReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    target: None | ItemSchemeReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    reporting_category_map: list[ReportingCategoryMap2] = field(
        default_factory=list,
        metadata={
            "name": "ReportingCategoryMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    concept_map: list[ConceptMap2] = field(
        default_factory=list,
        metadata={
            "name": "ConceptMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    code_map: list[CodeMap2] = field(
        default_factory=list,
        metadata={
            "name": "CodeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    category_map: list[CategoryMap] = field(
        default_factory=list,
        metadata={
            "name": "CategoryMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    organisation_map: list[OrganisationMap2] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ItemType(ItemBaseType):
    """ItemType is an abstract base type for all items with in an item scheme.

    Concrete instances of this type may or may not utilize the nested
    item, but if so should restrict the actual types of item allowed.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    parent: None | LocalItemReferenceType = field(
        default=None,
        metadata={
            "name": "Parent",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    reporting_category: list["ReportingCategory2"] = field(
        default_factory=list,
        metadata={
            "name": "ReportingCategory",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    organisation_unit: list["OrganisationUnit2"] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationUnit",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    data_provider: list["DataProvider2"] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    data_consumer: list["DataConsumer2"] = field(
        default_factory=list,
        metadata={
            "name": "DataConsumer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    agency: list["Agency2"] = field(
        default_factory=list,
        metadata={
            "name": "Agency",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    concept: list["Concept2"] = field(
        default_factory=list,
        metadata={
            "name": "Concept",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    code: list["Code2"] = field(
        default_factory=list,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )
    category: list["Category2"] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "sequence": 1,
        },
    )


@dataclass
class LevelType(LevelBaseType):
    """LevelType describes a level in a hierarchical codelist.

    Where level is defined as a group where codes can be characterised
    by homogeneous coding, and where the parent of each code in the
    group is at the same higher level of the hierarchy.

    :ivar coding_format: CodingFormat specifies the text formatting of
        the codes in this level. This includes facets such as the
        expected characters and the length of the codes.
    :ivar level: Level describes the next level down in the hierarchy.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    coding_format: None | CodingTextFormatType = field(
        default=None,
        metadata={
            "name": "CodingFormat",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    level: "None | LevelType" = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class MaintainableBaseType(VersionableType):
    """MaintainableBaseType is an abstract type that only serves the purpose of
    forming the base for the actual MaintainableType.

    The purpose of this type is to restrict the VersionableType to
    require the id attribute.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class MetadataAttributeBaseType(ComponentType):
    """
    MetadataAttributeBaseType is an abstract base type the serves as the basis for
    the MetadataAttributeType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class PrimaryMeasureType(ComponentType):
    """PrimaryMeasureType describes the structure of the primary measure.

    It describes the observation values for all presentations of the
    data. The primary measure takes its semantic, and in some cases it
    representation, from its concept identity (conventionally the
    OBS_VALUE concept). The primary measure can be coded by referencing
    a code list from its coded local representation. It can also specify
    its text format, which is used as the representation of the primary
    measure if a coded representation is not defined. Neither the coded
    or uncoded representation are necessary, since the primary measure
    may take these from the referenced concept. Note that if the data
    structure declares a measure dimension, the representation of this
    must be a superset of all possible measure concept representations.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="OBS_VALUE",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class ProcessStepType(ProcessStepBaseType):
    """ProcessStepType describes the structure of a process step.

    A nested process step is automatically sub-ordinate, and followed as
    the next step. If the following step is conditional, it should be
    referenced in a transition.

    :ivar input: Input references an object which is an input to the
        process step.
    :ivar output: Output references an object which is an output form
        the process step.
    :ivar computation: Computation describes the computations involved
        in the process, in any form desired by the user (these are
        informational rather than machine-actionable), and so may be
        supplied in multiple, parallel-language versions.
    :ivar transition: Transition describes the next process steps. Each
        transition in a process step should be evaluated, allowing for
        multiple process step branches from a single process step.
    :ivar process_step: ProcessStep defines a process step, which is a
        specific operation, performed on data in order to validate or to
        derive new information according to a given set of rules.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    input: list[InputOutputType] = field(
        default_factory=list,
        metadata={
            "name": "Input",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    output: list[InputOutputType] = field(
        default_factory=list,
        metadata={
            "name": "Output",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    computation: None | ComputationType = field(
        default=None,
        metadata={
            "name": "Computation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    transition: list[TransitionType] = field(
        default_factory=list,
        metadata={
            "name": "Transition",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    process_step: list["ProcessStepType"] = field(
        default_factory=list,
        metadata={
            "name": "ProcessStep",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ReportingYearStartDayRepresentationType(SimpleDataStructureRepresentationType):
    """ReportingYearStartDayRepresentationType defines the representation for the
    reporting year start day attribute.

    Enumerated values are not allowed and the text format is fixed to be
    a day and month in the ISO 8601 format of '--MM-DD'.

    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class StructureMapType(StructureMapBaseType):
    """StructureMapType defines the structure for mapping components of one
    structure to components of another structure.

    A structure may be referenced directly meaning the map applies
    wherever the structure is used, or it may be a reference via a
    structure usage meaning the map only applies within the context of
    that usage. Using the related structures, one can make
    extrapolations between maps. For example, if key families, A, B, and
    C, are all grouped in a related structures container, then a map
    from key family A to C and a map from key family B to C could be
    used to infer a relation between key family A to C.

    :ivar source: Source provides a reference to a structure (data or
        metadata) or a structure usage (dataflow or metadataflow) from
        which components defined by the actual structure are to mapped.
    :ivar target: Target provides a reference to a structure (data or
        metadata) or a structure usage (dataflow or metadataflow) to
        which components from the source are to mapped.
    :ivar component_map: ComponentMap defines the relationship between
        the components of the source and target structures, including
        information on how the value from the source component relates
        to values in the target component.
    :ivar is_extension: The isExtension attribute, when true, indicates
        that the target structure definition inherits all properties of
        the referenced structure definition, and may have additional
        components. Note that this attribute may only be set to true if
        the structure map has a source structure and a target structure
        of either two key families or two metadata structure
        definitions. It is not possible inherit the underlying concepts
        of components between the two type of structures using this
        mechanism.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | StructureOrUsageReferenceType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    target: None | StructureOrUsageReferenceType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    component_map: list[ComponentMapType] = field(
        default_factory=list,
        metadata={
            "name": "ComponentMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    is_extension: bool = field(
        default=False,
        metadata={
            "name": "isExtension",
            "type": "Attribute",
        },
    )


@dataclass
class TargetObject(ComponentType):
    """TargetObject is an abstract base type from which all target objects of a
    metadata target are derived.

    It is based on a component. Implementations of this will refined the
    local representation so that the allowed values accurately reflect
    the representation of the target object reference.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class TimeDimensionRepresentationType(SimpleDataStructureRepresentationType):
    """TimeDimensionRepresentationType defines the representation for the time
    dimension.

    Enumerated values are not allowed.

    :ivar enumeration: Enumeration references an item scheme that
        enumerates the allowable values for this representation.
    :ivar enumeration_format: EnumerationFormat describes the facets of
        the item scheme enumeration. This is for the most part,
        informational.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    enumeration: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    enumeration_format: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class AttributeValueSetType(ComponentValueSetType):
    """AttributeValueSetType defines the structure for providing values for a data
    attribute.

    If no values are provided, the attribute is implied to
    include/excluded from the region in which it is defined, with no
    regard to the value of the data attribute. Note that for metadata
    attributes which occur within other metadata attributes, a nested
    identifier can be provided. For example, a value of
    CONTACT.ADDRESS.STREET refers to the metadata attribute with the
    identifier STREET which exists in the ADDRESS metadata attribute in
    the CONTACT metadata attribute, which is defined at the root of the
    report structure.

    :ivar data_set: DataSet provides a reference to a data set and is
        used to state a value for the data set target component in a
        metadata target.
    :ivar data_key: DataKey provides a set of dimension references and
        value, which form a full or partial data key. This is used to
        state a value for the key descriptor values target component in
        a metadata target.
    :ivar object_value: Object provides a reference to an Identifiable
        object in the SDMX Information Model. This is used to state a
        value for an identifiable target component in a metadata target.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    data_set: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_key: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    object_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CubeRegionKeyType(ComponentValueSetType):
    """CubeRegionKeyType is a type for providing a set of values for a dimension
    for the purpose of defining a data cube region.

    A set of distinct value can be provided, or if this dimension is
    represented as time, and time range can be specified.

    :ivar data_set: DataSet provides a reference to a data set and is
        used to state a value for the data set target component in a
        metadata target.
    :ivar data_key: DataKey provides a set of dimension references and
        value, which form a full or partial data key. This is used to
        state a value for the key descriptor values target component in
        a metadata target.
    :ivar object_value: Object provides a reference to an Identifiable
        object in the SDMX Information Model. This is used to state a
        value for an identifiable target component in a metadata target.
    :ivar value:
    :ivar time_range:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    data_set: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_key: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    object_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    value: list[SimpleValueType1] = field(
        default_factory=list,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    time_range: None | TimeRangeValueType = field(
        default=None,
        metadata={
            "name": "TimeRange",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class DinstinctKeyValueType(ComponentValueSetType):
    """
    DinstinctKeyValueType is an abstract base type which defines a singular,
    required value for a key component.

    :ivar time_range: TimeValue provides a value for a component which
        has a time representation. This is repeatable to allow for a
        range to be specified, although a single value can also be
        provided. An operator is available on this to indicate whether
        the specified value indicates an exact value or the
        beginning/end of a range (inclusive or exclusive).
    :ivar value:
    :ivar data_set:
    :ivar data_key:
    :ivar object_value:
    :ivar include:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    time_range: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    value: None | SimpleKeyValueType = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_set: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_key: "None | DataKeyType" = field(
        default=None,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    object_value: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "Object",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    include: bool = field(
        init=False,
        default=True,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MetadataAttributeValueSetType(ComponentValueSetType):
    """MetadataAttributeValueSetType defines the structure for providing values for
    a metadata attribute.

    If no values are provided, the attribute is implied to
    include/excluded from the region in which it is defined, with no
    regard to the value of the metadata attribute.

    :ivar data_set: DataSet provides a reference to a data set and is
        used to state a value for the data set target component in a
        metadata target.
    :ivar data_key: DataKey provides a set of dimension references and
        value, which form a full or partial data key. This is used to
        state a value for the key descriptor values target component in
        a metadata target.
    :ivar object_value: Object provides a reference to an Identifiable
        object in the SDMX Information Model. This is used to state a
        value for an identifiable target component in a metadata target.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    data_set: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_key: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    object_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class TimeSeriesGenericDataStructureRequestType(GenericDataStructureRequestType):
    """TimeSeriesGenericDataStructureRequestType is a variation of a the
    GenericDataStructureRequestType for querying purposes.

    The observation dimension is fixed to TIME_PERIOD.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    dimension_at_observation: str | ObsDimensionsCodeType = field(
        init=False,
        default=ObsDimensionsCodeType.TIME_PERIOD,
        metadata={
            "name": "dimensionAtObservation",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class GenericDataType:
    """
    GenericDataType defines the contents of a generic data message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | GenericDataHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    data_set: list[DataSetType1] = field(
        default_factory=list,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class GenericTimeSeriesDataHeaderType(GenericDataHeaderType):
    """
    GenericTimeSeriesDataHeaderType defines the header structure for a time series
    only generic data message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    structure: None | GenericTimeSeriesDataStructureType = field(
        default=None,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class MetadataSchemaQueryType2:
    """
    MetadataSchemaQueryType defines the structure of a metadata schema query
    message.
    """

    class Meta:
        name = "MetadataSchemaQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | MetadataSchemaQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class StructureSpecificDataType:
    """StructureSpecificDataType defines the structure of the structure specific
    data message.

    Note that the data set payload type is abstract, and therefore it
    will have to be assigned a type in an instance. This type must be
    derived from the base type referenced. This base type defines a
    general structure which can be followed to allow for generic
    processing of the data even if the exact details of the data
    structure specific format are not known.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | StructureSpecificDataHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    data_set: list[DataSetType2] = field(
        default_factory=list,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class StructureSpecificTimeSeriesDataHeaderType(StructureSpecificDataHeaderType):
    """
    StructureSpecificTimeSeriesDataHeaderType defines the header structure for a
    time series only structure specific data message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    structure: list[StructureSpecificDataTimeSeriesStructureType] = field(
        default_factory=list,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "min_occurs": 1,
        },
    )


@dataclass
class AttributeWhere(AttributeWhereType):
    """AttributeWhere is used to query for a data structure definition that
    contains an attribute meeting the conditions contained in this structure.

    The attribute can be queried based on its identification, the
    concept from which it takes its semantic, its attachment level, the
    role it plays, and the code list it uses as the enumeration of its
    representation. This is an implicit set of "and" parameters, that is
    the conditions within this must all be met in order to return a
    match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class CategorisationWhereType(CategorisationWhereBaseType):
    """CategorisationWhereType contains a set of parameters for a categorisation
    query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar category_scheme: CategoryScheme references a category scheme
        for which categorisations or sought for any of the scheme's
        categories. Any categorisation which has a target of a category
        defined in the scheme will be returned.
    :ivar target_category: TargetCategory references the category that
        defines the target of the categorisation (the category which an
        object is categorized against). Only categorisations which
        refence the category supplied here will be returned.
    :ivar object_reference: ObjectReference references the object that
        is the source of the categorisation (the object which is
        categorized). Only categorisations which reference the object
        supplied here will be returned.
    :ivar categorised_object_type: CategorisedObjectType is used to
        specify the type of objects that are categorised by the
        categorisations being sought. For example, this could be used to
        find an caategorisation which classifies a code list.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    category_scheme: None | CategorySchemeReferenceType = field(
        default=None,
        metadata={
            "name": "CategoryScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    target_category: None | CategoryReferenceType = field(
        default=None,
        metadata={
            "name": "TargetCategory",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    object_reference: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "ObjectReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    categorised_object_type: list[ObjectTypeCodelistType] = field(
        default_factory=list,
        metadata={
            "name": "CategorisedObjectType",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ConceptWhere(ConceptWhereType):
    """ConceptWhere is used to query for concepts matching the parameters supplied.

    This is an implicit set of "and" parameters, meaning all of the
    conditions must be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ConstraintWhereType(ConstraintWhereBaseType):
    """ConstraintWhereType contains the parameters of a constraint query.

    All supplied parameters must be matched in order for an object to
    stratify the query.

    :ivar constraint_attachment_where: ConstraintAttachmentWhere
        identifies a collection of objects to which a constraint may be
        attached. This container is an implicit and-query, meaning all
        of the objects referenced in here must be part of the constraint
        attachment in order for a constraint to match.
    :ivar allowable: The allowable attribute indicates whether the
        returned search should be limited to only allowable constraints.
        This only applies to content constraint. If this attribute has a
        value  of true, this indicates that only matching allowable
        content constraints should be returned. If this is false, than
        only actual content constraints returned. If no value is
        provided, all matching content constraints will be returned,
        regardless of whether they are stating actual or allowable
        content.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    constraint_attachment_where: None | ConstraintAttachmentWhereType = field(
        default=None,
        metadata={
            "name": "ConstraintAttachmentWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    allowable: None | bool = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DataQueryType1:
    """DataQueryType defines the structure of a query for data.

    This is generally appliable for any data request, but can be refined
    depending on the type of data being queried (generic or structured,
    time series specific or not) to the requirements of the requested
    format.

    :ivar return_details: ReturnDetails contains the details of how the
        returned data should be structured, what type of data (e.g.
        active or deleted observations), and the limit of the amount of
        observations to be returned.
    :ivar data_where: DataWhere contains the details of the data query.
    """

    class Meta:
        name = "DataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    return_details: None | DataReturnDetailsType = field(
        default=None,
        metadata={
            "name": "ReturnDetails",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    data_where: None | DataParametersAndType = field(
        default=None,
        metadata={
            "name": "DataWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class DataSchemaQueryType1:
    """DataSchemaQueryType defines the structure of a query for a structured data
    schema.

    This query consists of a single data structure which provides the
    full details of what type of structured data schema should be
    returned.

    :ivar data_structure: DataStructure references a data structure
        either explicitly or through a usage (dataflow) or agreement
        based on the flow (provision agreement). An observation
        dimension must be specifies as well as indicators for using
        explicit measures, deriving the type from the time series
        specific data set, and processing constraints. The explicit
        measure option is only applicable if the observation dimension
        is the measure dimension; otherwise the value provided will be
        ignored. The time series option is only applicable  if the
        observation dimension is the time dimension; otherwise the value
        provided will be ignored. Constraints will only be applied in
        the returned schemas if specifically requested. This means that
        even if the request specifies a provision agreement, the
        returned schema will not take into account the constraints on
        that agreement unless the request explicitly requests this.
    """

    class Meta:
        name = "DataSchemaQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    data_structure: None | DataStructureRequestType2 = field(
        default=None,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class DataflowWhereType(StructureUsageWhereType):
    """DataflowWhereType contains the parameters of a dataflow query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.DATAFLOW,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class DimensionWhere(DimensionWhereType):
    """DimensionWhere is used to query for a data structure definition that
    contains a dimension meeting the conditions contained in this structure.

    The dimension can be queried based on its identification, the
    concept from which it takes its semantic, the role it plays, and the
    code list it uses as the enumeration of its representation. This is
    an implicit set of "and" parameters, that is the conditions within
    this must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class GenericDataReturnDetailsType(DataReturnDetailsType):
    """
    GenericDataReturnDetailsType specifies the specifics of the how data should be
    returned as it pertains to a request for generic data.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class GroupDimensionWhere(DimensionWhereType):
    """GroupDimensionWhere is used to query a group based on the details of the
    dimensions it groups.

    This is an implicit set of "and" parameters, that is the conditions
    within this must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class HierarchicalCodelistWhereType(HierarchicalCodelistWhereBaseType):
    """HierarchicalCodelistWhereType contains the parameters of a hierarchical
    codelist query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar included_codelist: IncludedCodelist is used to reference a
        codelist which the hierarchical codelist to be matched
        references.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    included_codelist: list[CodelistReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "IncludedCodelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MeasureDimensionWhere(MeasureDimensionWhereType):
    """MeasureDimensionWhere is used to query for a data structure definition that
    contains a measure dimension meeting the conditions contained in this
    structure.

    The cross-sectional measure can be queried based on its
    identification, the concept from which it takes its semantic, and
    the concept scheme it uses as the enumeration of its representation.
    This is an implicit set of "and" parameters, that is the conditions
    within this must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class MetadataAttributeWhere(MetadataAttributeWhereType):
    """MetadataAttributeWhere is a parameter which is used in a report structure
    parameter or to query metadata structure definitions where a contained metadata
    attribute meets the conditions specified.

    A metadata attribute can be queried based on its identification, the
    concept from which it takes its semantic, and an item scheme it uses
    as its representation. Nested metadata attributes allow for the
    querying of metadata attributes explicitly at nested level, although
    a top level metadata attribute query will be processed by querying
    metadata attributes at any level. This is an implicit set of "and"
    parameters, that is the conditions within this must all be met in
    order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class MetadataflowWhereType(StructureUsageWhereType):
    """MetadataflowWhereType contains the parameters of a metadataflow query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.METADATAFLOW,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class PrimaryMeasureWhere(PrimaryMeasureWhereType):
    """PrimaryMeasureWhere is used to query for a data structure definition that
    contains a primary measure meeting the conditions contained in this structure.

    The primary measure can be queried based on its identification, the
    concept from which it takes its semantic, and the code list it uses
    as the enumeration of its representation. This is an implicit set of
    "and" parameters, that is the conditions within this must all be met
    in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ProcessWhereType(ProcessWhereBaseType):
    """ProcessWhereType defines the parameters of a process query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar process_step_where: ProcessStepWhere is used to query for
        process steps matching the parameters supplied. It allows for
        nested process step queries so that hierarchical steps can be
        queried explicitly by their nested level, although a top level
        step will always result in a search for process steps at any
        level. This is an implicit set of "and" parameters, meaning all
        of the conditions must be met in order to return a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    process_step_where: list[ProcessStepWhereType] = field(
        default_factory=list,
        metadata={
            "name": "ProcessStepWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ProvisionAgreementWhereType(ProvisionAgreementWhereBaseType):
    """ProvisionAgreementWhereType defines the parameters of a provision agreement
    query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar structure_usage: StructureUsage is used to indicate which
        structure usage the provision agreement must reference in order
        to constitute a match.
    :ivar data_provider: DataProvider is used to indicate which data
        provider the provision agreement must reference in order to
        constitute a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structure_usage: None | StructureUsageReferenceType = field(
        default=None,
        metadata={
            "name": "StructureUsage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class ReportingCategoryWhere(ReportingCategoryWhereType):
    """ReportingCategoryWhere is used to query for reporting categories matching
    the parameters supplied.

    It allows for nested reporting category queries so that hierarchical
    reporting categories can be queried explicitly by their nested
    level, although a top level reporting category will always result in
    a search for reporting categories at any level. This is an implicit
    set of "and" parameters, meaning all of the conditions must be met
    in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class StructureSetWhereType(StructureSetWhereBaseType):
    """StructureSetWhereType defines the parameters of a structure set query.

    All supplied parameters must be matched in order for an object to
    satisfy the query. In addition to querying based on the base
    maintainable parameters, it is also possible to search based on the
    structures that are related by the set or the objects which are
    mapped by the set's maps.

    :ivar related_structures: RelatedStructure is used to query for
        structure sets where the referenced key families, metadata
        structure definitions, dataflows, and metadataflows are related
        to another by the structure set.
    :ivar mapped_object: MappedObject is used to query for structure
        sets where the reference object is mapped in one of the maps
        defined by the structure set. The referenced object can be
        specified as being either a source, a target, or either in the
        queried map.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    related_structures: list[StructureOrUsageReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "RelatedStructures",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    mapped_object: list[MappedObjectType] = field(
        default_factory=list,
        metadata={
            "name": "MappedObject",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class StructuresWhere(StructuresWhereType):
    """StructuresWhere defines the parameters for a structures query.

    All parameters must be matched for an object to satisfy the query.
    Only the basic maintainable parameters are available.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TargetObjectWhere(TargetObjectWhereType):
    """IdentifierComponentWhere is used to query for specific target identifiers or
    metadata structure definitions where a contained identifier component meets the
    conditions detailed.

    This is an implicit set of "and" parameters, that is the conditions
    within this must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TimeDimensionWhere(TimeDimensionWhereType):
    """TimeDimensionWhere is used to query for a data structure definition that
    contains a time dimension meeting the conditions contained in this structure.

    The time dimension can be queried based on its identification and
    the concept from which it takes its semantic. This is an implicit
    set of "and" parameters, that is the conditions within this must all
    be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TimeSeriesDataReturnDetailsType(DataReturnDetailsType):
    """
    TimeSeriesDataReturnDetailsType specifies the specifics of the how data should
    be returned as it pertains to a request for time series only oriented data in
    the structured format.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class SubscriptionType:
    """SubscriptionType describes the details of a subscription to a registration
    or change event for registry resources.

    When it occurs as the content of a response message, the registry
    URN must be provide, unless the response is a failure notification
    for the creation of a new subscription.

    :ivar organisation: Organisation provides a reference to the
        organisation that owns this subscription. The reference is
        provided via a URN and/or a complete set of reference fields.
    :ivar registry_urn: RegistryURN is used to identify the subscription
        in the case of deletion or modification. This should be provided
        in all response messages, unless the response it a notification
        of the failure to create a newly submitted subscription - in
        which case there will be no registry assigned URN.
    :ivar notification_mail_to: NotificationMailTo holds an e-mail
        address (the "mailto:" protocol). Multiple email address can be
        notified for a single subscription.
    :ivar notification_http: NotificationHTTP holds an http address to
        which notifications can be addressed as POSTs. Multiple http
        address may be notified for a single subscription event.
    :ivar subscriber_assigned_id: SubscriberAssignedID allows the
        subscriber to specify an identification which will be returned
        as part of the notification for the subscribed events. This
        should be used if multiple new requests are made, so that the
        responses can be accurately correlated to the requests.
    :ivar validity_period: Validity period sets a start and end date for
        the subscription.
    :ivar event_selector: EventSelector indicates an event or events for
        the subscription.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    organisation: None | OrganisationReferenceType = field(
        default=None,
        metadata={
            "name": "Organisation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    registry_urn: None | str = field(
        default=None,
        metadata={
            "name": "RegistryURN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    notification_mail_to: list[NotificationUrltype] = field(
        default_factory=list,
        metadata={
            "name": "NotificationMailTo",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    notification_http: list[NotificationUrltype] = field(
        default_factory=list,
        metadata={
            "name": "NotificationHTTP",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    subscriber_assigned_id: None | str = field(
        default=None,
        metadata={
            "name": "SubscriberAssignedID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    validity_period: None | ValidityPeriodType = field(
        default=None,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    event_selector: None | EventSelectorType = field(
        default=None,
        metadata={
            "name": "EventSelector",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )


@dataclass
class AttachmentConstraintAttachmentType(ConstraintAttachmentType):
    """
    AttachmentConstraintAttachmentType defines the structure for specifying the
    object to which an attachment constraints applies.

    :ivar data_provider: DataProvider is reference to a data provider to
        which the constraint is attached. If this is used, then only the
        release calendar is relevant. The referenced is provided as a
        URN and/or a full set of reference fields.
    :ivar queryable_data_source: QueryableDataSource describes a
        queryable data source to which the constraint is attached.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    queryable_data_source: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class AttributeType(AttributeBaseType):
    """AttributeType describes the structure of a data attribute, which is defined
    as a characteristic of an object or entity.

    The attribute takes its semantic, and in some cases it
    representation, from its concept identity. An attribute can be coded
    by referencing a code list from its coded local representation. It
    can also specify its text format, which is used as the
    representation of the attribute if a coded representation is not
    defined. Neither the coded or uncoded representation are necessary,
    since the attribute may take these from the referenced concept. An
    attribute specifies its relationship with other data structure
    components and is given an assignment status. These two properties
    dictate where in a data message the attribute will be attached, and
    whether or not the attribute will be required to be given a value. A
    set of roles defined in concept scheme can be assigned to the
    attribute.

    :ivar concept_role: ConceptRole references concepts which define
        roles which this attribute serves. If the concept from which the
        attribute takes its identity also defines a role the concept
        serves, then the isConceptRole indicator can be set to true on
        the concept identity rather than repeating the reference here.
    :ivar attribute_relationship: AttributeRelationship describes how
        the value of this attribute varies with the values of other
        components. These relationships will be used to determine the
        attachment level of the attribute in the various data formats.
    :ivar assignment_status: The assignmentStatus attribute indicates
        whether a value must be provided for the attribute when sending
        documentation along with the data.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_role: list[ConceptReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptRole",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    attribute_relationship: None | AttributeRelationshipType = field(
        default=None,
        metadata={
            "name": "AttributeRelationship",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    assignment_status: None | UsageStatusType = field(
        default=None,
        metadata={
            "name": "assignmentStatus",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class BaseDimensionType(BaseDimensionBaseType):
    """
    BaseDimensionType is an abstract base type which defines the basic structure of
    all dimensions.

    :ivar concept_role: ConceptRole references concepts which define
        roles which this dimension serves. If the concept from which the
        attribute takes its identity also defines a role the concept
        serves, then the isConceptRole indicator can be set to true on
        the concept identity rather than repeating the reference here.
    :ivar position: The position attribute specifies the position of the
        dimension in the data structure definition. It is optional an
        the position of the dimension in the key descriptor
        (DimensionList element) always takes precedence over the value
        supplied here. This is strictly for informational purposes only.
    :ivar type_value: The type attribute identifies whether then
        dimension is a measure dimension, the time dimension, or a
        regular dimension. Although these are all apparent by the
        element names, this attribute allows for each dimension to be
        processed independent of its element as well as maintaining the
        restriction of only one measure and time dimension while still
        allowing dimension to occur in any order.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_role: list[ConceptReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptRole",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    position: None | int = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: None | DimensionTypeType = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class BaseOrganisationType(ItemType):
    """
    BaseOrganisationType is an abstract base type the forms the basis for the
    OrganisationType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CategorySchemeMapType(ItemSchemeMapType):
    """
    CategorySchemeMapType defines the structure of a map which identifies
    relationships between categories in different category schemes.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_map: list[CategoryMap] = field(
        default_factory=list,
        metadata={
            "name": "CategoryMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class CategoryType(ItemType):
    """CategoryType describes the details of a category.

    A category is defined as an item at any level in a classification.
    The Category element represents a set of nested categories which are
    child categories.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CodeType(ItemType):
    """CodeType describes the structure of a code.

    A code is defined as a language independent set of letters, numbers
    or symbols that represent a concept whose meaning is described in a
    natural language. Presentational information not present may be
    added through the use of annotations.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CodelistMapType(ItemSchemeMapType):
    """
    CodelistMapType defines the structure of a map which identifies relationships
    between codes in different codelists.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_map: list[CodeMap2] = field(
        default_factory=list,
        metadata={
            "name": "CodeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ConceptBaseType(ItemType):
    """
    ConceptBaseType is an abstract base type the forms the basis of the ConceptType
    by requiring a name and id, and restricting the content of the id.

    :ivar reporting_category:
    :ivar organisation_unit:
    :ivar data_provider:
    :ivar data_consumer:
    :ivar agency:
    :ivar concept:
    :ivar code:
    :ivar category:
    :ivar id: The id attribute holds the identification of the concept.
        The type of this id is restricted to the common:NCNNameIDType.
        This is necessary, since concept id may be used to create XML
        elements and attributes in data and metadata structure specific
        schemas and therefore must be compliant with the NCName type in
        XML Schema (see common:NCNameIDType for further details).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class ConceptSchemeMapType(ItemSchemeMapType):
    """
    ConceptSchemeMapType defines the structure of a map which identifies
    relationships between concepts in different concept schemes.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_map: list[ConceptMap2] = field(
        default_factory=list,
        metadata={
            "name": "ConceptMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ConstraintContentTargetType(TargetObject):
    """ConstraintTargetType defines the structure of a constraint target object.

    The constraint target object has a fixed representation and
    identifier.

    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation:
    :ivar id:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_representation: None | ConstraintRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="CONSTRAINT_CONTENT_TARGET",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class DataSetTargetType(TargetObject):
    """DataSetTargetType defines the structure of a data set target object.

    The data set target object has a fixed representation and
    identifier.

    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation:
    :ivar id:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_representation: None | DataSetRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="DATA_SET_TARGET",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class GroupDimensionType(GroupDimensionBaseType):
    """GroupDimensionType defines a dimension component with a group key descriptor
    component list.

    Although technically a component, this is essentially a reference to
    a dimension defined in the key descriptor. Therefore, the
    identification, name, and description, concept identity and
    representation properties that are typically available for a
    component are not allowed here, as they are all inherited from the
    referenced dimension.

    :ivar dimension_reference: DimensionReference provides a reference
        to a dimension defined in the key descriptor of the data
        structure definition in which this group key descriptor is
        defined.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    dimension_reference: None | LocalDimensionReferenceType = field(
        default=None,
        metadata={
            "name": "DimensionReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class HierarchyType(HierarchyBaseType):
    """The Hierarchy is an abstract type that provides for a classification
    structure of referenced codes arranged in levels of detail from the broadest to
    the most detailed level.

    The levels in which the code exist can be formal or informal.

    :ivar hierarchical_code: HierarchicalCode is used to assemble the
        codes from the codelist(s) referenced into a hierarchy.
    :ivar level: In a formally leveled hierarchy, Level describes a
        group of codes which are characterised by homogeneous coding,
        and where the parent of each code in the group is at the same
        higher level of the hierarchy. In a value based hierarchy Level
        describes information about the codes at the specified nesting
        level. This structure is recursive to indicate the hierarchy of
        the levels.
    :ivar leveled: The leveled attribute indicates that the hierarchy
        has formal levels. In this case, every code should have a level
        associated with it.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    hierarchical_code: list[HierarchicalCodeType] = field(
        default_factory=list,
        metadata={
            "name": "HierarchicalCode",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )
    level: None | LevelType = field(
        default=None,
        metadata={
            "name": "Level",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    leveled: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class IdentifiableObjectTargetBaseType(TargetObject):
    """
    IdentifiableObjectTargetBaseType is an abstract base type which forms the basis
    for the IdentifiableObjectTargetType.

    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation:
    :ivar id:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_representation: None | IdentifiableObjectRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class Item(ItemType):
    """Item is an abstract element that serves as a substitution head for all items
    in an item scheme, including those items nested within other items.

    Concrete instances of this must use a concrete instance of ItemType.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class KeyDescriptorValuesTargetType(TargetObject):
    """KeyDescriptorValuesTargetType defines the structure of a key descriptor
    values target object.

    The key descriptor values target object has a fixed representation
    and identifier.

    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation:
    :ivar id:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_representation: None | KeyDescriptorValuesRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="DIMENSION_DESCRIPTOR_VALUES_TARGET",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class MaintainableType(MaintainableBaseType):
    """
    MaintainableType is an abstract base type for all maintainable objects.

    :ivar agency_id: The agencyID must be provided, and identifies the
        maintenance agency of the object.
    :ivar is_final: The isFinal attribute indicates whether the object
        is unchangeable without versioning. If the value is true, the
        object must be versioned upon change. If the final attribute is
        not supplied, then the object is assumed not to be final. Note
        that all production objects must be final.
    :ivar is_external_reference: The isExternalReference attribute, if
        true, indicates that the actual object is not defined the
        corresponding element, rather its full details are defined
        elsewhere - indicated by either the registryURL, the
        repositoryURL, or the structureURL. The purpose of this is so
        that each structure message does not have to redefine object
        that are already defined elsewhere. If the isExternalReference
        attribute is not set, then it is assumed to be false, and the
        object should contain the full definition of its contents. If
        more than one of the registryURL, the repositoryURL, and the
        structureURL are supplied, then the application processing the
        object can choose the method it finds best suited to retrieve
        the details of the object.
    :ivar service_url: The serviceURL attribute indicates the URL of an
        SDMX SOAP web service from which the details of the object can
        be retrieved. Note that this can be a registry or and SDMX
        structural metadata repository, as they both implement that same
        web service interface.
    :ivar structure_url: The structureURL attribute indicates the URL of
        a SDMX-ML structure message (in the same version as the source
        document) in which the externally referenced object is
        contained. Note that this may be a URL of an SDMX RESTful web
        service which will return the referenced object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    agency_id: None | str = field(
        default=None,
        metadata={
            "name": "agencyID",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*(\.[A-Za-z][A-Za-z0-9_\-]*)*",
        },
    )
    is_final: bool = field(
        default=False,
        metadata={
            "name": "isFinal",
            "type": "Attribute",
        },
    )
    is_external_reference: bool = field(
        default=False,
        metadata={
            "name": "isExternalReference",
            "type": "Attribute",
        },
    )
    service_url: None | str = field(
        default=None,
        metadata={
            "name": "serviceURL",
            "type": "Attribute",
        },
    )
    structure_url: None | str = field(
        default=None,
        metadata={
            "name": "structureURL",
            "type": "Attribute",
        },
    )


@dataclass
class MetadataAttributeType(MetadataAttributeBaseType):
    """MetadataAttributeType describes the structure of a metadata attribute.

    The metadata attribute takes its semantic, and in some cases it
    representation, from its concept identity. A metadata attribute may
    be coded (via the local representation), uncoded (via the text
    format), or take no value. In addition to this value, the metadata
    attribute may also specify subordinate metadata attributes. If a
    metadata attribute only serves the purpose of containing subordinate
    metadata attributes, then the isPresentational attribute should be
    used. Otherwise, it is assumed to also take a value. If the metadata
    attribute does take a value, and a representation is not defined, it
    will be inherited from the concept it takes its semantic from. The
    optional id on the metadata attribute uniquely identifies it within
    the metadata structured definition. If this id is not supplied, its
    value is assumed to be that of the concept referenced from the
    concept identity. Note that a metadata attribute (as identified by
    the id attribute) definition  must be unique across the entire
    metadata structure definition (including target identifier,
    identifier component, and report structure ids). A metadata
    attribute may be used in multiple report structures and at different
    levels, but the content (value and/or child metadata attributes and
    their cardinality) of the metadata attribute cannot change.

    :ivar metadata_attribute:
    :ivar min_occurs: The minOccurs attribute indicates the minimum
        number of times this metadata attribute can occur within its
        parent object.
    :ivar max_occurs: The maxOccurs attribute indicates the maximum
        number of times this metadata attribute can occur within its
        parent object.
    :ivar is_presentational: The isPresentational attribute indicates
        whether the metadata attribute should allow for a value. A value
        of true, meaning the metadata attribute is presentational means
        that the attribute only contains child metadata attributes, and
        does not contain a value. If this attribute is not set to true,
        and a representation (coded or uncoded) is not defined, then the
        representation of the metadata attribute will be inherited from
        the concept from which it takes its identity.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: list["MetadataAttribute2"] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    min_occurs: int = field(
        default=1,
        metadata={
            "name": "minOccurs",
            "type": "Attribute",
        },
    )
    max_occurs: int | UnboundedCodeType = field(
        default=1,
        metadata={
            "name": "maxOccurs",
            "type": "Attribute",
            "min_inclusive": 1,
        },
    )
    is_presentational: bool = field(
        default=False,
        metadata={
            "name": "isPresentational",
            "type": "Attribute",
        },
    )


@dataclass
class OrganisationSchemeMapType(ItemSchemeMapType):
    """
    OrganisationSchemeMapType defines the structure of a map which identifies
    relationships between organisations in different organisation schemes.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_map: list[OrganisationMap2] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class PrimaryMeasure2(PrimaryMeasureType):
    """PrimaryMeasure defines the structure of the primary measure, which is the
    concept that is the value of the phenomenon to be measured in a data set.

    Although this may take its semantic from any concept, this is
    provided a fixed identifier (OBS_VALUE) so that it may be easily
    distinguished in data messages.
    """

    class Meta:
        name = "PrimaryMeasure"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ReportPeriodTargetType(TargetObject):
    """ReportPeriodTargetType defines the structure of a report period target
    object.

    The report period target object has a fixed representation and
    identifier.

    :ivar concept_identity: ConceptIdentity allows for the referencing
        of a concept in a concept scheme. The component takes its
        semantic from this concept, and if an id is not specified, it
        takes its identification as well. If a representation
        (LocalRepresentation) is not supplied, then the representation
        of the component is also inherited from the concept. Note that
        in the case of the component representation being inherited from
        the concept, the allowable representations for the component
        still apply. Therefore, if a component references a concept with
        a core representation that is not allowed for the concept, that
        representation must be locally overridden. For components which
        can specify a concept role, it is implied that the concept which
        is referenced also identifies a role for the component.
    :ivar local_representation:
    :ivar id:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_representation: None | ReportPeriodRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="REPORT_PERIOD_TARGET",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class ReportingCategoryBaseType(ItemType):
    """
    ReportingCategoryBaseType is an abstract base type that serves as the basis for
    the ReportingCategoryType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ReportingTaxonomyMapType(ItemSchemeMapType):
    """
    ReportingTaxonomyMapType defines the structure of a map which identifies
    relationships between reporting categories in different reporting taxonomies.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_map: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category_map: list[ReportingCategoryMap2] = field(
        default_factory=list,
        metadata={
            "name": "ReportingCategoryMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class DataKeyValueType(DinstinctKeyValueType):
    """DataKeyValueType is a type for providing a dimension value for the purpose
    of defining a distinct data key.

    Only a single value can be provided for the dimension.

    :ivar data_set: DataSet provides a reference to a data set and is
        used to state a value for the data set target component in a
        metadata target.
    :ivar data_key: DataKey provides a set of dimension references and
        value, which form a full or partial data key. This is used to
        state a value for the key descriptor values target component in
        a metadata target.
    :ivar object_value: Object provides a reference to an Identifiable
        object in the SDMX Information Model. This is used to state a
        value for an identifiable target component in a metadata target.
    :ivar time_range: TimeValue provides a value for a component which
        has a time representation. This is repeatable to allow for a
        range to be specified, although a single value can also be
        provided. An operator is available on this to indicate whether
        the specified value indicates an exact value or the
        beginning/end of a range (inclusive or exclusive).
    :ivar value:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    data_set: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_key: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    object_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_range: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    value: None | SimpleKeyValueType = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "required": True,
        },
    )


@dataclass
class DataQueryType2:
    """
    DataQueryType defines the structure of a data query message.
    """

    class Meta:
        name = "DataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | DataQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class DataSchemaQueryType2:
    """
    DataSchemaQueryType defines the structure of a data schema query message.
    """

    class Meta:
        name = "DataSchemaQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | DataSchemaQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class GenericData(GenericDataType):
    """GenericData is used to convey data in a non data structure specific form.

    Data sets in this message will be each have a related structure
    specification in the header, which states the data structure the
    data conforms to and how the data is organised (i.e. the observation
    dimension).
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class GenericTimeSeriesDataType(GenericDataType):
    """
    GenericTimeSeriesDataType defines the structure of the generic time series data
    message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class MetadataSchemaQuery(MetadataSchemaQueryType2):
    """
    MetadataSchemaQuery is used to query SDMX compliant databases or web services
    for metadata structure specific schemas for the purpose of validating
    structured metadata.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificData(StructureSpecificDataType):
    """StructureSpecificData is used to convey data structure specific according to
    data structure definition.

    The payload of this message (i.e. the data sets) will be based on
    XML schemas which are specific to the data structure definition and
    the orientation (i.e. the observation dimension) of the data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificTimeSeriesDataType(StructureSpecificDataType):
    """
    StructureSpecificTimeSeriesDataType defines the structure of the structure
    specific time series data message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class CategorisationWhere(CategorisationWhereType):
    """CategorisationWhere defines the parameters for a categorisation query.

    All parameters must be matched for an object to satisfy the query.In
    addition to querying based on the basic maintainable properties, it
    is also possible to search based on the source object being
    categorized and target category the object is categorized against.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ComponentListWhereType(IdentifiableWhereType):
    """ComponentListWhereType is an abstract base type that serves as the basis for
    a query for a component list within a structure query.

    A list of component where children are provided to query for the
    list's child components. The conditions within a component list
    query are implied to be in an and-query. If an id and a child
    component where condition are supplied, then both conditions will
    have to met in order for the component list query to return true.
    If, for instance, a query based on names in multiple languages is
    required, then multiple instances of the element utilizing this type
    should be used within an or-query container.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    metadata_attribute_where: list[MetadataAttributeWhere] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttributeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    target_object_where: list[TargetObjectWhere] = field(
        default_factory=list,
        metadata={
            "name": "TargetObjectWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    measure_dimension_where: list[MeasureDimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "MeasureDimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    primary_measure_where: list[PrimaryMeasureWhere] = field(
        default_factory=list,
        metadata={
            "name": "PrimaryMeasureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    time_dimension_where: list[TimeDimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "TimeDimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    dimension_where: list[DimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "DimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    attribute_where: list[AttributeWhere] = field(
        default_factory=list,
        metadata={
            "name": "AttributeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )
    group_dimension_where: list[GroupDimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "GroupDimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "sequence": 1,
        },
    )


@dataclass
class ConstraintWhere(ConstraintWhereType):
    """AttachmentConstraintWhere contains the parameters for a constraint query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a constraint based on the objects
    it applies to.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class DataflowWhere(DataflowWhereType):
    """DataflowWhere defines the parameters for a dataflow query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a dataflow based on the key family
    it defines the usage of.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class GenericDataQueryType1(DataQueryType1):
    """GenericDataQueryType defines the structure of a query for data formatted in
    the generic format.

    This structure generally applies to any type of generic data
    request, but can be refined to request time series only data.
    """

    class Meta:
        name = "GenericDataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class GenericTimeSeriesDataReturnDetailsType(GenericDataReturnDetailsType):
    """
    GenericTimeSeriesDataReturnDetailsType specifies the specifics of the how data
    should be returned as it pertains to a request for time series only oriented
    data in the generic format.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class HierarchicalCodelistWhere(HierarchicalCodelistWhereType):
    """HierarchicalCodelistWhere defines the parameters for a hierarchical codelist
    query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a hierarchical codelist based on
    the codelists it arranges into hierarchies.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ItemSchemeWhereType(MaintainableWhereType):
    """
    ItemSchemeQueryType is an abstract base type that serves as the basis for any
    query for an item scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    reporting_category_where: list[ReportingCategoryWhere] = field(
        default_factory=list,
        metadata={
            "name": "ReportingCategoryWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    organisation_where: list[OrganisationWhere] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    concept_where: list[ConceptWhere] = field(
        default_factory=list,
        metadata={
            "name": "ConceptWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    code_where: list[CodeWhere] = field(
        default_factory=list,
        metadata={
            "name": "CodeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    category_where: list[CategoryWhere] = field(
        default_factory=list,
        metadata={
            "name": "CategoryWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MetadataflowWhere(MetadataflowWhereType):
    """MetadataflowWhere contains the parameters for a metadataflow query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a metadataflow based on the
    metadata structure definition it defines the usage of.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ProcessWhere(ProcessWhereType):
    """ProcessWhere contains the parameters for a process query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to query based on the details of the process
    steps defined within the process. In any case, the entire process
    will be returned according the indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ProvisionAgreementWhere(ProvisionAgreementWhereType):
    """ProvisionAgreementWhere contains the parameters for a provision agreement
    query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a provision agreement based on the
    data provider and the structure usage it pairs.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class StructureSetWhere(StructureSetWhereType):
    """StructureSetWhere contains the parameters for a structure query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search based on the structures that are
    related by the set or the objects which are mapped by the set's
    maps. In any case, the structure set will be returned according the
    indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TimeSeriesDataQueryType(DataQueryType1):
    """TimeSeriesDataQueryType defines the structure of a query for data.

    This specifically applies to requesting time series only structured
    data.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class QuerySubscriptionResponseType1:
    """QuerySubscriptionResponseType describes the structure of a subscription
    query response.

    A status will describe the success or failure of the request (and
    provide error or warning messages if necessary). If the query was
    successful, details of all of the organisation's subscriptions will
    be provided.

    :ivar status_message: StatusMessage provides that status for the
        query subscription request, and if necessary, any error or
        warning information.
    :ivar subscription: Subscription contains the details of a
        subscription for the organisation. This may occur multiple times
        for each subscription.
    """

    class Meta:
        name = "QuerySubscriptionResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    status_message: None | StatusMessageType2 = field(
        default=None,
        metadata={
            "name": "StatusMessage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    subscription: list[SubscriptionType] = field(
        default_factory=list,
        metadata={
            "name": "Subscription",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )


@dataclass
class SubscriptionRequestType:
    """SubscriptionRequestType describes the structure of a single subscription
    request.

    It contains subscription details and an action field to indicate the
    action to be taken on the contained subscription. Note that if the
    action is update or delete, then the registry supplied URN for the
    subscription must be included.

    :ivar subscription: Subscription contains the details of the
        subscription to be added, updated, or deleted.
    :ivar action: The action attribute indicates whether this is an
        addition, a modification, or a deletion of a subscription.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    subscription: None | SubscriptionType = field(
        default=None,
        metadata={
            "name": "Subscription",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class Attribute2(AttributeType):
    """
    Attribute describes the definition of a data attribute, which is defined as a
    characteristic of an object or entity.
    """

    class Meta:
        name = "Attribute"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class CategorisationType(MaintainableType):
    """CategorisationType is defines the structure for a categorisation.

    A source object is referenced via an object reference and the target
    category is referenced via the target category.

    :ivar source: Source is a reference to an object to be categorized.
    :ivar target: Target is reference to the category that the
        referenced object is to be mapped to.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    source: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    target: None | CategoryReferenceType = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class Category2(CategoryType):
    """
    Category represents a set of nested categories which describe a simple
    classification hierarchy.
    """

    class Meta:
        name = "Category"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class Code2(CodeType):
    """Code describes a code in a codelist.

    In addition to the identification and description of the code, basic
    presentational information is also available. Presentational
    information not present may be added through the use of annotations.
    """

    class Meta:
        name = "Code"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConceptType(ConceptBaseType):
    """ConceptType describes the details of a concept.

    A concept is defined as a unit of knowledge created by a unique
    combination of characteristics. If a concept does not specify a
    TextFormat or a core representation, then the representation of the
    concept is assumed to be represented by any set of valid characters
    (corresponding to the xs:string datatype of W3C XML Schema).

    :ivar core_representation:
    :ivar isoconcept_reference: Provides a reference to an ISO 11179
        concept.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    core_representation: None | ConceptRepresentation = field(
        default=None,
        metadata={
            "name": "CoreRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    isoconcept_reference: None | IsoconceptReferenceType = field(
        default=None,
        metadata={
            "name": "ISOConceptReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ConstraintBaseType(MaintainableType):
    """ConstraintBaseType is an abstract base type that forms the basis of the main
    abstract ConstraintType.

    It requires that a name be provided.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConstraintContentTarget(ConstraintContentTargetType):
    """
    ConstraintContentTarget is target object which references an attachment
    constraint for the purpose of attaching reference metadata data to data key
    sets or cube regions defined by the constraint.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class DataSetTarget2(DataSetTargetType):
    """DataSetTarget is target object which references a data set for the purpose
    of attaching reference metadata data.

    A data set reference is a full reference to a data provider and an
    identifier for the data set.
    """

    class Meta:
        name = "DataSetTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class DimensionType(BaseDimensionType):
    """DimensionType describes the structure of an ordinary dimension, which is
    defined as a statistical concept used (most probably together with other
    statistical concepts) to identify a statistical series, such as a time series,
    e.g. a statistical concept indicating certain economic activity or a
    geographical reference area.

    The dimension takes its semantic, and in some cases it
    representation, from its concept identity. A dimension can be coded
    by referencing a code list from its coded local representation. It
    can also specify its text format, which is used as the
    representation of the dimension if a coded representation is not
    defined. Neither the coded or uncoded representation are necessary,
    since the dimension may take these from the referenced concept.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    type_value: DimensionTypeType = field(
        init=False,
        default=DimensionTypeType.DIMENSION,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class GroupDimension(GroupDimensionType):
    """GroupDimension is a component which contains only a reference to a dimension
    in the key descriptor (DimensionList).

    Although it is conventional to declare dimensions in the same order as they are declared in the ordered key, there is no requirement to do so - the ordering of the values of the key are taken from the order in which the dimensions are declared. Note that the id of a dimension may be inherited from its underlying concept - therefore this reference value may actually be the id of the concept.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class HierarchicalCodelistBaseType(MaintainableType):
    """HierarchicalCodelistBaseType is an abstract base class that is the basis for
    the HierarchicalCodelistType.

    It requires that a name be supplied.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class IdentifiableObjectTargetType(IdentifiableObjectTargetBaseType):
    """IdentifiableObjectTargetType defines the structure of an identifiable target
    object.

    The identifiable target object has a fixed representation of a
    reference and can specify a local representation of any item scheme
    for the purpose of restricting which items may be referenced. The
    identifiable object target must specify the object type which the
    target object is meant to reference.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    object_type: None | ObjectTypeCodelistType = field(
        default=None,
        metadata={
            "name": "objectType",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class KeyDescriptorValuesTarget(KeyDescriptorValuesTargetType):
    """KeyDescriptorValuesTarget is target object which references a data key for
    the purpose of attach reference metadata to portions of data.

    A data key is a set of dimension references and values for those
    dimension. This component on its own is not of much use, as the data
    key only has local references to the dimensions. Therefore it is
    typical that this is used in combination with some sort of reference
    to the data (either a data set reference or a reference to the
    underlying structure, structure usage, or provision agreement of the
    data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MeasureDimensionType(BaseDimensionType):
    """MeasureDimensionType defines the structure of the measure dimension.

    It is derived from the base dimension structure, but requires that a
    coded representation taken from a concept scheme is given.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    local_representation: None | MeasureDimensionRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    type_value: DimensionTypeType = field(
        init=False,
        default=DimensionTypeType.MEASURE_DIMENSION,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class MetadataAttribute2(MetadataAttributeType):
    """
    MetadataAttribute defines the a metadata attribute, which is the value of an
    attribute, such as the instance of a coded or uncoded attribute in a metadata
    structure definition.
    """

    class Meta:
        name = "MetadataAttribute"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class OrganisationType(BaseOrganisationType):
    """OrganisationType in an abstract type which describes the structure of the
    details of an organisation.

    In addition to the basic organisation identification, contact
    details can be provided.

    :ivar contact: Contact describes a contact for the organisation,
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    contact: list[ContactType1] = field(
        default_factory=list,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ProcessType(MaintainableType):
    """ProcessType describes the structure of a process, which is a scheme which
    defines or documents the operations performed on data in order to validate data
    or to derive new information according to a given set of rules.

    Processes occur in order, and will continue in order unless a
    transition dictates another step should occur.

    :ivar process_step: ProcessStep defines a process step, which is a
        specific operation, performed on data in order to validate or to
        derive new information according to a given set of rules.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    process_step: list[ProcessStepType] = field(
        default_factory=list,
        metadata={
            "name": "ProcessStep",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ProvisionAgreementType(MaintainableType):
    """ProvisionAgreementType describes the structure of a provision agreement.

    A provision agreement defines an agreement for a data provider to
    report data or reference metadata against a flow. Attributes which
    describe how the registry must behave when data or metadata is
    registered against this provision agreement are supplied.

    :ivar structure_usage: DataflowReference provides a reference to a
        pre-existing structure usage (i.e. a dataflow or metadataflow)
        in the registry. The reference is provided via a URN and/or a
        full set of reference fields.
    :ivar data_provider: DataProvider provides a reference to a pre-
        existing data (or metadata) provider in the registry. The
        reference is provided via a URN and/or a full set of reference
        fields.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    structure_usage: None | StructureUsageReferenceType = field(
        default=None,
        metadata={
            "name": "StructureUsage",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class ReportPeriodTarget2(ReportPeriodTargetType):
    """
    ReportPeriodTarget is target object which specifies a reporting period to which
    a metadata report applies.
    """

    class Meta:
        name = "ReportPeriodTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ReportingCategoryType(ReportingCategoryBaseType):
    """ReportingCategoryType describes the structure of a reporting category, which
    groups structure usages into useful sub-packages.

    Sub ordinate reporting categories can be nested within the category
    definition.

    :ivar structural_metadata: StructuralMetadata provides a reference
        for data structure definition and metadata structure definition
        references which are grouped in the reporting category. It is
        assumed that all structural metadata objects referenced from a
        category will be of the same type.
    :ivar provisioning_metadata: ProvisioningMetadata provides a
        reference for dataflow and metadataflow references which are
        grouped in the reporting category. It is assumed that all
        provisioning metadata objects referenced from a category will be
        of the same type.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    structural_metadata: list[StructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "StructuralMetadata",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    provisioning_metadata: list[StructureUsageReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisioningMetadata",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ReportingYearStartDayType(AttributeType):
    """ReportingYearStartDayType defines the structure of the reporting year start
    day attribute.

    The reporting year start day attribute takes its semantic from its
    concept identity (usually the REPORTING_YEAR_START_DAY concept), yet
    is always has a fixed identifier (REPORTING_YEAR_START_DAY). The
    reporting year start day attribute always has a fixed text format,
    which specifies that the format of its value is always a day and
    month in the ISO 8601 format of '--MM-DD'. As with any other
    attribute, an attribute relationship must be specified. this
    relationship should be carefully selected as it will determin what
    type of data the data structure definition will allow. For example,
    if an attribute relationship of none is specified, this will mean
    the data sets conforming to this data structure definition can only
    contain data with standard reporting periods where the all reporting
    periods have the same start day. In this case, data reported as
    standard reporting periods from two entities with different fiscal
    year start days could not be contained in the same data set.

    :ivar concept_role: ConceptRole references concepts which define
        roles which this attribute serves. If the concept from which the
        attribute takes its identity also defines a role the concept
        serves, then the isConceptRole indicator can be set to true on
        the concept identity rather than repeating the reference here.
    :ivar concept_identity:
    :ivar local_representation:
    :ivar id:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_role: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    local_representation: None | ReportingYearStartDayRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="REPORTING_YEAR_START_DAY",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class StructureSetBaseType(MaintainableType):
    """
    StructureSetBaseType is an abstract base type that forms the basis for the
    StructureSetType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class StructureUsageType(MaintainableType):
    """StructureUsageType is an abstract base type for all structure usages.

    It contains a reference to a structure. Concrete instances of this
    type should restrict the type of structure referenced.

    :ivar structure: Structure references the structure (data structure
        or metadata structure definition) which the structure usage is
        based upon. Implementations will have to refine the type to use
        a concrete structure reference (i.e. either a data structure or
        metadata structure definition reference).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    structure: None | StructureReferenceBaseType = field(
        default=None,
        metadata={
            "name": "Structure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class TimeDimensionType(BaseDimensionType):
    """TimeDimensionType describes the structure of a time dimension.

    The time dimension takes its semantic from its concept identity
    (usually the TIME_PERIOD concept), yet is always has a fixed
    identifier (TIME_PERIOD). The time dimension always has a fixed text
    format, which specifies that its format is always the in the value
    set of the observational time period (see
    common:ObservationalTimePeriodType). It is possible that the format
    may be a sub-set of the observational time period value set. For
    example, it is possible to state that the representation might
    always be a calendar year. See the enumerations of the textType
    attribute in the LocalRepresentation/TextFormat for more details of
    the possible sub-sets. It is also possible to facet this
    representation with start and end dates. The purpose of such facts
    is to restrict the value of the time dimension to occur within the
    specified range. If the time dimension is expected to allow for the
    standard reporting periods (see common:ReportingTimePeriodType) to
    be used, then it is strongly recommended that the reporting year
    start day attribute also be included in the data structure
    definition. When the reporting year start day attribute is used, any
    standard reporting period values will be assumed to be based on the
    start day contained in this attribute. If the reporting year start
    day attribute is not included and standard reporting periods are
    used, these values will be assumed to be based on a reporting year
    which begins January 1.

    :ivar concept_role: ConceptRole references concepts which define
        roles which this dimension serves. If the concept from which the
        attribute takes its identity also defines a role the concept
        serves, then the isConceptRole indicator can be set to true on
        the concept identity rather than repeating the reference here.
    :ivar concept_identity:
    :ivar local_representation:
    :ivar id:
    :ivar type_value:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_role: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_identity: None | ConceptReferenceType = field(
        default=None,
        metadata={
            "name": "ConceptIdentity",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    local_representation: None | TimeDimensionRepresentationType = field(
        default=None,
        metadata={
            "name": "LocalRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="TIME_PERIOD",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    type_value: DimensionTypeType = field(
        init=False,
        default=DimensionTypeType.TIME_DIMENSION,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class DataKeyType(DistinctKeyType):
    """DataKeyType is a region which defines a distinct full or partial data key.

    The key consists of a set of values, each referencing a dimension
    and providing a single value for that dimension. The purpose of the
    key is to define a subset of a data set (i.e. the observed value and
    data attribute) which have the dimension values provided in this
    definition. Any dimension not stated explicitly in this key is
    assumed to be wild carded, thus allowing for the definition of
    partial data keys.

    :ivar attribute: Attributes contains a reference to an attribute
        component (data or metadata) and provides a collection of values
        for the referenced attribute. This serves to state that for the
        key which defines the region, the attributes that are specified
        here have or do not have (depending to the include attribute of
        the value set) the values provided. It is possible to provide
        and attribute reference without specifying values, for the
        purpose of stating the attribute is absent (include = false) or
        present with an unbounded set of values. As opposed to key
        components, which are assumed to be wild carded if absent, no
        assumptions are made about the absence of an attribute. Only
        attributes which are explicitly stated to be present or absent
        from the region will be know. All unstated attributes for the
        set cannot be assumed to absent or present.
    :ivar local_attributes:
    :ivar key_value:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_attributes: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_value: list[DataKeyValueType] = field(
        default_factory=list,
        metadata={
            "name": "KeyValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )


@dataclass
class DataSchemaQuery(DataSchemaQueryType2):
    """
    DataSchemaQuery is used to query SDMX compliant databases or web services for
    data structure specific schemas for the purpose of validating structured data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class GenericDataQueryType2(DataQueryType2):
    """
    DataQueryType defines the structure of a generic data query message.
    """

    class Meta:
        name = "GenericDataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class GenericTimeSeriesData(GenericTimeSeriesDataType):
    """GenericTimeSeriesData is a special derivation of the generic data message
    which only allows for time series oriented date (i.e. the observation dimension
    must be time).

    Although this is a different message, the content of this message
    will be exactly the same as a generic data message that specifies
    time as the observation dimension; therefore no additional
    processing requirements are necessary. This message is intended to
    only be used when it is necessary to restrict an exchange to being
    only time series based data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificDataQuery(DataQueryType2):
    """
    StructureSpecificDataQuery is used to query SDMX compliant databases or web
    services for structure specific data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificTimeSeriesData(StructureSpecificTimeSeriesDataType):
    """StructureSpecificTimeSeriesData is a special derivation of the structure
    specific data message which only allows for time series oriented date (i.e. the
    observation dimension must be time).

    Although this is a different message, the content of this message
    will be exactly the same as a structure specific data message that
    specifies time as the observation dimension; therefore no additional
    processing requirements are necessary. This message is intended to
    only be used when it is necessary to restrict an exchange to being
    only time series based data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificTimeSeriesDataQueryType(DataQueryType2):
    """
    StructureSpecificTimeSeriesDataQueryType defines the structure of a time series
    generic data query message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class CategorySchemeWhereType(ItemSchemeWhereType):
    """CategorySchemeWhereType defines the parameters of a category scheme query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.CATEGORY_SCHEME,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class CodelistWhereType(ItemSchemeWhereType):
    """CodelistWhereType contains the parameters of a codelist query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.CODELIST,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class ComponentListWhere(ComponentListWhereType):
    """ComponentListWhere is an abstract substitution head to query for a component
    list within a structure.

    A component list where query is implicitly an and-query - that is the conditions within the component list where must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ConceptSchemeWhereType(ItemSchemeWhereType):
    """ConceptSchemeWhereType contains the parameters of a concept scheme query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.CONCEPT_SCHEME,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class GenericTimeSeriesDataQueryType1(GenericDataQueryType1):
    """
    GenericTimeSeriesDataQueryType defines the structure of a query for time series
    only data formatted in the generic format.
    """

    class Meta:
        name = "GenericTimeSeriesDataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class GroupWhereBaseType(ComponentListWhereType):
    """
    GroupWhereBaseType is an abstract base type that forms the basis for the
    GroupWhereType.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar metadata_attribute_where:
    :ivar target_object_where:
    :ivar measure_dimension_where:
    :ivar primary_measure_where:
    :ivar time_dimension_where:
    :ivar dimension_where:
    :ivar attribute_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    target_object_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataTargetWhereType(ComponentListWhereType):
    """MetadataTargetWhereType describes the structure that is used to query for
    metadata structure definitions containing a metadata target meeting the
    conditions detailed.

    Conditions include the identification and the details of the target
    objects which make up the metadata target.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar metadata_attribute_where:
    :ivar measure_dimension_where:
    :ivar primary_measure_where:
    :ivar time_dimension_where:
    :ivar dimension_where:
    :ivar attribute_where:
    :ivar group_dimension_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class OrganisationSchemeWhereType(ItemSchemeWhereType):
    """OrganisationSchemeWhereType contains the parameters of an organisation
    scheme query.

    All supplied parameters must be matched in order for an object to
    satisfy the query.

    :ivar reporting_category_where:
    :ivar concept_where:
    :ivar code_where:
    :ivar category_where:
    :ivar type_value: The type attribute indicates the type of
        organisation scheme which is being queried for, with the default
        being any organisation scheme. Note that agency, data consumer,
        and data provider scheme all have fixed identifiers and
        versions, so specifying these types with parameters for the
        identifier and/or version which do not match these fixed values
        will never return a result.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    reporting_category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: OrganisationSchemeTypeCodeType = field(
        default=OrganisationSchemeTypeCodeType.ORGANISATION_SCHEME,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class ReportStructureWhereType(ComponentListWhereType):
    """ReportStructureWhereType defines the parameters for matching based on the
    details of a report structure.

    This is used to query for metadata structure definitions where a
    given report structure meets the conditions specified. A report
    structure can be queried based on identification and details about
    its metadata attributes. This is an implicit set of "and"
    parameters, that is the conditions within this must all be met in
    order to return a match.

    :ivar urn: URN is used to match the urn of any SDMX object.
    :ivar target_object_where:
    :ivar measure_dimension_where:
    :ivar primary_measure_where:
    :ivar time_dimension_where:
    :ivar dimension_where:
    :ivar attribute_where:
    :ivar group_dimension_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    urn: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    target_object_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ReportingTaxonomyWhereType(ItemSchemeWhereType):
    """ReportingTaxonomyWhereType defines the parameters of a reporting taxonomy
    query.

    All supplied parameters must be matched in order for an object to
    satisfy the query. In addition to querying based on the base
    maintainable parameters, it is also possible to search for
    taxonomies that contain particular reporting categories, and on the
    root level structure definitions of the taxonomy.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    organisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.REPORTING_TAXONOMY,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class SubmitSubscriptionsRequestType1:
    """SubmitSubscriptionsRequestType defines the payload of a request message used
    to submit addtions, updates, or deletions of subscriptions.

    Subscriptions are submitted to the registry to subscribe to
    registration and change events for specific registry resources.
    """

    class Meta:
        name = "SubmitSubscriptionsRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    subscription_request: list[SubscriptionRequestType] = field(
        default_factory=list,
        metadata={
            "name": "SubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "min_occurs": 1,
        },
    )


@dataclass
class AgencyType(OrganisationType):
    """AgencyType defines the structure of an agency description.

    The contacts defined for the organisation are specific to the agency
    role the organisation is serving.

    :ivar parent:
    :ivar reporting_category:
    :ivar organisation_unit:
    :ivar data_provider:
    :ivar data_consumer:
    :ivar agency:
    :ivar concept:
    :ivar code:
    :ivar category:
    :ivar id: The id attribute holds the identification of the agency.
        The type of this id is restricted to the common:NCNNameIDType.
        This is necessary, since the agency identifier will be used as
        part of the name for simple types in data and metadata structure
        specific schemas and therefore must be compliant with the NCName
        type in XML Schema (see common:NCNameIDType for further
        details).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class CategorisationsType:
    """CategorisationsType describes the structure of the categorisations
    container.

    It contains one or more categorisation of a specific object type,
    which can be explicitly detailed or referenced from an external
    structure document or registry service. This container may contain
    categorisations for multiple types of structural objects.

    :ivar categorisation: Categorisation allows for the association of
        an identifiable object to a category, providing for the
        classifications of the reference identifiable object. This must
        either contain the full details of the categorisation, or
        provide a name and identification information and reference the
        full details from an external structure document or registry
        service.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    categorisation: list[CategorisationType] = field(
        default_factory=list,
        metadata={
            "name": "Categorisation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class Concept2(ConceptType):
    """
    Concept describes the details of a concept within a concept scheme.
    """

    class Meta:
        name = "Concept"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ConstraintType(ConstraintBaseType):
    """ConstraintType is an abstract base type that specific types of constraints
    (content and attachment) restrict and extend to describe their details.

    The inclusion of a key or region in a constraint is determined by
    first processing the included key sets, and then removing those keys
    defined in the excluded key sets. If no included key sets are
    defined, then it is assumed the all possible keys or regions are
    included, and any excluded key or regions are removed from this
    complete set.

    :ivar constraint_attachment: ConstraintAttachment describes the
        collection of constrainable artefacts that the constraint is
        attached to.
    :ivar data_key_set:
    :ivar metadata_key_set:
    :ivar cube_region:
    :ivar metadata_target_region:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    constraint_attachment: None | ConstraintAttachmentType = field(
        default=None,
        metadata={
            "name": "ConstraintAttachment",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_key_set: list[DataKeySetType] = field(
        default_factory=list,
        metadata={
            "name": "DataKeySet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_key_set: list[MetadataKeySetType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataKeySet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    cube_region: list[CubeRegionType] = field(
        default_factory=list,
        metadata={
            "name": "CubeRegion",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_target_region: list[MetadataTargetRegionType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTargetRegion",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class DataConsumerType(OrganisationType):
    """DataConsumerType defines the structure of a data consumer description.

    The contacts defined for the organisation are specific to the data
    consumer role the organisation is serving.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataProviderType(OrganisationType):
    """DataProviderType defines the structure of a data provider description.

    The contacts defined for the organisation are specific to the data
    provider role the organisation is serving.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    parent: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataflowType(StructureUsageType):
    """DataflowType describes the structure of a data flow.

    A data flow is defined as the structure of data that will provided
    for different reference periods. If this type is not referenced
    externally, then a reference to a key family definition must be
    provided.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class Dimension2(DimensionType):
    """
    Dimension describes the structure of a dimension, which is defined as a
    statistical concept used (most probably together with other statistical
    concepts) to identify a statistical series, such as a time series, e.g. a
    statistical concept indicating certain economic activity or a geographical
    reference area.
    """

    class Meta:
        name = "Dimension"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class HierarchicalCodelistType(HierarchicalCodelistBaseType):
    """HierarchicalCodelistType describes the structure of a hierarchical codelist.

    A hierarchical code list is defined as an organised collection of
    codes that may participate in many parent/child relationships with
    other codes in the list, as defined by one or more hierarchy of the
    list.

    :ivar included_codelist: IndludedCodelist provides a collection of
        references to the code lists whose codes are arranged in this
        hierarchical code list.
    :ivar hierarchy: Hierarchy describes a classification structure
        arranged in levels of detail from the broadest to the most
        detailed level. These levels can be formal or informal, and are
        not necessary to describe. If the hierarchy does contain levels,
        then each hierarchical code is assumed to exist in the level
        where the depths of nesting match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    included_codelist: list[IncludedCodelistReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "IncludedCodelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    hierarchy: list[HierarchyType] = field(
        default_factory=list,
        metadata={
            "name": "Hierarchy",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class IdentifiableObjectTarget2(IdentifiableObjectTargetType):
    """IdentifiableObjectTarget is target object which references an Identifiable
    object as defined in the SDMX Information Model.

    The reference must be complete (i.e. a URN or a complete set of
    reference fields). For an item object, it is possible to define a
    local representation of an item scheme from which the item must be
    referenced.
    """

    class Meta:
        name = "IdentifiableObjectTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MeasureDimension2(MeasureDimensionType):
    """MeasureDimension is a special type of dimension which defines multiple
    measures in a key family.

    This is represented as any other dimension in a unless it is the
    observation dimension. It takes it representation from a concept
    scheme, and this scheme defines the measures and their
    representations. When data is formatted with this as the observation
    dimension, these measures can be made explicit or the value of the
    dimension can be treated as any other dimension. If the measures are
    explicit, the representation of the observation will be specific to
    the core representation for each concept in the representation
    concept scheme. Note that it is necessary that these representations
    are compliant (the same or derived from) with that of the primary
    measure.
    """

    class Meta:
        name = "MeasureDimension"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MetadataflowType(StructureUsageType):
    """MetadataflowType describes the structure of a metadata flow.

    A dataflow is defined as the structure of reference metadata that
    will be provided for different reference periods. If this type is
    not referenced externally, then a reference to a metadata structure
    definition must be provided
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class Organisation(OrganisationType):
    """
    Organisation is an abstract substitution head for a generic organisation.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class OrganisationUnitType(OrganisationType):
    """OrganisationUnitType defines the structure of an organisation unit
    description.

    In addition to general identification and contact information, an
    organisation unit can specify a relationship with another
    organisation unit from the same scheme which is its parent
    organisation.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ProcessesType:
    """ProcessesType describes the structure of the processes container.

    It contains one or more process, which can be explicitly detailed or
    referenced from an external structure document or registry service.

    :ivar process: Process provides the details of a process, which is a
        scheme which defines or documents the operations performed on
        data in order to validate data or to derive new information
        according to a given set of rules. It is not meant to support
        process automation, but serves as a description of how processes
        occur. The primary use for this structural mechanism is the
        attachment of reference metadata regarding statistical
        processing. This must either contain the full details of the
        category scheme, or provide a name and identification
        information and reference the full details from an external
        structure document or registry service.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    process: list[ProcessType] = field(
        default_factory=list,
        metadata={
            "name": "Process",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ProvisionAgreementsType:
    """ProvisionAgreementsType describes the structure of the provision agreements
    container.

    It contains one or more provision agreement, which can be explicitly
    detailed or referenced from an external structure document or
    registry service.

    :ivar provision_agreement: ProvisionAgreement provides the details
        of a provision agreement, which is an agreement for a data
        provider to report data or reference metadata against a flow.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    provision_agreement: list[ProvisionAgreementType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ReportingCategory2(ReportingCategoryType):
    """
    ReportingCateogry defines a reporting category, which is used to group
    structure usages into useful sub-packages.
    """

    class Meta:
        name = "ReportingCategory"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ReportingYearStartDay(ReportingYearStartDayType):
    """ReportingYearStartDay is a specialized data attribute which provides
    important context to the time dimension.

    If the value of the time dimension is one of the standard reporting
    periods (see common:ReportingTimePeriodType) then this attribute is
    used to state the month and day that the reporting year begins. This
    provides a reference point from which the actual calendar dates
    covered by these periods can be determined. If this attribute does
    not occur in a data set, then the reporting year start day will be
    assumed to be January 1.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class StructureSetType(StructureSetBaseType):
    """StructureSetType describes the structure of a structure set.

    It allows components in one structure, structure usage, or item
    scheme to be mapped to components in another structural component of
    the same type.

    :ivar related_structure: RelatedStructures contains references to
        structures (key families and metadata structure definitions) and
        structure usages (data flows and metadata flows) to indicate
        that a semantic relationship exist between them. The details of
        these relationships can be found in the structure maps.
    :ivar organisation_scheme_map: OrganisationSchemeMap links a source
        and target organisations from different schemes where there is a
        semantic equivalence between them. Organisations are mapped
        without regard to role.
    :ivar category_scheme_map: CategorySchemeMap links a source and
        target categories from different schemes where there is a
        semantic equivalence between them.
    :ivar codelist_map: CodelistMap links a source and target codes from
        different lists where there is a semantic equivalence between
        them.
    :ivar concept_scheme_map: ConceptSchemeMap links a source and target
        concepts from different schemes where there is a semantic
        equivalence between them.
    :ivar reporting_taxonomy_map: ReportingTaxonomyMap links a source
        and target reporting categories from different taxonomies where
        there is a semantic equivalence between them.
    :ivar hybrid_codelist_map: HybridCodelistMap links a source and
        target codes from different codelists, which may be hierarchical
        or flat, where there is a semantic equivalence between them.
    :ivar structure_map: StructureMap maps components from one structure
        to components to another structure, and can describe how the
        value of the components are related.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    related_structure: list[StructureOrUsageReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "RelatedStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    organisation_scheme_map: list[OrganisationSchemeMapType] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationSchemeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    category_scheme_map: list[CategorySchemeMapType] = field(
        default_factory=list,
        metadata={
            "name": "CategorySchemeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    codelist_map: list[CodelistMapType] = field(
        default_factory=list,
        metadata={
            "name": "CodelistMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    concept_scheme_map: list[ConceptSchemeMapType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptSchemeMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    reporting_taxonomy_map: list[ReportingTaxonomyMapType] = field(
        default_factory=list,
        metadata={
            "name": "ReportingTaxonomyMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    hybrid_codelist_map: list[HybridCodelistMapType] = field(
        default_factory=list,
        metadata={
            "name": "HybridCodelistMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    structure_map: list[StructureMapType] = field(
        default_factory=list,
        metadata={
            "name": "StructureMap",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class TimeDimension2(TimeDimensionType):
    """
    TimeDimension is a special dimension which designates the period in time in
    which the data identified by the full series key applies.
    """

    class Meta:
        name = "TimeDimension"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MetadataKeyValueType(DinstinctKeyValueType):
    """MetadataKeyValueType is a type for providing a target object value for the
    purpose of defining a distinct metadata key.

    Only a single value can be provided for the target object.

    :ivar time_range: TimeValue provides a value for a component which
        has a time representation. This is repeatable to allow for a
        range to be specified, although a single value can also be
        provided. An operator is available on this to indicate whether
        the specified value indicates an exact value or the
        beginning/end of a range (inclusive or exclusive).
    :ivar value:
    :ivar data_set:
    :ivar data_key:
    :ivar object_value:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    time_range: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    value: None | SimpleKeyValueType = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_set: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_key: None | DataKeyType = field(
        default=None,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    object_value: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "Object",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class MetadataTargetRegionKeyType(ComponentValueSetType):
    """MetadataTargetRegionKeyType is a type for providing a set of values for a
    target object in a metadata target of a re fence metadata report.

    A set of values or a time range can be provided for a report period
    target object. A collection of the respective types of references
    can be provided for data set reference and identifiable object
    reference target objects. For a key descriptor values target object,
    a collection of data keys can be provided.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    value: list[SimpleKeyValueType] = field(
        default_factory=list,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_key: list[DataKeyType] = field(
        default_factory=list,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    object_value: list[ObjectReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Object",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    time_range: None | TimeRangeValueType = field(
        default=None,
        metadata={
            "name": "TimeRange",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )


@dataclass
class GenericDataQuery(GenericDataQueryType2):
    """GenericDataQuery is used to query SDMX compliant databases or web services
    for generic data.

    This is actually a specialization of the structured data query, and
    therfore can be processed in the same manner.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class GenericTimeSeriesDataQueryType2(GenericDataQueryType2):
    """
    GenericTimeSeriesDataQueryType defines the structure of a time series generic
    data query message.
    """

    class Meta:
        name = "GenericTimeSeriesDataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificTimeSeriesDataQuery(StructureSpecificTimeSeriesDataQueryType):
    """StructureSpecificTimeSeriesDataQuery is used to query SDMX compliant
    databases or web services for time series only structure specific data.

    This is actually a specialization of the structure specific data
    query, and therfore can be processed in the same manner. This
    message is intended to only be used when it is necessary to restrict
    an exchange to being only time series based data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class ReferenceValueType1:
    """ReferenceValueType defines the structure of a target object reference value.

    A target reference value will either be a reference to an
    identifiable object, a data key, a reference to a data set, or a
    report period.

    :ivar object_reference: ObjectReference provides a reference to an
        identifiable object in the SDMX information model. An
        identifiable object target will utilize this option as the
        representation of the target reference value.
    :ivar data_key: ObjectReference provides a set of dimension
        references and values for those dimension for the purpose of
        reporting metadata against a set of data. A key descriptor
        values target will utilize this option as the representation of
        the target reference value.
    :ivar data_set_reference: DataSetReference provides a reference to a
        data set for the purpose of reporting metadata against the data.
        A data set target will utilize this option as the representation
        of the target reference value.
    :ivar constraint_content_reference: ConstraintContentReference
        provides a reference to an attachment constraint for the purpose
        of reporting metadata against the data identified in the key
        sets and/or cube regions identified by the constraint. A
        constraint target will utilize this option as the representation
        of the target reference value.
    :ivar report_period: ReportPeriod provides a report period for the
        purpose of qualifying the target reporting period of reported
        metadata. A report period target will utilize this option as the
        representation of the target reference value.
    :ivar id: The id attribute holds the identifier of the target
        reference object as defined in the metadata structure
        definition. This identifies the target reference of the metadata
        target that identifes one of the target references, that when
        taken together, identify the target of the reported metadata.
    """

    class Meta:
        name = "ReferenceValueType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic"
        )

    object_reference: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "ObjectReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
        },
    )
    data_key: None | DataKeyType = field(
        default=None,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
        },
    )
    data_set_reference: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "DataSetReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
        },
    )
    constraint_content_reference: None | AttachmentConstraintReferenceType = field(
        default=None,
        metadata={
            "name": "ConstraintContentReference",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
        },
    )
    report_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "ReportPeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
            "pattern": r".{5}A1.*",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ReferenceValueType2:
    """ReferenceValueType is an abstract base type that forms the basis of a target
    reference value.

    A target reference value will either be a reference to an
    identifiable object, a data key, a reference to a data set, or a
    report period. The choice of these options will be refined to only
    one according to the definition of the target in the metadata
    structure definition.

    :ivar object_reference: ObjectReference provides a reference to an
        identifiable object in the SDMX information model. An
        identifiable object target will utilize this option as the
        representation of the target reference value. This element is
        unqualified so that the metadata structure definition specific
        schema can refine the type of the element such that the type of
        reference is valid according to the object type specified in the
        identifiable object target in the metadata structure definition.
        At the very least, the reference will be specific to the type of
        object being referenced so that a complete set of reference
        fields must be provided. In cases where an item object is
        restricted to be from a particular scheme, this type will be
        further restricted so that only a valid item reference can be
        supplied. The structure of this reference is such that it can be
        generically processed without needing to know what the intended
        target object type is prior to processing, as this information
        is part of the reference.
    :ivar data_key: ObjectReference provides a set of dimension
        references and values for those dimension for the purpose of
        reporting metadata against a set of data. A key descriptor
        values target will utilize this option as the representation of
        the target reference value. It is not expect that the metadata
        structure definition specific schema would refine this, but none
        the less, it is an unqualified element.
    :ivar data_set_reference: DataSetReference provides a reference to a
        data set for the purpose of reporting metadata against the data.
        A data set target will utilize this option as the representation
        of the target reference value.
    :ivar constraint_content_reference: ConstraintContentReference
        provides a reference to an attachment constraint for the purpose
        of reporting metadata against the data identified in the key
        sets and/or cube regions identified by the constraint. A
        constraint target will utilize this option as the representation
        of the target reference value.
    :ivar report_period: ReportPeriod provides a report period for the
        purpose of qualifying the target reporting period of reported
        metadata. A report period target will utilize this option as the
        representation of the target reference value. It is not expect
        that the metadata structure definition specific schema would
        refine this, but none the less, it is an unqualified element.
        This element is unqualified so that the metadata structure
        definition specific schema can refine the type of the element
        such that the specific type of time value prescribed in the
        metadata structure definition can be validated.
    :ivar id: The id attribute holds the identifier of the target
        reference object reference as defined in the metadata structure
        definition. This identifies the target reference of the metadata
        target that identifes one of the target references, that when
        taken together, identify the target of the reported metadata.
        This is optional and not expected to be supplied as the metadata
        structure definition specific schema will specify a fixed value
        such that the reference to the target object definition will
        always be available if required for processing.
    """

    class Meta:
        name = "ReferenceValueType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific"

    object_reference: None | ReferenceType = field(
        default=None,
        metadata={
            "name": "ObjectReference",
            "type": "Element",
            "namespace": "",
        },
    )
    data_key: None | DataKeyType = field(
        default=None,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "",
        },
    )
    data_set_reference: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "DataSetReference",
            "type": "Element",
            "namespace": "",
        },
    )
    constraint_content_reference: None | AttachmentConstraintReferenceType = field(
        default=None,
        metadata={
            "name": "ConstraintContentReference",
            "type": "Element",
            "namespace": "",
        },
    )
    report_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "ReportPeriod",
            "type": "Element",
            "namespace": "",
            "pattern": r".{5}A1.*",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class CategorySchemeWhere(CategorySchemeWhereType):
    """CategorySchemeWhere contains the parameters for a category scheme query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a category scheme based on the
    details of its categories. In any case, the category scheme will be
    returned according the indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class CodelistWhere(CodelistWhereType):
    """CodelistWhere defines the parameters for a codelist query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a codlist based on the details of
    its codes. In any case, the codelist will be returned according the
    indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ConceptSchemeWhere(ConceptSchemeWhereType):
    """ConceptSchemeWhere defines the parameters for a concept scheme query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a concept scheme based on the
    details of its concepts. In any case, the concept scheme will be
    returned according the indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class GroupWhereType(GroupWhereBaseType):
    """GroupWhereType defines the parameters querying for a data structure
    definition based a group meeting the conditions detailed.

    Parameters include identification, dimensions used in the group, and
    the group's referenced attachment constraint. This is an implicit
    set of "and" parameters, that is the conditions within this must all
    be met in order to return a match.

    :ivar attachment_constraint: AttachmentConstraint queries for a
        group where the referenced attachment constraint defines the
        contents of the group.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    attachment_constraint: None | AttachmentConstraintReferenceType = field(
        default=None,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class MetadataTargetWhere(MetadataTargetWhereType):
    """MetadataTargetWhere is used to query for a metadata structure definition
    that contains a metadata target meeting the conditions contained in this
    structure.

    The metadata target can be queried based on its identification
    and/or the details of its target objects. This is an implicit set of
    "and" parameters, that is the conditions within this must all be met
    in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class OrganisationSchemeWhere(OrganisationSchemeWhereType):
    """OrganisationSchemeWhere defines the parameters for an organisation scheme
    query, regardless of the specific type of organisation scheme being sought.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for an organisation scheme based on
    the details of its organisations. In any case, the organisation
    scheme will be returned according the indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ReportStructureWhere(ReportStructureWhereType):
    """ReportStructureWhere is used to query for metadata structure definitions
    where a given report structure meets the conditions specified.

    A report structure can be queried based on identification or details
    about its metadata attributes. This is an implicit set of "and"
    parameters, that is the conditions within this must all be met in
    order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class ReportingTaxonomyWhere(ReportingTaxonomyWhereType):
    """ReportingTaxonomyWhere contains the parameters for a reporting taxonomy
    query.

    All parameters must be matched for an object to satisfy the query.
    In addition to querying based on the basic maintainable properties,
    it is also possible to search for a reporting taxonomy based on the
    details of its reporting categories. In any case, the reporting
    taxonomy will be returned according the indicated return detail.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class TargetObjectValueType:
    """
    IdentifierComponentValueType describes the structure that is used to match
    reference metadata where a given identifier component has a particular value.

    :ivar id: ID identifies the metadata target object.
    :ivar data_set: DataSet provides a reference to a data set which the
        target object should reference to result in a match.
    :ivar data_key: DataKey provides a data key (set of dimension
        values) which the target object should reference to result in a
        match.
    :ivar object_value: Object provides a reference to any SDMX
        identifiable object which the target object should reference to
        result in a match.
    :ivar time_value: TimeValue is used to provide a time value or range
        for matching a reporting period which the target object should
        reference to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    data_set: None | SetReferenceType = field(
        default=None,
        metadata={
            "name": "DataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_key: None | DataKeyType = field(
        default=None,
        metadata={
            "name": "DataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    object_value: None | ObjectReferenceType = field(
        default=None,
        metadata={
            "name": "Object",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_value: list[TimeValue] = field(
        default_factory=list,
        metadata={
            "name": "TimeValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "max_occurs": 2,
        },
    )


@dataclass
class Agency2(AgencyType):
    """
    Agency is an organisation which maintains structural metadata such as
    statistical classifications, glossaries, key family structural definitions, and
    metadata structure definitions..
    """

    class Meta:
        name = "Agency"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class AttachmentConstraintType(ConstraintType):
    """
    AttachmentConstraintType describes the details of an attachment constraint by
    defining the data or metadata key sets or component regions that attributes or
    reference metadata may be attached in the constraint attachment objects.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    cube_region: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_target_region: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ComponentListType(IdentifiableType):
    """ComponentListType is an abstract base type for all component lists.

    It contains a collection of components. Concrete types should
    restrict this to specific concrete components.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: list[MetadataAttribute2] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    identifiable_object_target: list[IdentifiableObjectTarget2] = field(
        default_factory=list,
        metadata={
            "name": "IdentifiableObjectTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    report_period_target: list[ReportPeriodTarget2] = field(
        default_factory=list,
        metadata={
            "name": "ReportPeriodTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    constraint_content_target: list[ConstraintContentTarget] = field(
        default_factory=list,
        metadata={
            "name": "ConstraintContentTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_set_target: list[DataSetTarget2] = field(
        default_factory=list,
        metadata={
            "name": "DataSetTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    key_descriptor_values_target: list[KeyDescriptorValuesTarget] = field(
        default_factory=list,
        metadata={
            "name": "KeyDescriptorValuesTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    primary_measure: list[PrimaryMeasure2] = field(
        default_factory=list,
        metadata={
            "name": "PrimaryMeasure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    group_dimension: list[GroupDimension] = field(
        default_factory=list,
        metadata={
            "name": "GroupDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    measure_dimension: list[MeasureDimension2] = field(
        default_factory=list,
        metadata={
            "name": "MeasureDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    time_dimension: list[TimeDimension2] = field(
        default_factory=list,
        metadata={
            "name": "TimeDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    dimension: list[Dimension2] = field(
        default_factory=list,
        metadata={
            "name": "Dimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    reporting_year_start_day: list[ReportingYearStartDay] = field(
        default_factory=list,
        metadata={
            "name": "ReportingYearStartDay",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    attribute: list[Attribute2] = field(
        default_factory=list,
        metadata={
            "name": "Attribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class ContentConstraintBaseType(ConstraintType):
    """
    ContentConstraintBaseType is an abstract base type that forms the basis for the
    ContentConstraintType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class DataConsumer2(DataConsumerType):
    """
    DataConsumer describes an organisation using data as input for further
    processing.
    """

    class Meta:
        name = "DataConsumer"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class DataProvider2(DataProviderType):
    """
    DataProvider describes an organisation that produces data or reference
    metadata.
    """

    class Meta:
        name = "DataProvider"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class DataflowsType:
    """DataflowsType describes the structure of the data flows container.

    It contains one or more data flow, which can be explicitly detailed
    or referenced from an external structure document or registry
    service.

    :ivar dataflow: Dataflow provides the details of a data flow, which
        is defined as the structure of data that will be provided for
        different reference periods.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    dataflow: list[DataflowType] = field(
        default_factory=list,
        metadata={
            "name": "Dataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class HierarchicalCodelistsType:
    """HierarchicalCodelistsType describes the structure of the hierarchical code
    lists container.

    It contains one or more hierarchical code list, which can be
    explicitly detailed or referenced from an external structure
    document or registry service.

    :ivar hierarchical_codelist: HierarchicalCodelist provides the
        details of a hierarchical code list, which is defined as an
        organised collection of codes that may participate in many
        parent/child relationships with other codes in the list, as
        defined by one or more hierarchy of the list.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    hierarchical_codelist: list[HierarchicalCodelistType] = field(
        default_factory=list,
        metadata={
            "name": "HierarchicalCodelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class MetadataflowsType:
    """MetadataflowsType describes the structure of the metadata flows container.

    It contains one or more metadata flow, which can be explicitly
    detailed or referenced from an external structure document or
    registry service.

    :ivar metadataflow: Metadataflow provides the details of a metadata
        flow, which is defined as the structure of reference metadata
        that will be provided for different reference periods
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadataflow: list[MetadataflowType] = field(
        default_factory=list,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class OrganisationUnit2(OrganisationUnitType):
    """
    OrganisationUnit describes a generic organisation, which serves not predefined
    role in SDMX.
    """

    class Meta:
        name = "OrganisationUnit"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class StructureSetsType:
    """StructureSetsType describes the structure of the structure sets container.

    It contains one or more structure set, which can be explicitly
    detailed or referenced from an external structure document or
    registry service.

    :ivar structure_set: StructureSet provides the details or a
        structure set, which allows components in one structure,
        structure usage, or item scheme to be mapped to components in
        another structural component of the same type.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    structure_set: list[StructureSetType] = field(
        default_factory=list,
        metadata={
            "name": "StructureSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class MetadataKeyType(DistinctKeyType):
    """MetadataKeyType is a region which defines a distinct full or partial
    metadata key.

    The key consists of a set of values, each referencing a target
    object for the metadata target referenced in the metadataTarget
    attribute, which must be defined in the report structure referenced
    in the report attribute. Each target object can be assigned a single
    value. If an target object from the reference metadata target is not
    included in this key, the value of that is assumed to be all known
    objects for a reference target object, all possible keys for a key
    descriptor values target object, or all dates for report period
    target object. The purpose of this key reference a metadata
    conforming to a particular report structure for given object or set
    of objects.

    :ivar attribute: Attributes contains a reference to an attribute
        component (data or metadata) and provides a collection of values
        for the referenced attribute. This serves to state that for the
        key which defines the region, the attributes that are specified
        here have or do not have (depending to the include attribute of
        the value set) the values provided. It is possible to provide
        and attribute reference without specifying values, for the
        purpose of stating the attribute is absent (include = false) or
        present with an unbounded set of values. As opposed to key
        components, which are assumed to be wild carded if absent, no
        assumptions are made about the absence of an attribute. Only
        attributes which are explicitly stated to be present or absent
        from the region will be know. All unstated attributes for the
        set cannot be assumed to absent or present.
    :ivar local_attributes:
    :ivar key_value:
    :ivar report: The report attribute is required and holds the
        identifier of the report structure which the reference metadata
        being defined by this key is based on.
    :ivar metadata_target: The metadataTarget attribute is required and
        identifies the metadata target for the report structure which
        this key is based upon. Note that a report structure can have
        multiple metadata targets, so to properly determine the object
        or objects for which the key applies, the proper metadata target
        must be identified.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"

    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    local_attributes: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_value: list[MetadataKeyValueType] = field(
        default_factory=list,
        metadata={
            "name": "KeyValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
            "min_occurs": 1,
        },
    )
    report: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    metadata_target: None | str = field(
        default=None,
        metadata={
            "name": "metadataTarget",
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class GenericTimeSeriesDataQuery(GenericTimeSeriesDataQueryType2):
    """GenericTimeSeriesDataQuery is used to query SDMX compliant databases or web
    services for time series only generic data.

    This is actually a specialization of the generic data query, and
    therfore can be processed in the same manner. This message is
    intended to only be used when it is necessary to restrict an
    exchange to being only time series based data.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class TargetType1:
    """TargetType defines the structure of a target.

    It contains a set of target reference values which when taken
    together, identify the object or objects to which the reported
    metadata apply.

    :ivar reference_value: ReferenceValue contains a value for a target
        reference object reference. When this is taken with its sibling
        elements, they identify the object or objects to which the
        reported metadata apply. The content of this will either be a
        reference to an identifiable object, a data key, a reference to
        a data set, or a report period.
    :ivar id: The id attribute holds the identifier of the metadata
        target as defined in the metadata structure definition. This
        identifies the metadata target of the report structure that
        identifies the target object(s) of the reported metadata.
    """

    class Meta:
        name = "TargetType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic"
        )

    reference_value: list[ReferenceValueType1] = field(
        default_factory=list,
        metadata={
            "name": "ReferenceValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
            "min_occurs": 1,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class TargetType2:
    """TargetType is an abstract base type that forms the basis of a the metadata
    report's metadata target value.

    This type is restricted in the metadata structure definition
    specific schema so that the ReferenceValue elements conform to the
    targets specified in the metadata target defined in the metadata
    structure definition.

    :ivar reference_value: ReferenceValue contains a value for a target
        reference. When this is taken with its sibling elements, they
        identify the object or objects to which the reported metadata
        apply. The content of this will either be a reference to an
        identifiable object, a data key, a reference to a data set, or a
        report period. This element is unqualified so that the metadata
        structure definition specific schema can refine the type of the
        element such that value can be validated against the format
        defined in the metadata structure definition.
    :ivar id: The id attribute holds the identifier of the metadata
        target as defined in the metadata structure definition. This
        identifies the metadata target of the report structure that
        identifies the target object(s) of the reported metadata. This
        is optional and not expected to be supplied as the metadata
        structure definition specific schema will specify a fixed value
        such that the reference to the metadata target will always be
        available if required for processing.
    """

    class Meta:
        name = "TargetType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific"

    reference_value: list[ReferenceValueType2] = field(
        default_factory=list,
        metadata={
            "name": "ReferenceValue",
            "type": "Element",
            "namespace": "",
            "min_occurs": 1,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class GroupWhere(GroupWhereType):
    """GroupWhere is used to query for a data structure definition that contains a
    group meeting the conditions detailed in this container.

    This is an implicit set of "and" parameters, that is the conditions
    within this must all be met in order to return a match.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class MetadataTargetValueType:
    """MetadataTargetValueType describes the structure that is used to match
    reference metadata where a given metadata target's target object have
    particular values.

    If a value is not given for a target object which is part of the
    metadata target, it is assumed that all values are allowed for that
    target object. Thus, if no target object values are given in the
    entire metadata target, the query will simply match ant report where
    the reference metadata target is used. All target object value
    conditions must be met to constitute a match.

    :ivar id:
    :ivar target_object_value: TargetObjectValue is used to match
        reference metadata where a given target object in a metadata
        target references a particular object or time period.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    id: None | str = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )
    target_object_value: list[TargetObjectValueType] = field(
        default_factory=list,
        metadata={
            "name": "TargetObjectValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class AttributeListBaseType(ComponentListType):
    """
    AttributeListBaseType is an abstract base type used as the basis for the
    AttributeListType.

    :ivar metadata_attribute:
    :ivar identifiable_object_target:
    :ivar report_period_target:
    :ivar constraint_content_target:
    :ivar data_set_target:
    :ivar key_descriptor_values_target:
    :ivar primary_measure:
    :ivar group_dimension:
    :ivar measure_dimension:
    :ivar time_dimension:
    :ivar dimension:
    :ivar reporting_year_start_day:
    :ivar attribute:
    :ivar id: The id attribute is provided in this case for
        completeness. However, its value is fixed to
        AttributeDescriptor.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_content_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_year_start_day: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="AttributeDescriptor",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ComponentList(ComponentListType):
    """ComponentList is an abstract element that serves as a substitution head for
    all component lists.

    Concrete instances of this must use a concrete instance of
    ComponentListType.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ContentConstraintType(ContentConstraintBaseType):
    """ContentConstraintType describes the details of a content constraint by
    defining the content regions, key sets, or release information for the
    constraint attachment objects.

    Note that if the constraint is for a data provider, then only
    release calendar information is relevant, as there is no reliable
    way of determining which key family is being used to frame
    constraints in terms of cube regions or key sets.

    :ivar release_calendar: ReleaseCalendar defines dates on which the
        constrained data is to be made available.
    :ivar reference_period: ReferencePeriod is used to report start date
        and end date constraints.
    :ivar type_value: The type attribute indicates whether this
        constraint states what data is actually present for the
        constraint attachment, or if it defines what content is allowed.
        The default value is "Actual", meaning the data actually present
        for the constraint attachment.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    release_calendar: None | ReleaseCalendarType = field(
        default=None,
        metadata={
            "name": "ReleaseCalendar",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    reference_period: None | ReferencePeriodType = field(
        default=None,
        metadata={
            "name": "ReferencePeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    type_value: ContentConstraintTypeCodeType = field(
        default=ContentConstraintTypeCodeType.ACTUAL,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class DimensionListBaseType(ComponentListType):
    """
    DimensionListBaseType is an abstract base type used as the basis for the
    DimensionListType.

    :ivar metadata_attribute:
    :ivar identifiable_object_target:
    :ivar report_period_target:
    :ivar constraint_content_target:
    :ivar data_set_target:
    :ivar key_descriptor_values_target:
    :ivar primary_measure:
    :ivar group_dimension:
    :ivar measure_dimension:
    :ivar time_dimension:
    :ivar dimension:
    :ivar reporting_year_start_day:
    :ivar attribute:
    :ivar id: The id attribute is provided in this case for
        completeness. However, its value is fixed to
        DimensionDescriptor.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_content_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_year_start_day: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="DimensionDescriptor",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class GroupBaseType(ComponentListType):
    """
    GroupBaseType is an abstract base type that forms the basis for the GroupType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_content_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_year_start_day: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ItemSchemeType(MaintainableType):
    """ItemSchemeType is an abstract base type for all item scheme objects.

    It contains a collection of items. Concrete instances of this type
    should restrict the actual types of items allowed within the scheme.

    :ivar reporting_category:
    :ivar organisation_unit:
    :ivar data_provider:
    :ivar data_consumer:
    :ivar agency:
    :ivar concept:
    :ivar code:
    :ivar category:
    :ivar is_partial: The isPartial, if true, indicates that only the
        relevant portion of the item scheme is being communicated. This
        is used in cases where a codelist is returned for a key family
        in the context of a constraint.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: list[ReportingCategory2] = field(
        default_factory=list,
        metadata={
            "name": "ReportingCategory",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    organisation_unit: list[OrganisationUnit2] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationUnit",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_provider: list[DataProvider2] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_consumer: list[DataConsumer2] = field(
        default_factory=list,
        metadata={
            "name": "DataConsumer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    agency: list[Agency2] = field(
        default_factory=list,
        metadata={
            "name": "Agency",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    concept: list[Concept2] = field(
        default_factory=list,
        metadata={
            "name": "Concept",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    code: list[Code2] = field(
        default_factory=list,
        metadata={
            "name": "Code",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    category: list[Category2] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    is_partial: bool = field(
        default=False,
        metadata={
            "name": "isPartial",
            "type": "Attribute",
        },
    )


@dataclass
class MeasureListType(ComponentListType):
    """MeasureListType describes the structure of the measure descriptor for a data
    structure definition.

    Only a primary may be defined.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_content_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_year_start_day: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: None | PrimaryMeasure2 = field(
        default=None,
        metadata={
            "name": "PrimaryMeasure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    id: str = field(
        init=False,
        default="MeasureDescriptor",
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class MetadataTargetBaseType(ComponentListType):
    """
    MetadataTargetBaseType is an abstract base type which forms the basis for the
    MetadataTargetType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_content_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_year_start_day: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ReportStructureBaseType(ComponentListType):
    """
    ReportStructureBaseType is an abstract base type that serves as the basis for
    the ReportStructureType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    identifiable_object_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    report_period_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_content_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_set_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    key_descriptor_values_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_year_start_day: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_attribute: list[MetadataAttribute2] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ReportType1(AnnotableType):
    """
    ReportType contains a set of report attributes and identifies a target objects]
    to which they apply.

    :ivar target: Target contains a set of target reference values which
        when taken together, identify the object or objects to which the
        reported metadata apply.
    :ivar attribute_set: AttributeSet contains the reported metadata
        attribute values for the reported metadata.
    :ivar id: The id attribute holds the identifier of the report
        structure as defined in the metadata structure definition. This
        identifies the report structure which defines the structure of
        metadata that is being reported.
    """

    class Meta:
        name = "ReportType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic"
        )

    target: None | TargetType1 = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
            "required": True,
        },
    )
    attribute_set: None | AttributeSetType = field(
        default=None,
        metadata={
            "name": "AttributeSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
            "required": True,
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class ReportType2(AnnotableType):
    """ReportType is an abstract base type the forms the basis for a metadata
    structure definition specific report, based on the defined report structures.

    This type is restricted in the metadata structure definition
    specific schema so that the Target and AttributeSet conform to the
    prescribed report structure.

    :ivar target: Target contains a set of target reference values which
        when taken together, identify the object or objects to which the
        reported metadata apply. This element is unqualified so that the
        metadata structure definition specific schema can refine the
        type of the element such that the references values can be
        validated against those defined in the metadata targets for the
        report structure.
    :ivar attribute_set: AttributeSet contains the reported metadata
        attribute values for the reported metadata. This element is
        unqualified and un-typed so that it can refined by the metadata
        structure definition specific schema to validate that the
        reported metadata attributes conform to those prescribed by the
        report structure. The content of this must be element only, and
        these elements must always represent a reported attribute. Since
        this can not be strictly enforced in XML Schema, additional
        steps have been added to make generic processing of this element
        simpler. When processing this element, any element found with
        the attribute isMetadataAttribute in this target namespace is
        assumed to be a reported metadata attribute and can be processed
        as such.
    :ivar id: The id attribute holds the identifier of the report
        structure as defined in the metadata structure definition. This
        identifies the report structure which defines the structure of
        metadata that is being reported. This is optional and not
        expected to be supplied as the metadata structure definition
        specific schema will specify a fixed value such that the
        reference to the report structure will always be available if
        required for processing.
    """

    class Meta:
        name = "ReportType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific"

    target: None | TargetType2 = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    attribute_set: None | object = field(
        default=None,
        metadata={
            "name": "AttributeSet",
            "type": "Element",
            "namespace": "",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )


@dataclass
class MetadataParametersType:
    """MetadataParametersType defines the parameters for querying for reference
    metadata.

    This structure is refined by separate And/Or constructs which make
    logical restrictions on which parameters apply in such cases.

    :ivar metadata_set_id: MetadataSetID is used to match the id of the
        metadata set. Only metadata reports from data sets with an
        identifier satisfying these conditions will be matched.
    :ivar data_provider: DataProviderReference is used to match the
        provider of reference metadata to the referenced data provider.
        Only metadata reports from metadata sets provided by the
        referenced data provider will be matched.
    :ivar metadata_structure: MetadataStructureReference is used to
        match the underlying structure of the data. Only metadata
        reports from metadata sets that conform to referenced metadata
        structure definition will be matched.
    :ivar metadataflow: MetadataflowReference is used to match the flow
        which reference metadata is reported against. Only metadata
        reports from metadata sets report against referenced metadata
        flow will be matched.
    :ivar provision_agreement: ProvisionAgreement is used to match the
        provision agreement which metadata is reported against. Only
        metadata from metadata sets report against the referenced
        provision agreement will be matched.
    :ivar category: CategoryReference is used to match a reference
        metadata based on the categorization of its underlying structure
        (metadata structure definition), or the usage of that structure
        (metadata flow). Only metadata reports whose underlying
        structure or structure usage are categorized against the
        referenced category will be matched.
    :ivar updated: Updated is used to match reference metadata based on
        when it was last updated. Only metadata reports which satisfy
        the conditions for the last update parameters supplied here will
        be matched.
    :ivar concept_value: ConceptValue is used to match reference
        metadata based on the value of a particular concept which
        defines a metadata attribute. So long as the referenced concept
        has the specified value for a metadata attribute anywhere within
        the report structure, the metadata report which contains that
        attribute will be matched.
    :ivar representation_value: RepresentationValue is used to match
        reference metadata based on a codelist having a particular
        value. This codelist only applies in the context of the
        representation of a metadata attribute. So long as the value of
        any metadata attribute within the report structure which uses
        the referenced codelist has the value specified, any metadata
        report containing the attribute will be matched.
    :ivar metadata_target_value: MetadataTargetValue is used to match
        reference metadata based on the target object values of a
        particular metadata target. If not report structure is specified
        in the query, this will result in a search across all metadata
        reports which may use this metadata target. If a value is not
        given for a target object which is part of this metadata target,
        it is assumed that all values are allowed for that target
        object. Thus, if no target object values are given in the entire
        metadata target, the query will simply match ant report where
        the reference metadata target is used. All target object value
        conditions must be met to constitute a match.
    :ivar report_structure_value: ReportStructureValue is used to match
        particular reference metadata reports. Only metadata reports
        based on the referenced report structure will be matched. It is
        also possible to detail the values of the metadata attributes
        contained within the reference report. In this case, only
        metadata reports based on the referenced report structure which
        have the metadata attribute values specified will be matched.
    :ivar attachment_constraint: AttachmentConstraint references an
        attachment constraint in order to match reference metadata which
        matches the effective metadata keys or metadata target regions
        defined in the constraint. Metadata will be returned by first
        matching metadata on the keys and metadata target regions that
        are marked as included (or all metadata if none), and then
        excluding the metadata that satisfies the conditions of the
        excluded keys and metadata target regions.
    :ivar attached_object: AttachedObject is used to match reference
        metadata based on an object which it is attached to, regardless
        of the report structure or metadata target in which the object
        is referenced. Any metadata reports attached to the referenced
        objects will be matched.
    :ivar attached_data_key: AttachedDataKey is used to match reference
        metadata based on a data key it is attached to, regardless of
        the report structure or metadata target in which the data key is
        referenced. Any metadata reports attached to the supplied data
        key will be matched.
    :ivar attached_data_set: AttachedDataSet is used to query for
        reference metadata based on a data set it is attached to,
        regardless of the report structure or metadata target in which
        the data set is referenced. Any metadata reports attached to the
        supplied metadata key will be matched.
    :ivar attached_reporting_period: AttachedReportingPeriod is used to
        query for reference metadata based on the reporting period to
        which it is attached, regardless of the report structure or
        metadata target in which the reference period is referenced. Any
        metadata reports attached to a reporting period which falls
        within the range specified will be matched.
    :ivar or_value: Or contains a collection of additional parameters,
        any one of which can be satisfied to result in a match.
    :ivar and_value: And contains a collection of additional parameters,
        all of which must be satisfied to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    metadata_set_id: list[QueryIdtype] = field(
        default_factory=list,
        metadata={
            "name": "MetadataSetID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_provider: list[DataProviderReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_structure: list[MetadataStructureReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadataflow: list[MetadataflowReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Metadataflow",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    provision_agreement: list[ProvisionAgreementReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "ProvisionAgreement",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    category: list[CategoryReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    updated: list[TimeRangeValueType] = field(
        default_factory=list,
        metadata={
            "name": "Updated",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    concept_value: list[ConceptValueType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    representation_value: list[CodeValueType] = field(
        default_factory=list,
        metadata={
            "name": "RepresentationValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_target_value: list[MetadataTargetValueType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTargetValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    report_structure_value: list[ReportStructureValueType] = field(
        default_factory=list,
        metadata={
            "name": "ReportStructureValue",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attachment_constraint: list[AttachmentConstraintReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attached_object: list[ObjectReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "AttachedObject",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attached_data_key: list[DataKeyType] = field(
        default_factory=list,
        metadata={
            "name": "AttachedDataKey",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attached_data_set: list[SetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "AttachedDataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attached_reporting_period: list[TimeRangeValueType] = field(
        default_factory=list,
        metadata={
            "name": "AttachedReportingPeriod",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    or_value: list["MetadataParametersOrType"] = field(
        default_factory=list,
        metadata={
            "name": "Or",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    and_value: list["MetadataParametersAndType"] = field(
        default_factory=list,
        metadata={
            "name": "And",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class StructureWhereType(MaintainableWhereType):
    """
    StructureWhereType is an abstract base type that serves as the basis for a
    query for a structure object.

    :ivar used_concept: UsedConcept is used to query for a structure
        that uses the referenced concept as the basis of one of its
        components.
    :ivar used_representation: UsedRepresentation is used to query for a
        structure that uses the referenced item scheme for the
        representation of one of its components.
    :ivar report_structure_where:
    :ivar metadata_target_where:
    :ivar group_where:
    :ivar metadata_attribute_where:
    :ivar target_object_where:
    :ivar measure_dimension_where:
    :ivar primary_measure_where:
    :ivar time_dimension_where:
    :ivar dimension_where:
    :ivar attribute_where:
    :ivar group_dimension_where:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    used_concept: list[ConceptReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "UsedConcept",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    used_representation: list[ItemSchemeReferenceBaseType] = field(
        default_factory=list,
        metadata={
            "name": "UsedRepresentation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    report_structure_where: list[ReportStructureWhere] = field(
        default_factory=list,
        metadata={
            "name": "ReportStructureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_target_where: list[MetadataTargetWhere] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTargetWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    group_where: list[GroupWhere] = field(
        default_factory=list,
        metadata={
            "name": "GroupWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_attribute_where: list[MetadataAttributeWhere] = field(
        default_factory=list,
        metadata={
            "name": "MetadataAttributeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    target_object_where: list[TargetObjectWhere] = field(
        default_factory=list,
        metadata={
            "name": "TargetObjectWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    measure_dimension_where: list[MeasureDimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "MeasureDimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    primary_measure_where: list[PrimaryMeasureWhere] = field(
        default_factory=list,
        metadata={
            "name": "PrimaryMeasureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    time_dimension_where: list[TimeDimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "TimeDimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    dimension_where: list[DimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "DimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    attribute_where: list[AttributeWhere] = field(
        default_factory=list,
        metadata={
            "name": "AttributeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    group_dimension_where: list[GroupDimensionWhere] = field(
        default_factory=list,
        metadata={
            "name": "GroupDimensionWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class AttributeListType(AttributeListBaseType):
    """
    AttributeListType describes the attribute descriptor for the data structure
    definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    attribute: list[Attribute2] = field(
        default_factory=list,
        metadata={
            "name": "Attribute",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    reporting_year_start_day: list[ReportingYearStartDay] = field(
        default_factory=list,
        metadata={
            "name": "ReportingYearStartDay",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class CategorySchemeType(ItemSchemeType):
    """CategorySchemeType describes the structure of a category scheme.

    A category scheme is the descriptive information for an arrangement
    or division of categories into groups based on characteristics,
    which the objects have in common. This provides for a simple,
    leveled hierarchy or categories.

    :ivar reporting_category:
    :ivar organisation_unit:
    :ivar data_provider:
    :ivar data_consumer:
    :ivar agency:
    :ivar concept:
    :ivar code:
    :ivar id: The id attribute holds the identification of the category
        scheme. The type of this id is restricted to the
        common:NCNNameIDType. This is necessary, since the category
        scheme may be used to create simple types in data and metadata
        structure specific schemas and therefore must be compliant with
        the NCName type in XML Schema (see common:NCNameIDType for
        further details).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class CodelistType(ItemSchemeType):
    """CodelistType defines the structure of a codelist.

    A codelist is defined as a list from which some statistical concepts
    (coded concepts) take their values.

    :ivar reporting_category:
    :ivar organisation_unit:
    :ivar data_provider:
    :ivar data_consumer:
    :ivar agency:
    :ivar concept:
    :ivar category:
    :ivar id: The id attribute holds the identification of the code
        list. The type of this id is restricted to the
        common:NCNNameIDType. This is necessary, since the code list may
        be used to create simple types in data and metadata structure
        specific schemas and therefore must be compliant with the NCName
        type in XML Schema (see common:NCNameIDType for further
        details).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class ConceptSchemeType(ItemSchemeType):
    """OnceptSchemeType describes the structure of a concept scheme.

    A concept scheme is the descriptive information for an arrangement
    or division of concepts into groups based on characteristics, which
    the objects have in common. It contains a collection of concept
    definitions, that may be arranged in simple hierarchies.

    :ivar reporting_category:
    :ivar organisation_unit:
    :ivar data_provider:
    :ivar data_consumer:
    :ivar agency:
    :ivar code:
    :ivar category:
    :ivar id: The id attribute holds the identification of the concept
        scheme. The type of this id is restricted to the
        common:NCNNameIDType. This is necessary, since the concept
        scheme may be used to create simple types in data and metadata
        structure specific schemas and therefore must be compliant with
        the NCName type in XML Schema (see common:NCNameIDType for
        further details).
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z][A-Za-z0-9_\-]*",
        },
    )


@dataclass
class ConstraintsType:
    """ConstraintsType describes the structure of the constraints container.

    It contains one or more constraint, which can be explicitly detailed
    or referenced from an external structure document or registry
    service. This container may contain both attachment and content
    constraints.

    :ivar attachment_constraint: AttachmentConstraint describes sub sets
        of the content of a data or metadata set in terms of the content
        regions or in terms of the set of key combinations to which
        attributes or reference metadata (as defined by structure
        definitions) may be attached.
    :ivar content_constraint: ContentConstraint specifies a sub set of
        the definition of the allowable or available content of a data
        or metadata set in terms of the content or in terms of the set
        of key combinations.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    attachment_constraint: list[AttachmentConstraintType] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    content_constraint: list[ContentConstraintType] = field(
        default_factory=list,
        metadata={
            "name": "ContentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class DimensionListType(DimensionListBaseType):
    """DimensionListType describes the key descriptor for a data structure
    definition.

    The order of the declaration of child dimensions is significant: it is used to describe the order in which they will appear in data formats for which key values are supplied in an ordered fashion (exclusive of the time dimension, which is not represented as a member of the ordered key). Any data structure definition which uses the time dimension should also declare a frequency dimension, conventionally the first dimension in the key (the set of ordered non-time dimensions). If is not necessary to assign a time dimension, as data can be organised in any fashion required.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    dimension: list[Dimension2] = field(
        default_factory=list,
        metadata={
            "name": "Dimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    measure_dimension: list[MeasureDimension2] = field(
        default_factory=list,
        metadata={
            "name": "MeasureDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    time_dimension: list[TimeDimension2] = field(
        default_factory=list,
        metadata={
            "name": "TimeDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class GroupType3(GroupBaseType):
    """GroupType describes the structure of a group descriptor in a data structure
    definition.

    A group may consist of a of partial key, or collection of distinct cube regions or key sets to which attributes may be attached. The purpose of a group is to specify attributes values which have the same value based on some common dimensionality. All groups declared in the data structure must be unique - that is, you may not have duplicate partial keys. All groups must be given unique identifiers.

    :ivar group_dimension:
    :ivar attachment_constraint: AttachmentConstraint references an
        attachment constraint that defines the key sets and/or cube
        regions that attributes may be attached to. This is an
        alternative to referencing the dimensions, and allows attributes
        to be attached to data for given values of dimensions.
    """

    class Meta:
        name = "GroupType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    group_dimension: list[GroupDimension] = field(
        default_factory=list,
        metadata={
            "name": "GroupDimension",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    attachment_constraint: None | AttachmentConstraintReferenceType = field(
        default=None,
        metadata={
            "name": "AttachmentConstraint",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class MeasureList(MeasureListType):
    """MeasureList describes the measure descriptor for a key family.

    It contains a single metadata concepts that define the primary
    measures of a data structure.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MetadataTargetType(MetadataTargetBaseType):
    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    key_descriptor_values_target: list[KeyDescriptorValuesTarget] = field(
        default_factory=list,
        metadata={
            "name": "KeyDescriptorValuesTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_set_target: list[DataSetTarget2] = field(
        default_factory=list,
        metadata={
            "name": "DataSetTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    constraint_content_target: list[ConstraintContentTarget] = field(
        default_factory=list,
        metadata={
            "name": "ConstraintContentTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    report_period_target: list[ReportPeriodTarget2] = field(
        default_factory=list,
        metadata={
            "name": "ReportPeriodTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    identifiable_object_target: list[IdentifiableObjectTarget2] = field(
        default_factory=list,
        metadata={
            "name": "IdentifiableObjectTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class OrganisationSchemeBaseType(ItemSchemeType):
    """
    OrganisationSchemeBaseType is an abstract base type for any organisation
    scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ReportStructureType(ReportStructureBaseType):
    """ReportStructureType describes the structure of a report structure.

    It comprises a set of metadata attributes that can be defined as a
    hierarchy, and identifies the potential attachment of these
    attributes to an object by referencing a target identifier.

    :ivar metadata_target: MetadataTarget references a metadata target
        defined in the metadata structure definition. A report structure
        can reference multiple metadata targets which allows a report
        structure to be reused for attaching metadata to different types
        of targets.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_target: list[LocalMetadataTargetReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ReportingTaxonomyType(ItemSchemeType):
    """
    ReportingTaxonomyType describes the structure of a reporting taxonomy, which is
    a scheme which defines the composition structure of a data report where each
    component can be described by an independent structure or structure usage
    description.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataSetType1(AnnotableType):
    """MetadataSetType describes the structure for a metadata set, which contains a
    collection of reported metadata against a set of values for a given full or
    partial target identifier, as described in a metadata structure definition.

    The metadata set may contain reported metadata for multiple report
    structures defined in a metadata structure definition.

    :ivar name:
    :ivar data_provider: DataProviderReference provides a references to
        an organisation with the role of data provider that is providing
        this metadata set.
    :ivar report: Report contains the details of a the reported
        metadata, including the identification of the target and the
        report attributes.
    :ivar structure_ref: The structureRef contains a reference to a
        structural specification in the header of a data or reference
        metadata message. The structural specification details which
        structure the data or reference metadata conforms to, as well as
        providing additional information such as how the data is
        structure (e.g. which dimension occurs at the observation level
        for a data set).
    :ivar set_id: The setID provides an identification of the data or
        metadata set.
    :ivar action: The action attribute indicates whether the file is
        appending, replacing, or deleting.
    :ivar reporting_begin_date: The reportingBeginDate indicates the
        inclusive start time of the data reported in the data or
        metadata set.
    :ivar reporting_end_date: The reportingEndDate indicates the
        inclusive end time of the data reported in the data or metadata
        set.
    :ivar valid_from_date: The validFromDate indicates the inclusive
        start time indicating the validity of the information in the
        data or metadata set.
    :ivar valid_to_date: The validToDate indicates the inclusive end
        time indicating the validity of the information in the data or
        metadata set.
    :ivar publication_year: The publicationYear holds the ISO 8601 four-
        digit year.
    :ivar publication_period: The publicationPeriod specifies the period
        of publication of the data or metadata in terms of whatever
        provisioning agreements might be in force (i.e., "Q1 2005" if
        that is the time of publication for a data set published on a
        quarterly basis).
    """

    class Meta:
        name = "MetadataSetType"
        target_namespace = (
            "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic"
        )

    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
        },
    )
    report: list[ReportType1] = field(
        default_factory=list,
        metadata={
            "name": "Report",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/generic",
            "min_occurs": 1,
        },
    )
    structure_ref: None | str = field(
        default=None,
        metadata={
            "name": "structureRef",
            "type": "Attribute",
            "required": True,
        },
    )
    set_id: None | str = field(
        default=None,
        metadata={
            "name": "setID",
            "type": "Attribute",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    reporting_begin_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingBeginDate",
            "type": "Attribute",
        },
    )
    reporting_end_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingEndDate",
            "type": "Attribute",
        },
    )
    valid_from_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFromDate",
            "type": "Attribute",
        },
    )
    valid_to_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validToDate",
            "type": "Attribute",
        },
    )
    publication_year: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "publicationYear",
            "type": "Attribute",
        },
    )
    publication_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "publicationPeriod",
            "type": "Attribute",
            "pattern": r".{5}A1.*",
        },
    )


@dataclass
class MetadataSetType2(AnnotableType):
    """MetadataSetType is an abstract base type the forms the basis for a metadata
    structure specific metadata set.

    It is restricted by the metadata structure definition specific
    schema to meet its needs.

    :ivar name:
    :ivar data_provider: &gt;DataProviderReference provides a references
        to an organisation with the role of data provider that is
        providing this metadata set.
    :ivar report: Report contains the details of a the reported
        metadata, including the identification of the target and the
        report attributes. This element is unqualified so that the
        metadata structure definition specific schema can refine the
        type of the element such that it requires types built according
        to the metadata structure definition. This allows the metadata
        structure definition to validate the structure of the reported
        metadata against the metadata structure definition while still
        allowing the content to be processed in a generic manner.
    :ivar structure_ref: The structureRef contains a reference to a
        structural specification in the header of a data or reference
        metadata message. The structural specification details which
        structure the data or reference metadata conforms to, as well as
        providing additional information such as how the data is
        structure (e.g. which dimension occurs at the observation level
        for a data set).
    :ivar set_id: The setID provides an identification of the data or
        metadata set.
    :ivar action: The action attribute indicates whether the file is
        appending, replacing, or deleting.
    :ivar reporting_begin_date: The reportingBeginDate indicates the
        inclusive start time of the data reported in the data or
        metadata set.
    :ivar reporting_end_date: The reportingEndDate indicates the
        inclusive end time of the data reported in the data or metadata
        set.
    :ivar valid_from_date: The validFromDate indicates the inclusive
        start time indicating the validity of the information in the
        data or metadata set.
    :ivar valid_to_date: The validToDate indicates the inclusive end
        time indicating the validity of the information in the data or
        metadata set.
    :ivar publication_year: The publicationYear holds the ISO 8601 four-
        digit year.
    :ivar publication_period: The publicationPeriod specifies the period
        of publication of the data or metadata in terms of whatever
        provisioning agreements might be in force (i.e., "Q1 2005" if
        that is the time of publication for a data set published on a
        quarterly basis).
    """

    class Meta:
        name = "MetadataSetType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific"

    name: list[Name] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common",
        },
    )
    data_provider: None | DataProviderReferenceType = field(
        default=None,
        metadata={
            "name": "DataProvider",
            "type": "Element",
            "namespace": "",
        },
    )
    report: list[ReportType2] = field(
        default_factory=list,
        metadata={
            "name": "Report",
            "type": "Element",
            "namespace": "",
            "min_occurs": 1,
        },
    )
    structure_ref: None | str = field(
        default=None,
        metadata={
            "name": "structureRef",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
            "required": True,
        },
    )
    set_id: None | str = field(
        default=None,
        metadata={
            "name": "setID",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    action: None | ActionType = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )
    reporting_begin_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingBeginDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )
    reporting_end_date: None | XmlPeriod | XmlDate | XmlDateTime = field(
        default=None,
        metadata={
            "name": "reportingEndDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )
    valid_from_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validFromDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )
    valid_to_date: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "validToDate",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )
    publication_year: None | XmlPeriod = field(
        default=None,
        metadata={
            "name": "publicationYear",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
        },
    )
    publication_period: None | XmlPeriod | XmlDate | XmlDateTime | str = field(
        default=None,
        metadata={
            "name": "publicationPeriod",
            "type": "Attribute",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/metadata/structurespecific",
            "pattern": r".{5}A1.*",
        },
    )


@dataclass
class DataStructureWhereBaseType(StructureWhereType):
    """
    DataStructureWhereBaseType is an abstract base type that forms the basis of the
    DataStructureWhereType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    report_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_target_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    target_object_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.DATA_STRUCTURE,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class MetadataParametersAndType(MetadataParametersType):
    """MetadataParametersAndType refines the base data parameters to define a set
    of parameters joined by an "and" conditions.

    All of the parameters supplied in an instance of this type must be
    satisfied to result in a match. As a result of this condition, the
    maximum occurrence of some parameters has been reduced so as to not
    allow for impossible conditions to be specified (for example data
    cannot be matched is it is specified that the data set identifier
    should be "xyz" and the data identifier should be "abc".

    :ivar and_value: And contains a collection of additional parameters,
        all of which must be satisfied to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    and_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataParametersOrType(MetadataParametersType):
    """MetadataParametersOrType refines the base data parameters to define a set of
    parameters joined by an "or" condition.

    Only one of the parameters supplied in an instance of this type can
    be satisfied to result in a match.

    :ivar or_value: Or contains a collection of additional parameters,
        any one of which can be satisfied to result in a match.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    or_value: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataStructureWhereBaseType(StructureWhereType):
    """
    MetadataStructureWhereBaseType is an abstract base type the forms the basis for
    the MetadataStructureWhereType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    report_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_target_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    target_object_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    primary_measure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    time_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group_dimension_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    type_value: MaintainableTypeCodelistType = field(
        init=False,
        default=MaintainableTypeCodelistType.METADATA_STRUCTURE,
        metadata={
            "name": "type",
            "type": "Attribute",
        },
    )


@dataclass
class AttributeList(AttributeListType):
    """AttributeList describes the attribute descriptor for the data structure
    definition.

    It is a collection of metadata concepts that define the attributes
    of the data structure definition.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class CategorySchemesType:
    """CategorySchemesType describes the structure of the category schemes
    container.

    It contains one or more category scheme, which can be explicitly
    detailed or referenced from an external structure document or
    registry service.

    :ivar category_scheme: CategoryScheme provides the details of a
        category scheme, which is the descriptive information for an
        arrangement or division of categories into groups based on
        characteristics, which the objects have in common. This provides
        for a simple, leveled hierarchy or categories.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    category_scheme: list[CategorySchemeType] = field(
        default_factory=list,
        metadata={
            "name": "CategoryScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class CodelistsType:
    """CodelistsType describes the structure of the code lists container.

    It contains one or more code list, which can be explicitly detailed
    or referenced from an external structure document or registry
    service.

    :ivar codelist: Codelist provides the details of a code list, which
        is defined as a list from which some statistical concepts (coded
        concepts) take their values.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    codelist: list[CodelistType] = field(
        default_factory=list,
        metadata={
            "name": "Codelist",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class ConceptsType:
    """ConceptsType describes the structure of the concepts container.

    It contains one or more stand-alone concept or concept scheme, which
    can be explicitly detailed or referenced from an external structure
    document or registry service.

    :ivar concept_scheme: ConceptScheme provides the details of a
        concept scheme, which is the descriptive information for an
        arrangement or division of concepts into groups based on
        characteristics, which the objects have in common. It contains a
        collection of concept definitions, that may be arranged in
        simple hierarchies.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    concept_scheme: list[ConceptSchemeType] = field(
        default_factory=list,
        metadata={
            "name": "ConceptScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class DimensionList(DimensionListType):
    """DimensionList describes the key descriptor for the data structure
    definition.

    It is an ordered set of metadata concepts that, combined, classify a
    statistical series, such as a time series, and whose values, when
    combined (the key) in an instance such as a data set, uniquely
    identify a specific series.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class Group(GroupType3):
    """Group describes a group descriptor in a data structure definition.

    It is a set metadata concepts (and possibly their values) that
    define a partial key derived from the key descriptor in a data
    structure definition.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MetadataTarget2(MetadataTargetType):
    """
    MetadataTarget is a collection of target objects which when taken together
    describe a structure which defines the key of an object type to which metadata
    may be attached and serve to disambiguate reference metadata set reports.
    """

    class Meta:
        name = "MetadataTarget"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class OrganisationSchemeType(OrganisationSchemeBaseType):
    """
    OrganisationSchemeType describes the structure of an organisation scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ReportStructure2(ReportStructureType):
    """ReportStructure defines a report structure, which comprises a set of
    metadata attributes that can be defined as a hierarchy, for reporting reference
    metadata about a target object.

    The identification of metadata attributes must be unique at any
    given level of the report structure. Although there are XML schema
    constraints to help enforce this, these only apply to explicitly
    assigned identifiers. Identifiers inherited from a concept from
    which a metadata attribute takes its identity cannot be validated
    against this constraint. Therefore, systems processing metadata
    structure definitions will have to perform this check outside of the
    XML validation.
    """

    class Meta:
        name = "ReportStructure"
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class ReportingTaxonomiesType:
    """ReportingTaxonomiesType describes the structure of the reporting taxonomies
    container.

    It contains one or more reporting taxonomy, which can be explicitly
    detailed or referenced from an external structure document or
    registry service.

    :ivar reporting_taxonomy: ReportingTaxonomy provides the details of
        a reporting taxonomy, which is a scheme which defines the
        composition structure of a data report where each component can
        be described by an independent data or metadata flow definition.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_taxonomy: list[ReportingTaxonomyType] = field(
        default_factory=list,
        metadata={
            "name": "ReportingTaxonomy",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class GenericMetadataType:
    """
    GenericMetadataType defines the contents of a generic metadata message.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | GenericMetadataHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    metadata_set: list[MetadataSetType1] = field(
        default_factory=list,
        metadata={
            "name": "MetadataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class StructureSpecificMetadataType:
    """StructureSpecificMetadataType defines the structure of a structure specific
    metadata message.

    Note that the metadata set payload type is abstract, and therefore
    it will have to be assigned a type in an instance. This type must be
    derived from the base type referenced. This base type defines a
    general structure which can be followed to allow for generic
    processing of the data even if the exact details of the data
    structure specific format are not known.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | StructureSpecificMetadataHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    metadata_set: list[MetadataSetType2] = field(
        default_factory=list,
        metadata={
            "name": "MetadataSet",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class DataStructureWhereType(DataStructureWhereBaseType):
    """DataStructureWhereType defines the parameters of a data structure definition
    query.

    In addition to querying based on the identification, it is also
    possible to search for data structure definitions based on
    information about its components.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class MetadataQueryType1:
    """MetadataQueryType defines the structure of a reference metadata query.

    Reference metadata is queried as individual reports. The result of
    this query will be a collection of metadata sets, with only the
    relevant metadata reports contained within them. If no report level
    parameters are specified, then the query will result in entire
    metadata sets being returned.

    :ivar return_details: ReturnDetails specifies the details of how the
        reference metadata should be returned.
    :ivar metadata_parameters: MetadataParameters contains the
        parameters that are to be matched in order to determine which
        metadata reports are to be returned as the result of the query.
    """

    class Meta:
        name = "MetadataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    return_details: None | MetadataReturnDetailsType = field(
        default=None,
        metadata={
            "name": "ReturnDetails",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    metadata_parameters: None | MetadataParametersAndType = field(
        default=None,
        metadata={
            "name": "MetadataParameters",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class MetadataStructureWhereType(MetadataStructureWhereBaseType):
    """MetadataStructureWhereType defines the parameters of a metadata structure
    definition query.

    In addition to querying based on the identification, it is also
    possible to search for metadata structure definitions based on
    information about its components.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class AgencySchemeType(OrganisationSchemeType):
    """AgencySchemeType defines a specific type of organisation scheme which
    contains only maintenance agencies.

    The agency scheme maintained by a particular maintenance agency is
    always provided a fixed identifier and version, and is never final.
    Therefore, agencies can be added or removed without have to version
    the scheme. Agencies schemes have no hierarchy, meaning that no
    agency may define a relationship with another agency in the scheme.
    In fact, the actual parent agency for an agency in a scheme is the
    agency which defines the scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="AGENCIES",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    version: str = field(
        init=False,
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    is_final: bool = field(
        init=False,
        default=False,
        metadata={
            "name": "isFinal",
            "type": "Attribute",
        },
    )


@dataclass
class DataConsumerSchemeType(OrganisationSchemeType):
    """DataConsumerSchemeType defines a type of organisation scheme which contains
    only data consumers.

    The data consumer scheme maintained by a particular maintenance
    agency is always provided a fixed identifier and version, and is
    never final. Therefore, consumers can be added or removed without
    have to version the scheme. This scheme has no hierarchy, meaning
    that no organisation may define a relationship with another
    organisation in the scheme.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="DATA_CONSUMERS",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    version: str = field(
        init=False,
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    is_final: bool = field(
        init=False,
        default=False,
        metadata={
            "name": "isFinal",
            "type": "Attribute",
        },
    )


@dataclass
class DataProviderSchemeType(OrganisationSchemeType):
    """DataProviderSchemeType defines a type of organisation scheme which contains
    only data providers.

    The data provider scheme maintained by a particular maintenance
    agency is always provided a fixed identifier and version, and is
    never final. Therefore, providers can be added or removed without
    have to version the scheme. This scheme has no hierarchy, meaning
    that no organisation may define a relationship with another
    organisation in the scheme
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_unit: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    id: str = field(
        init=False,
        default="DATA_PROVIDERS",
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    version: str = field(
        init=False,
        default="1.0",
        metadata={
            "type": "Attribute",
            "pattern": r"[0-9]+(\.[0-9]+)*",
        },
    )
    is_final: bool = field(
        init=False,
        default=False,
        metadata={
            "name": "isFinal",
            "type": "Attribute",
        },
    )


@dataclass
class GroupingType:
    """GroupType is an abstract base type for specific structure groupings.

    It contains a collection of component lists. Concrete instances of
    this should restrict to specific concrete component lists.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    report_structure: list[ReportStructure2] = field(
        default_factory=list,
        metadata={
            "name": "ReportStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_target: list[MetadataTarget2] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    measure_list: list[MeasureList] = field(
        default_factory=list,
        metadata={
            "name": "MeasureList",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    group: list[Group] = field(
        default_factory=list,
        metadata={
            "name": "Group",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    dimension_list: list[DimensionList] = field(
        default_factory=list,
        metadata={
            "name": "DimensionList",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    attribute_list: list[AttributeList] = field(
        default_factory=list,
        metadata={
            "name": "AttributeList",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class OrganisationUnitSchemeType(OrganisationSchemeType):
    """OrganisationUnitSchemeType defines a type of organisation scheme which
    simply defines organisations and there parent child relationships.

    Organisations in this scheme are assigned no particular role, and
    may in fact exist within the other type of organisation schemes as
    well.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    reporting_category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_provider: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_consumer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    agency: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    code: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class GenericMetadata(GenericMetadataType):
    """
    GenericMetadata contains reported metadata in a format which supports any
    metadata structure definition.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class MetadataQueryType2:
    """
    MetadataQueryType defines the structure of a reference metadata query message.
    """

    class Meta:
        name = "MetadataQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | MetadataQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class StructureSpecificMetadata(StructureSpecificMetadataType):
    """StructureSpecificMetadata contains reported metadata in a format which is
    specific to the metadata structure definitions which define the structure of
    the metadata being reported.

    This format allows for validation of the metadata against the
    intended structure. Note that the each metadata set provided will be
    based on a metadata structure specific schema.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class DataStructureWhere(DataStructureWhereType):
    """DataStructureWhere contains the parameters for a data structure definition
    query.

    All parameters must be matched for an object to satisfy the query.
    The query is simply a refinement of the base structure query to make
    the parameters specific to the data structure definition.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class MetadataStructureWhere(MetadataStructureWhereType):
    """MetadataStructureWhere contains the parameters for a metadata structure
    definition query.

    All parameters must be matched for an object to satisfy the query.
    The query is simply a refinement of the base structure query to make
    the parameters specific to the metadata structure definition.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"


@dataclass
class DataStructureComponentsBaseType(GroupingType):
    """DataStructureComponentsBaseType is an abstract base type the serves as the
    basis for the DataStructureComponentsType.

    This type is necessary to allow for valid substitutions of component
    lists.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    report_structure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_list: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_list: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_list: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class Grouping(GroupingType):
    """Grouping is an abstract element that serves as a substitution head for all
    structure groupings.

    Groupings contain a collection of component lists for a structure.
    Concrete instances of this must use a concrete instance of
    GroupingType.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MetadataStructureComponentsBaseType(GroupingType):
    """
    MetadataStructureComponentsBaseType is an abstract base type that forms the
    basis for the MetadataStructureComponentsType.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    report_structure: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_target: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    measure_list: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    group: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dimension_list: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    attribute_list: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class OrganisationSchemesType:
    """OrganisationSchemesType describes the structure of the organisation schemes
    container.

    It contains one or more organisation scheme, which can be explicitly
    detailed or referenced from an external structure document or
    registry service.

    :ivar agency_scheme: AgencyScheme provides the details of an agency
        scheme, in which agencies are described.
    :ivar data_consumer_scheme: DataConsumerScheme provides the details
        of an data consumer scheme, in which data consumers are
        described.
    :ivar data_provider_scheme: DataProviderScheme provides the details
        of an data provider scheme, in which data providers are
        described.
    :ivar organisation_unit_scheme: OrganisationUnitScheme provides the
        details of an organisation unit scheme, in which organisation
        units are described.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    agency_scheme: list[AgencySchemeType] = field(
        default_factory=list,
        metadata={
            "name": "AgencyScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_consumer_scheme: list[DataConsumerSchemeType] = field(
        default_factory=list,
        metadata={
            "name": "DataConsumerScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_provider_scheme: list[DataProviderSchemeType] = field(
        default_factory=list,
        metadata={
            "name": "DataProviderScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    organisation_unit_scheme: list[OrganisationUnitSchemeType] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationUnitScheme",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class GenericMetadataQuery(MetadataQueryType2):
    """
    GenericMetadataQuery is used to query SDMX compliant databases or web services
    for generic format reference metadata.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSpecificMetadataQuery(MetadataQueryType2):
    """
    StructureSpecificMetadataQuery is used to query SDMX compliant databases or web
    services for metadata structure specific reference metadata.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructuralMetadataQueryType:
    """StructureWhereQueryType is an abstract base type that serves as the basis
    for any structural metadata query.

    Concrete instances of this type are implied to be an and-query. A
    structural object will be returned for any object where all of the
    conditions are met.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    return_details: None | StructureReturnDetailsType = field(
        default=None,
        metadata={
            "name": "ReturnDetails",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )
    structures_where: None | StructuresWhere = field(
        default=None,
        metadata={
            "name": "StructuresWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    structure_set_where: None | StructureSetWhere = field(
        default=None,
        metadata={
            "name": "StructureSetWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    reporting_taxonomy_where: None | ReportingTaxonomyWhere = field(
        default=None,
        metadata={
            "name": "ReportingTaxonomyWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    provision_agreement_where: None | ProvisionAgreementWhere = field(
        default=None,
        metadata={
            "name": "ProvisionAgreementWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    process_where: None | ProcessWhere = field(
        default=None,
        metadata={
            "name": "ProcessWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    organisation_scheme_where: None | OrganisationSchemeWhere = field(
        default=None,
        metadata={
            "name": "OrganisationSchemeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadata_structure_where: None | MetadataStructureWhere = field(
        default=None,
        metadata={
            "name": "MetadataStructureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    metadataflow_where: None | MetadataflowWhere = field(
        default=None,
        metadata={
            "name": "MetadataflowWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    hierarchical_codelist_where: None | HierarchicalCodelistWhere = field(
        default=None,
        metadata={
            "name": "HierarchicalCodelistWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    data_structure_where: None | DataStructureWhere = field(
        default=None,
        metadata={
            "name": "DataStructureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    dataflow_where: None | DataflowWhere = field(
        default=None,
        metadata={
            "name": "DataflowWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    constraint_where: None | ConstraintWhere = field(
        default=None,
        metadata={
            "name": "ConstraintWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    concept_scheme_where: None | ConceptSchemeWhere = field(
        default=None,
        metadata={
            "name": "ConceptSchemeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    codelist_where: None | CodelistWhere = field(
        default=None,
        metadata={
            "name": "CodelistWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    category_scheme_where: None | CategorySchemeWhere = field(
        default=None,
        metadata={
            "name": "CategorySchemeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )
    categorisation_where: None | CategorisationWhere = field(
        default=None,
        metadata={
            "name": "CategorisationWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
        },
    )


@dataclass
class DataStructureComponentsType(DataStructureComponentsBaseType):
    """DataStructureComponentsType describes the structure of the grouping to the
    sets of metadata concepts that have a defined structural role in the data
    structure definition.

    At a minimum at least one dimension and a primary measure must be
    defined.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    dimension_list: None | DimensionList = field(
        default=None,
        metadata={
            "name": "DimensionList",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    measure_list: None | MeasureList = field(
        default=None,
        metadata={
            "name": "MeasureList",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )
    attribute_list: None | AttributeList = field(
        default=None,
        metadata={
            "name": "AttributeList",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class MetadataStructureComponentsType(MetadataStructureComponentsBaseType):
    """MetadataStructureComponentsType describes the structure of the grouping of
    the sets of the components that make up the metadata structure definition.

    At a minimum, a full target identifier and at least one report
    structure must be defined.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_target: list[MetadataTarget2] = field(
        default_factory=list,
        metadata={
            "name": "MetadataTarget",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )
    report_structure: list[ReportStructure2] = field(
        default_factory=list,
        metadata={
            "name": "ReportStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class CategorisationQueryType1(StructuralMetadataQueryType):
    """CategorisationQueryType defines the structure of a categorisation query.

    The parameters for the query are contained in the
    CategorisationWhere element. The References element is used to
    indicate how objects that are referenced from the matched
    categorisations should be returned.
    """

    class Meta:
        name = "CategorisationQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: None | CategorisationWhere = field(
        default=None,
        metadata={
            "name": "CategorisationWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class CategorySchemeQueryType1(StructuralMetadataQueryType):
    """CategorySchemeQueryType defines the structure of a category scheme query.

    The parameters for the query are contained in the
    CategorySchemeWhere element. The References element is used to
    indicate how objects that reference the matched category scheme
    should be returned.
    """

    class Meta:
        name = "CategorySchemeQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: None | CategorySchemeWhere = field(
        default=None,
        metadata={
            "name": "CategorySchemeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class CodelistQueryType1(StructuralMetadataQueryType):
    """CodelistQueryType defines the structure of a codelist query.

    The parameters for the query are contained in the CodelistWhere
    element. The References element is used to indicate how objects that
    reference the matched codelist should be returned.
    """

    class Meta:
        name = "CodelistQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: None | CodelistWhere = field(
        default=None,
        metadata={
            "name": "CodelistWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class ConceptSchemeQueryType1(StructuralMetadataQueryType):
    """ConceptSchemeQueryType defines the structure of a category scheme query.

    The parameters for the query are contained in the ConceptSchemeWhere
    element. The References element is used to indicate how objects that
    reference or are referenced from the matched concept scheme should
    be returned.
    """

    class Meta:
        name = "ConceptSchemeQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: None | ConceptSchemeWhere = field(
        default=None,
        metadata={
            "name": "ConceptSchemeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class ConstraintQueryType1(StructuralMetadataQueryType):
    """ConstraintQueryType defines the structure of a constraint query.

    The parameters for the query are contained in the ConstraintWhere
    element. The References element is used to indicate how objects that
    are referenced from the matched constraint should be returned.
    """

    class Meta:
        name = "ConstraintQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: None | ConstraintWhere = field(
        default=None,
        metadata={
            "name": "ConstraintWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class DataStructureQueryType1(StructuralMetadataQueryType):
    """DataStructureQueryType defines the structure of a data structure definition
    query.

    The parameters for the query are contained in the DataStructureWhere
    element. The References element is used to indicate how objects that
    reference or are referenced from the matched data structure
    definition should be returned.
    """

    class Meta:
        name = "DataStructureQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: None | DataStructureWhere = field(
        default=None,
        metadata={
            "name": "DataStructureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class DataflowQueryType1(StructuralMetadataQueryType):
    """DataflowQueryType defines the structure of a dataflow query.

    The parameters for the query are contained in the DataflowWhere
    element. The References element is used to indicate how objects that
    reference or are referenced from the matched dataflow should be
    returned.
    """

    class Meta:
        name = "DataflowQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: None | DataflowWhere = field(
        default=None,
        metadata={
            "name": "DataflowWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class HierarchicalCodelistQueryType1(StructuralMetadataQueryType):
    """HierarchicalCodelistQueryType defines the structure of a hierarchical
    codelist query.

    The parameters for the query are contained in the
    HierarchicalCodelistWhere element. The References element is used to
    indicate how objects that are referenced from the matched
    hierarchical codelist should be returned.
    """

    class Meta:
        name = "HierarchicalCodelistQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: None | HierarchicalCodelistWhere = field(
        default=None,
        metadata={
            "name": "HierarchicalCodelistWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class MetadataStructureQueryType1(StructuralMetadataQueryType):
    """MetadataStructureQueryType defines the structure of a metadata structure
    definition query.

    The parameters for the query are contained in the
    MetadataStructureDefinitionWhere element. The References element is
    used to indicate how objects that reference or are referenced from
    the matched metadata structure definition should be returned.
    """

    class Meta:
        name = "MetadataStructureQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: None | MetadataStructureWhere = field(
        default=None,
        metadata={
            "name": "MetadataStructureWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class MetadataflowQueryType1(StructuralMetadataQueryType):
    """MetadataflowQueryType defines the structure of a metadataflow query.

    The parameters for the query are contained in the MetadataflowWhere
    element. The References element is used to indicate how objects that
    reference or are referenced from the matched metadataflow should be
    returned.
    """

    class Meta:
        name = "MetadataflowQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: None | MetadataflowWhere = field(
        default=None,
        metadata={
            "name": "MetadataflowWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class OrganisationSchemeQueryType1(StructuralMetadataQueryType):
    """OrganisationSchemeQueryType defines the structure of an organisation scheme
    query.

    The parameters for the query are contained in the
    OrganisationSchemeWhere element. The References element is used to
    indicate how objects that reference the matched organisation scheme
    should be returned.
    """

    class Meta:
        name = "OrganisationSchemeQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: None | OrganisationSchemeWhere = field(
        default=None,
        metadata={
            "name": "OrganisationSchemeWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class ProcessQueryType1(StructuralMetadataQueryType):
    """ProcessQueryType defines the structure of a process query.

    The parameters for the query are contained in the ProcessWhere
    element. The References element is used to indicate how objects that
    are referenced from the matched process scheme should be returned.
    """

    class Meta:
        name = "ProcessQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: None | ProcessWhere = field(
        default=None,
        metadata={
            "name": "ProcessWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class ProvisionAgreementQueryType1(StructuralMetadataQueryType):
    """ProvisionAgreementQueryType defines the structure of a provision agreement
    query.

    The parameters for the query are contained in the
    ProvisionAgreementWhere element. The References element is used to
    indicate how objects that reference or are referenced from the
    matched provision agreement should be returned.
    """

    class Meta:
        name = "ProvisionAgreementQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: None | ProvisionAgreementWhere = field(
        default=None,
        metadata={
            "name": "ProvisionAgreementWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class ReportingTaxonomyQueryType1(StructuralMetadataQueryType):
    """ReportingTaxonomyQueryType defines the structure of a reporting taxonomy
    query.

    The parameters for the query are contained in the
    ReportingTaxonomyWhere element. The References element is used to
    indicate how objects that are referenced from the reporting taxonomy
    should be returned.
    """

    class Meta:
        name = "ReportingTaxonomyQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: None | ReportingTaxonomyWhere = field(
        default=None,
        metadata={
            "name": "ReportingTaxonomyWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class StructureSetQueryType1(StructuralMetadataQueryType):
    """StructureSetQueryType defines the structure of a structure set query.

    The parameters for the query are contained in the StructureSetWhere
    element. The References element is used to indicate how objects that
    are referenced from the structure set should be returned.
    """

    class Meta:
        name = "StructureSetQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structures_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structure_set_where: None | StructureSetWhere = field(
        default=None,
        metadata={
            "name": "StructureSetWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class StructuresQueryType1(StructuralMetadataQueryType):
    """StructuresQueryType defines the structure of a structures query.

    The parameters for the query are contained in the StructuresWhere
    element. The References element, typically used to indicate which
    objects should be returned, is fixed so that all object matching the
    parameters are returned..
    """

    class Meta:
        name = "StructuresQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"

    structure_set_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    reporting_taxonomy_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    provision_agreement_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    process_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    organisation_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadata_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    metadataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    hierarchical_codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    data_structure_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    dataflow_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    constraint_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    concept_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    codelist_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    category_scheme_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    categorisation_where: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    structures_where: None | StructuresWhere = field(
        default=None,
        metadata={
            "name": "StructuresWhere",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query",
            "required": True,
        },
    )


@dataclass
class DataStructureComponents(DataStructureComponentsType):
    """DataStructureComponents defines the grouping of the sets of metadata
    concepts that have a defined structural role in the data structure definition.

    Note that for any component or group defined in a data structure
    definition, its id must be unique. This applies to the identifiers
    explicitly defined by the components as well as those inherited from
    the concept identity of a component. For example, if two dimensions
    take their identity from concepts with same identity (regardless of
    whether the concepts exist in different schemes) one of the
    dimensions must be provided a different explicit identifier.
    Although there are XML schema constraints to help enforce this,
    these only apply to explicitly assigned identifiers. Identifiers
    inherited from a concept from which a component takes its identity
    cannot be validated against this constraint. Therefore, systems
    processing data structure definitions will have to perform this
    check outside of the XML validation. There are also three reserved
    identifiers in a data structure definition; OBS_VALUE, TIME_PERIOD,
    and REPORTING_PERIOD_START_DAY. These identifiers may not be used
    outside of their respective defintions (PrimaryMeasure,
    TimeDimension, and ReportingYearStartDay). This applies to both the
    explicit identifiers that can be assigned to the components or
    groups as well as an identifier inherited by a component from its
    concept identity. For example, if an ordinary dimension (i.e. not
    the time dimension) takes its concept identity from a concept with
    the identifier TIME_PERIOD, that dimension must provide a different
    explicit identifier.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class MetadataStructureComponents(MetadataStructureComponentsType):
    """MetadataStructureComponents defines the grouping of the sets of the
    components that make up the metadata structure definition.

    All components and component list (target identifiers, identifier
    components, report structures, and metadata attributes) in the
    structure definition must have a unique identification.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class CategorisationQueryType2:
    """
    CategorisationQueryType defines the structure of a categorisation query
    message.
    """

    class Meta:
        name = "CategorisationQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | CategorisationQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class CategorySchemeQueryType2:
    """
    CategorySchemeQueryType defines the structure of a category scheme query
    message.
    """

    class Meta:
        name = "CategorySchemeQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | CategorySchemeQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class CodelistQueryType2:
    """
    CodelistQueryType defines the structure of a codelist query message.
    """

    class Meta:
        name = "CodelistQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | CodelistQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class ConceptSchemeQueryType2:
    """
    ConceptSchemeQueryType defines the structure of a concept scheme query message.
    """

    class Meta:
        name = "ConceptSchemeQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | ConceptSchemeQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class ConstraintQueryType2:
    """
    ConstraintQueryType defines the structure of a constraint query message.
    """

    class Meta:
        name = "ConstraintQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | ConstraintQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class DataStructureQueryType2:
    """
    KeyFamilyQueryType defines the structure of a data structure query message.
    """

    class Meta:
        name = "DataStructureQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | DataStructureQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class DataflowQueryType2:
    """
    DataflowQueryType defines the structure of a dataflow query message.
    """

    class Meta:
        name = "DataflowQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | DataflowQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class HierarchicalCodelistQueryType2:
    """
    HierarchicalCodelistQueryType defines the structure of a hierarchical codelist
    query message.
    """

    class Meta:
        name = "HierarchicalCodelistQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | HierarchicalCodelistQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class MetadataStructureQueryType2:
    """
    MetadataStructureQueryType defines the structure of a metadata structure query
    message.
    """

    class Meta:
        name = "MetadataStructureQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | MetadataStructureQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class MetadataflowQueryType2:
    """
    MetadataflowQueryType defines the structure of a metadata flow query message.
    """

    class Meta:
        name = "MetadataflowQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | MetadataflowQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class OrganisationSchemeQueryType2:
    """
    OrganisationSchemeQueryType defines the structure of an organisation scheme
    query message.
    """

    class Meta:
        name = "OrganisationSchemeQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | OrganisationSchemeQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class ProcessQueryType2:
    """
    CategorizationQueryType defines the structure of a categorization query
    message.
    """

    class Meta:
        name = "ProcessQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | ProcessQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class ProvisionAgreementQueryType2:
    """
    ProvisionAgreementQueryType defines the structure of a provision agreement
    query message.
    """

    class Meta:
        name = "ProvisionAgreementQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | ProvisionAgreementQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class ReportingTaxonomyQueryType2:
    """
    ReportingTaxonomyQueryType defines the structure of a reporting taxonomy query
    message.
    """

    class Meta:
        name = "ReportingTaxonomyQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | ReportingTaxonomyQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class StructureSetQueryType2:
    """
    StructureSetQueryType defines the structure of a structure set query message.
    """

    class Meta:
        name = "StructureSetQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | StructureSetQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class StructuresQueryType2:
    """
    StructuresQueryType defines the structure of a structures query message.
    """

    class Meta:
        name = "StructuresQueryType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    query: None | StructuresQueryType1 = field(
        default=None,
        metadata={
            "name": "Query",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class StructureType1(MaintainableType):
    """StructureType is an abstract base type for all structure objects.

    Concrete instances of this should restrict to a concrete grouping.
    """

    class Meta:
        name = "StructureType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_structure_components: None | MetadataStructureComponents = field(
        default=None,
        metadata={
            "name": "MetadataStructureComponents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_structure_components: None | DataStructureComponents = field(
        default=None,
        metadata={
            "name": "DataStructureComponents",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class CategorisationQuery(CategorisationQueryType2):
    """
    CategorisationQuery is used to query SDMX compliant databases or web services
    for categorisations.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class CategorySchemeQuery(CategorySchemeQueryType2):
    """
    CategorySchemeQuery is used to query SDMX compliant databases or web services
    for category schemes.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class CodelistQuery(CodelistQueryType2):
    """
    CodelistQuery is used to query SDMX compliant databases or web services for
    codelists.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class ConceptSchemeQuery(ConceptSchemeQueryType2):
    """
    ConceptSchemeQuery is used to query SDMX compliant databases or web services
    for concept schemes.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class ConstraintQuery(ConstraintQueryType2):
    """
    ConstraintQuery is used to query SDMX compliant databases or web services for
    constraints.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class DataStructureQuery(DataStructureQueryType2):
    """
    DataStructureQuery is used to query SDMX compliant databases or web services
    for data structures definitions.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class DataflowQuery(DataflowQueryType2):
    """
    DataflowQuery is used to query SDMX compliant databases or web services for
    dataflows.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class HierarchicalCodelistQuery(HierarchicalCodelistQueryType2):
    """
    HierarchicalCodelistQuery is used to query SDMX compliant databases or web
    services for hierarchical codelists.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class MetadataStructureQuery(MetadataStructureQueryType2):
    """
    MetadataStructureQuery is used to query SDMX compliant databases or web
    services for metadata structure definitions.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class MetadataflowQuery(MetadataflowQueryType2):
    """
    MetadataflowQuery is used to query SDMX compliant databases or web services for
    metadata flows.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class OrganisationSchemeQuery(OrganisationSchemeQueryType2):
    """
    OrganisationSchemeQuery is used to query SDMX compliant databases or web
    services for organisation schemes.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class ProcessQuery(ProcessQueryType2):
    """
    ProcessQuery is used to query SDMX compliant databases or web services for
    processes.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class ProvisionAgreementQuery(ProvisionAgreementQueryType2):
    """
    ProvisionAgreementQuery is used to query SDMX compliant databases or web
    services for provision agreements.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class ReportingTaxonomyQuery(ReportingTaxonomyQueryType2):
    """
    ReportingTaxonomyQuery is used to query SDMX compliant databases or web
    services for reporting taxonomies.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructureSetQuery(StructureSetQueryType2):
    """
    StructureSetQuery is used to query SDMX compliant databases or web services for
    structure sets.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructuresQuery(StructuresQueryType2):
    """
    StructuresQuery is used to query SDMX compliant databases or web services for
    any structures based on simple maintainable object properties (e.g. all objects
    maintained by a maintenance agency).
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class DataStructureType2(StructureType1):
    """DataStructureType describes the structure of a data structure definition.

    A data structure definition is defined as a collection of metadata
    concepts, their structure and usage when used to collect or
    disseminate data.
    """

    class Meta:
        name = "DataStructureType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_structure_components: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class MetadataStructureType2(StructureType1):
    """
    MetadataStructureType is used to describe a metadata structure definition,
    which is defined as a collection of metadata concepts, their structure and
    usage when used to collect or disseminate reference metadata.
    """

    class Meta:
        name = "MetadataStructureType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    data_structure_components: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class DataStructuresType:
    """DataStructuresType describes the structure of the data structure definitions
    container.

    It contains one or more data structure definition, which can be
    explicitly detailed or referenced from an external structure
    document or registry service.

    :ivar data_structure: DataStructure provides the details of a data
        structure definition, which is defined as a collection of
        metadata concepts, their structure and usage when used to
        collect or disseminate data.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    data_structure: list[DataStructureType2] = field(
        default_factory=list,
        metadata={
            "name": "DataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class MetadataStructuresType:
    """MetadataStructuresType describes the structure of the metadata structure
    definitions container.

    It contains one or more metadata structure definition, which can be
    explicitly detailed or referenced from an external structure
    document or registry service.

    :ivar metadata_structure: MetadataStructure provides the details of
        a metadata structure definition, which is defined as a
        collection of metadata concepts, their structure and usage when
        used to collect or disseminate reference metadata. A metadata
        structure definition performs several functions: it groups sets
        of objects into "targets" against which reference metadata may
        be reported. Targets define the structure of the reference
        metadata "keys" which identify specific types of reported
        metadata, and describe the valid values for populating the keys.
        Also, metadata structure definitions provide a presentational
        organization of concepts for reporting purposes. The structure
        of a reference metadata report is derived from this
        presentational structure.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    metadata_structure: list[MetadataStructureType2] = field(
        default_factory=list,
        metadata={
            "name": "MetadataStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "min_occurs": 1,
        },
    )


@dataclass
class StructuresType:
    """StructuresType describes the structure of the container for all structural
    metadata components.

    The structural components may be explicitly detailed, or referenced
    from an external structure document or registry service. Best
    practices dictate that, at a minimum, any structural component that
    is referenced by another structural component be included by
    reference.

    :ivar organisation_schemes: OrganisationSchemes contains a
        collection of organisation scheme descriptions. The organisation
        schemes may be detailed in full, or referenced from an external
        structure document or registry service.
    :ivar dataflows: Dataflows contains a collection of data flow
        descriptions. The data flows may be detailed in full, or
        referenced from an external structure document or registry
        service.
    :ivar metadataflows: Metadataflows contains a collection of metadata
        flow descriptions. The metadata flows may be detailed in full,
        or referenced from an external structure document or registry
        service.
    :ivar category_schemes: CategorySchemes contains a collection of
        category scheme descriptions. The category schemes may be
        detailed in full, or referenced from an external structure
        document or registry service.
    :ivar categorisations: Categorisations contains a collection of
        structural object categorisations. This container may contain
        categorisations for many types of objects. The categorisations
        may be detailed in full, or referenced from an external
        structure document or registry service.
    :ivar codelists: Codelists contains a collection of code list
        descriptions. The code lists may be detailed in full, or
        referenced from an external structure document or registry
        service.
    :ivar hierarchical_codelists: HierarchicalCodelists contains a
        collection of hierarchical code list descriptions. The
        hierarchical code lists may be detailed in full, or referenced
        from an external structure document or registry service.
    :ivar concepts: Concepts contains a collection of concept
        descriptions. The concepts described are contained within
        schemes. The concepts may be detailed in full, or referenced
        from an external structure document or registry service.
    :ivar metadata_structures: MetadataStructures contains a collection
        of metadata structure definition descriptions. The metadata
        structure definitions may be detailed in full, or referenced
        from an external structure document or registry service.
    :ivar data_structures: DataStructures contains a collection of data
        structure definitions. The data structure definitions may be
        detailed in full, or referenced from an external structure
        document or registry service.
    :ivar structure_sets: StructureSets contains a collection of
        structure set descriptions. The structure sets may be detailed
        in full, or referenced from an external structure document or
        registry service.
    :ivar reporting_taxonomies: ReportingTaxonomies contains a
        collection of reporting taxonomy descriptions. The reporting
        taxonomies may be detailed in full, or referenced from an
        external structure document or registry service.
    :ivar processes: Processes contains a collection of process
        descriptions. The processes may be detailed in full, or
        referenced from an external structure document or registry
        service.
    :ivar constraints: Constraints contains a collection of constraint
        descriptions. This container may contain both attachment and
        content constraints. The constraints may be detailed in full, or
        referenced from an external structure document or registry
        service.
    :ivar provision_agreements: ProvisionAgreements contains a
        collection of provision agreements. The provision agreements may
        be detailed in full, or referenced from an external structure
        document or registry service.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"

    organisation_schemes: None | OrganisationSchemesType = field(
        default=None,
        metadata={
            "name": "OrganisationSchemes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    dataflows: None | DataflowsType = field(
        default=None,
        metadata={
            "name": "Dataflows",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadataflows: None | MetadataflowsType = field(
        default=None,
        metadata={
            "name": "Metadataflows",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    category_schemes: None | CategorySchemesType = field(
        default=None,
        metadata={
            "name": "CategorySchemes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    categorisations: None | CategorisationsType = field(
        default=None,
        metadata={
            "name": "Categorisations",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    codelists: None | CodelistsType = field(
        default=None,
        metadata={
            "name": "Codelists",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    hierarchical_codelists: None | HierarchicalCodelistsType = field(
        default=None,
        metadata={
            "name": "HierarchicalCodelists",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    concepts: None | ConceptsType = field(
        default=None,
        metadata={
            "name": "Concepts",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    metadata_structures: None | MetadataStructuresType = field(
        default=None,
        metadata={
            "name": "MetadataStructures",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    data_structures: None | DataStructuresType = field(
        default=None,
        metadata={
            "name": "DataStructures",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    structure_sets: None | StructureSetsType = field(
        default=None,
        metadata={
            "name": "StructureSets",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    reporting_taxonomies: None | ReportingTaxonomiesType = field(
        default=None,
        metadata={
            "name": "ReportingTaxonomies",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    processes: None | ProcessesType = field(
        default=None,
        metadata={
            "name": "Processes",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    constraints: None | ConstraintsType = field(
        default=None,
        metadata={
            "name": "Constraints",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    provision_agreements: None | ProvisionAgreementsType = field(
        default=None,
        metadata={
            "name": "ProvisionAgreements",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )


@dataclass
class StructureType2:
    """StructureType defines the contents of a structure message.

    The payload is optional since this message may be returned from a
    web service with only information in the footer.
    """

    class Meta:
        name = "StructureType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | StructureHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    structures: None | StructuresType = field(
        default=None,
        metadata={
            "name": "Structures",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class Structures(StructuresType):
    """
    Structures contains constructs for all structural metadata components.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"


@dataclass
class Structure(StructureType2):
    """Structure is a message that contains structural metadata.

    It may contain any of the following; categorisations, category
    schemes, code lists, concepts (concept schemes), constraints
    (attachment and content) data flows, hierarchical code lists,
    metadata flows, metadata structure definitions, organisation
    schemes, processes, reporting taxonomies, and structure sets.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class StructuralEventType:
    """
    StructuralEventType provides the details of a structure event, specifically the
    object that changed.

    :ivar structures: Structures contains the details of the structural
        object that has triggered the event. Although this container
        allows for multiple structural object, it should only contain
        the one changed object.
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    structures: None | Structures = field(
        default=None,
        metadata={
            "name": "Structures",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
            "required": True,
        },
    )


@dataclass
class SubmitStructureRequestType1:
    """SubmitStructureRequestType describes the structure of a structure
    submission.

    Structural components are provided either in-line or referenced via
    a SDMX-ML Structure message external to the registry. A default
    action and external reference resolution action are all provided for
    each of the contained components, but can be overridden on a per
    component basis.

    :ivar structure_location: StructureLocation provides the location of
        a SDMX-ML Structure message, external to the repository that can
        be retrieved by the repository submission service.
    :ivar structures: Structures allows for the inline definition of
        structural components for submission.
    :ivar submitted_structure: SubmittedStructure contains a reference
        to one of the structural maintainable artefacts detailed in the
        external SDMX-ML Structure message or in-line and provides an
        override for the default action. This should only be used if the
        action to be performed on the referenced structural object is
        different than the default action. For example, one may want to
        append all structural components of a structure message, save
        one codelist. This codelist could be referenced in a submitted
        structure element and given an action of Informational.
    :ivar action: The action attribute indicates the default action
        (append-add, replace-update, delete, or no action-informational)
        to be taken on all structural components in either the external
        SDMX-ML Structure message or the in-line components. The default
        action is Append. The Replace action is not applicable to final
        structures in the repository, and will produce an error
        condition, as these can be versioned but not modified. To submit
        a later version of a structural object, the object should
        include the incremented version number.
    :ivar external_dependencies: The externalDependencies attribute
        indicates the default resolution of external dependencies. This
        should be set to true if the repository is expected to use
        external reference URLs in the structural components to retrieve
        any externally referenced objects that is used by a non-external
        object.
    """

    class Meta:
        name = "SubmitStructureRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    structure_location: None | str = field(
        default=None,
        metadata={
            "name": "StructureLocation",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    structures: None | Structures = field(
        default=None,
        metadata={
            "name": "Structures",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure",
        },
    )
    submitted_structure: list[SubmittedStructureType] = field(
        default_factory=list,
        metadata={
            "name": "SubmittedStructure",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    action: ActionType = field(
        default=ActionType.APPEND,
        metadata={
            "type": "Attribute",
        },
    )
    external_dependencies: bool = field(
        default=False,
        metadata={
            "name": "externalDependencies",
            "type": "Attribute",
        },
    )


@dataclass
class NotifyRegistryEventType1:
    """NotifyRegistryEventType describes the structure a registry notification, in
    response to a subscription to a registry event.

    At a minimum, the event time, a reference to the change object, a
    reference to the underlying subscription triggering the
    notification, and the action that took place on the object are sent.
    In addition, the full details of the object may be provided at the
    discretion of the registry. In the event that the details are not
    sent, it will be possible to query for the details of the changed
    object using the reference provided.

    :ivar event_time: EventTime specifies the time of the triggering
        event.
    :ivar object_urn: ObjectURN provides the URN of the object on which
        the event occurred, unless the event is related to a
        registration, in which case the RegistrationID element should be
        used.
    :ivar registration_id: RegistrationID provides the id of the
        registration that underwent an event.
    :ivar subscription_urn: SubscriptionURN provides the
        registry/repository URN of the subscription that is the cause of
        this notification being sent.
    :ivar event_action: EventAction indicates the nature of the event -
        whether the action was an addition, a modification, or a
        deletion.
    :ivar structural_event: StructuralEvent is used to provide the
        details of the structural object that has changed.
    :ivar registration_event: RegistrationEvent is used to provide the
        details or the registration object that has changed.
    """

    class Meta:
        name = "NotifyRegistryEventType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"

    event_time: None | XmlDateTime = field(
        default=None,
        metadata={
            "name": "EventTime",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    object_urn: None | str = field(
        default=None,
        metadata={
            "name": "ObjectURN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    registration_id: None | str = field(
        default=None,
        metadata={
            "name": "RegistrationID",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "pattern": r"[A-Za-z0-9_@$\-]+",
        },
    )
    subscription_urn: None | str = field(
        default=None,
        metadata={
            "name": "SubscriptionURN",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    event_action: None | ActionType = field(
        default=None,
        metadata={
            "name": "EventAction",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
            "required": True,
        },
    )
    structural_event: None | StructuralEventType = field(
        default=None,
        metadata={
            "name": "StructuralEvent",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )
    registration_event: None | RegistrationEventType = field(
        default=None,
        metadata={
            "name": "RegistrationEvent",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry",
        },
    )


@dataclass
class RegistryInterfaceType:
    """
    This is a type which describes a structure for holding all of the various
    dedicated registry interface message types.

    :ivar header:
    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar footer:
    """

    class Meta:
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    header: None | BasicHeaderType = field(
        default=None,
        metadata={
            "name": "Header",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )
    submit_registrations_request: None | SubmitRegistrationsRequestType1 = field(
        default=None,
        metadata={
            "name": "SubmitRegistrationsRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    submit_registrations_response: None | SubmitRegistrationsResponseType1 = field(
        default=None,
        metadata={
            "name": "SubmitRegistrationsResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    query_registration_request: None | QueryRegistrationRequestType1 = field(
        default=None,
        metadata={
            "name": "QueryRegistrationRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    query_registration_response: None | QueryRegistrationResponseType1 = field(
        default=None,
        metadata={
            "name": "QueryRegistrationResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    submit_structure_request: None | SubmitStructureRequestType1 = field(
        default=None,
        metadata={
            "name": "SubmitStructureRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    submit_structure_response: None | SubmitStructureResponseType1 = field(
        default=None,
        metadata={
            "name": "SubmitStructureResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    submit_subscriptions_request: None | SubmitSubscriptionsRequestType1 = field(
        default=None,
        metadata={
            "name": "SubmitSubscriptionsRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    submit_subscriptions_response: None | SubmitSubscriptionsResponseType1 = field(
        default=None,
        metadata={
            "name": "SubmitSubscriptionsResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    query_subscription_request: None | QuerySubscriptionRequestType1 = field(
        default=None,
        metadata={
            "name": "QuerySubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    query_subscription_response: None | QuerySubscriptionResponseType1 = field(
        default=None,
        metadata={
            "name": "QuerySubscriptionResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    notify_registry_event: None | NotifyRegistryEventType1 = field(
        default=None,
        metadata={
            "name": "NotifyRegistryEvent",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
        },
    )
    footer: None | Footer = field(
        default=None,
        metadata={
            "name": "Footer",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message/footer",
        },
    )


@dataclass
class NotifyRegistryEventType2(RegistryInterfaceType):
    """
    NotifyRegistryEventType defines the structure of a registry notification
    document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar footer:
    :ivar notify_registry_event:
    """

    class Meta:
        name = "NotifyRegistryEventType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    footer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: None | NotifyRegistryEventType1 = field(
        default=None,
        metadata={
            "name": "NotifyRegistryEvent",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class QueryRegistrationRequestType2(RegistryInterfaceType):
    """
    QueryRegistrationRequestType defines the structure of a registry query
    registration request document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar footer:
    :ivar query_registration_request:
    """

    class Meta:
        name = "QueryRegistrationRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    footer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: None | QueryRegistrationRequestType1 = field(
        default=None,
        metadata={
            "name": "QueryRegistrationRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class QueryRegistrationResponseType2(RegistryInterfaceType):
    """
    SubmitRegistrationRequestType defines the structure of a registry submit
    registration response document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar query_registration_response:
    """

    class Meta:
        name = "QueryRegistrationResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: None | QueryRegistrationResponseType1 = field(
        default=None,
        metadata={
            "name": "QueryRegistrationResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class QuerySubscriptionRequestType2(RegistryInterfaceType):
    """
    QuerySubscriptionRequestType defines the structure of a registry query
    subscription request document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar footer:
    :ivar query_subscription_request:
    """

    class Meta:
        name = "QuerySubscriptionRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    footer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: None | QuerySubscriptionRequestType1 = field(
        default=None,
        metadata={
            "name": "QuerySubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class QuerySubscriptionResponseType2(RegistryInterfaceType):
    """
    QuerySubscriptionResponseType defines the structure of a registry query
    subscription response document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar query_subscription_response:
    """

    class Meta:
        name = "QuerySubscriptionResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: None | QuerySubscriptionResponseType1 = field(
        default=None,
        metadata={
            "name": "QuerySubscriptionResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class RegistryInterface(RegistryInterfaceType):
    """
    RegistryInterface is used to conduct all interactions with the SDMX Registry
    Services.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitRegistrationsRequestType2(RegistryInterfaceType):
    """
    SubmitRegistrationsRequestType defines the structure of a registry submit
    registration requests document.

    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar footer:
    :ivar submit_registrations_request:
    """

    class Meta:
        name = "SubmitRegistrationsRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    footer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_request: None | SubmitRegistrationsRequestType1 = field(
        default=None,
        metadata={
            "name": "SubmitRegistrationsRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class SubmitRegistrationsResponseType2(RegistryInterfaceType):
    """
    SubmitRegistrationsResponseType defines the structure of a registry submit
    registration response document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar submit_registrations_response:
    """

    class Meta:
        name = "SubmitRegistrationsResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: None | SubmitRegistrationsResponseType1 = field(
        default=None,
        metadata={
            "name": "SubmitRegistrationsResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class SubmitStructureRequestType2(RegistryInterfaceType):
    """
    SubmitStructureRequestType defines the structure of a registry submit structure
    request document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar footer:
    :ivar submit_structure_request:
    """

    class Meta:
        name = "SubmitStructureRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    footer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: None | SubmitStructureRequestType1 = field(
        default=None,
        metadata={
            "name": "SubmitStructureRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class SubmitStructureResponseType2(RegistryInterfaceType):
    """
    SubmitStructureResponseType defines the structure of a registry submit
    registration response document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar submit_structure_response:
    """

    class Meta:
        name = "SubmitStructureResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: None | SubmitStructureResponseType1 = field(
        default=None,
        metadata={
            "name": "SubmitStructureResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class SubmitSubscriptionsRequestType2(RegistryInterfaceType):
    """
    SubmitSubscriptionsRequestType defines the structure of a registry submit
    subscription request document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_response: SubmitSubscriptionsResponse is
        the response to a submit subscriptions request. It contains
        information which describes the success or failure of each
        subscription request, providing any error messages in the event
        of failure. If successful, it returns the registry URN of the
        subscription, and the subscriber-assigned ID.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar footer:
    :ivar submit_subscriptions_request:
    """

    class Meta:
        name = "SubmitSubscriptionsRequestType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    footer: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: None | SubmitSubscriptionsRequestType1 = field(
        default=None,
        metadata={
            "name": "SubmitSubscriptionsRequest",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class SubmitSubscriptionsResponseType2(RegistryInterfaceType):
    """
    SubmitSubscriptionsResponseType defines the structure of a registry submit
    subscription response document.

    :ivar submit_registrations_request: SubmitRegistrationsRequest is
        sent to the registry by an agency or data/metadata provider to
        request one or more registrations for a data set or metadata
        set. The data source to be registered must be accessible to the
        registry services at an indicated URL, so that it can be
        processed by those services.
    :ivar submit_registrations_response: SubmitRegistrationsResponse is
        sent to the agency or data/metadata provider in response to a
        submit registrations request. It indicates the success or
        failure of each registration request, and contains any error
        messages generated by the registration service.
    :ivar query_registration_request: QueryRegistrationRequest is used
        to query the contents of a registry for data sets and metadata
        sets. It specifies whether the result set should include
        metadata sets, data sets, or both. The search can be
        characterized by providing constraints including reference
        periods, data regions, and data keys.
    :ivar query_registration_response: QueryRegistrationResponse is sent
        as a response to any query of the contents of a registry. The
        result set contains a set of links to data and/or metadata If
        the result set is null, or there is some other problem with the
        query, then appropriate error messages and statuses will be
        returned.
    :ivar submit_structure_request: SubmitStructureRequest is used to
        submit structure definitions to the repository. The structure
        resources (key families, agencies, concepts and concept schemes,
        code lists, etc.) to be submitted may be communicated in-line or
        be supplied in a referenced SDMX-ML Structure messages external
        to the registry. A response will indicate status and contain any
        relevant error information.
    :ivar submit_structure_response: SubmitStructureResponse is returned
        by the registry when a structure submission request is received.
        It indicates the status of the submission, and carries any error
        messages which are generated, if relevant.
    :ivar submit_subscriptions_request: SubmitSubscriptionsRequest
        contains one or more requests submitted to the registry to
        subscribe to registration and change events for specific
        registry resources.
    :ivar query_subscription_request: QuerySubscriptionRequest is used
        to query the registry for the subscriptions of a given
        organisation.
    :ivar query_subscription_response: QuerySubscriptionResponse is sent
        as a response to a subscription query. If the query is
        successful, the details of all subscriptions for the requested
        organisation are sent.
    :ivar notify_registry_event: NotifyRegistryEvent is sent by the
        registry services to subscribers, to notify them of specific
        registration and change events. Basic information about the
        event, such as the object that triggered it, the time of the
        event, the action that took place, and the subscription that
        triggered the notification are always sent. Optionally, the
        details of the changed object may also be provided.
    :ivar submit_subscriptions_response:
    """

    class Meta:
        name = "SubmitSubscriptionsResponseType"
        target_namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"

    submit_registrations_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_registrations_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_registration_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_structure_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_request: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    query_subscription_response: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    notify_registry_event: Any = field(
        init=False,
        metadata={
            "type": "Ignore",
        },
    )
    submit_subscriptions_response: None | SubmitSubscriptionsResponseType1 = field(
        default=None,
        metadata={
            "name": "SubmitSubscriptionsResponse",
            "type": "Element",
            "namespace": "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message",
            "required": True,
        },
    )


@dataclass
class NotifyRegistryEvent(NotifyRegistryEventType2):
    """NotifyRegistryEvent is sent by the registry services to subscribers, to
    notify them of specific registration and change events.

    Basic information about the event, such as the object that triggered
    it, the time of the event, the action that took place, and the
    subscription that triggered the notification are always sent.
    Optionally, the details of the changed object may also be provided.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class QueryRegistrationRequest(QueryRegistrationRequestType2):
    """QueryRegistrationRequest is used to query the contents of a registry for
    data sets and metadata sets.

    It specifies whether the result set should include metadata sets,
    data sets, or both. The search can be characterized by providing
    constraints including reference periods, data regions, and data
    keys.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class QueryRegistrationResponse(QueryRegistrationResponseType2):
    """QueryRegistrationResponse is sent as a response to any query of the contents
    of a registry.

    The result set contains a set of links to data and/or metadata If
    the result set is null, or there is some other problem with the
    query, then appropriate error messages and statuses will be
    returned.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class QuerySubscriptionRequest(QuerySubscriptionRequestType2):
    """
    QuerySubscriptionRequest is used to query the registry for the subscriptions of
    a given organisation.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class QuerySubscriptionResponse(QuerySubscriptionResponseType2):
    """QuerySubscriptionResponse is sent as a response to a subscription query.

    If the query is successful, the details of all subscriptions for the
    requested organisation are sent.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitRegistrationsRequest(SubmitRegistrationsRequestType2):
    """SubmitRegistrationsRequest is sent to the registry by an agency or
    data/metadata provider to request on or more registrations for a data set or
    metadata set.

    The data source to be registered must be accessible to the registry
    services at an indicated URL, so that it can be processed by those
    services.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitRegistrationsResponse(SubmitRegistrationsResponseType2):
    """SubmitRegistrationsResponse is sent to the agency or data/metadata provider
    in response to a registration requests.

    It indicates the success or failure of each registration request,
    and contains any error messages generated by the registration
    service.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitStructureRequest(SubmitStructureRequestType2):
    """SubmitStructureRequest is used to submit structure definitions to the
    repository.

    The structure resources (key families, agencies, concepts and
    concept schemes, code lists, etc.) to be submitted may be
    communicated in-line or be supplied in a referenced SDMX-ML
    Structure messages external to the registry. A response will
    indicate status and contain any relevant error information.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitStructureResponse(SubmitStructureResponseType2):
    """SubmitStructureResponse is returned by the registry when a structure
    submission request is received.

    It indicates the status of the submission, and carries any error
    messages which are generated, if relevant.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitSubscriptionsRequest(SubmitSubscriptionsRequestType2):
    """
    SubmitSubscriptionsRequest contains one or more requests submitted to the
    registry to subscribe to registration and change events for specific registry
    resources.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"


@dataclass
class SubmitSubscriptionsResponse(SubmitSubscriptionsResponseType2):
    """SubmitSubscriptionsResponse is the response to a submit subscriptions
    request.

    It contains information which describes the success or failure of
    each subscription request, providing any error messages in the event
    of failure. If successful, it returns the registry URN of the
    subscription, and the subscriber-assigned ID.
    """

    class Meta:
        namespace = "http://www.sdmx.org/resources/sdmxml/schemas/v2_1/message"
